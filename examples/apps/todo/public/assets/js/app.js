(function(undefined) {
  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  var global_object = this, console;

  // Detect the global object
  if (typeof(global) !== 'undefined') { global_object = global; }
  if (typeof(window) !== 'undefined') { global_object = window; }

  // Setup a dummy console object if missing
  if (typeof(global_object.console) === 'object') {
    console = global_object.console;
  } else if (global_object.console == null) {
    console = global_object.console = {};
  } else {
    console = {};
  }

  if (!('log' in console)) { console.log = function () {}; }
  if (!('warn' in console)) { console.warn = console.log; }

  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // Constructor for instances of BasicObject
  function BasicObject_alloc(){}

  // Constructor for instances of Object
  function Object_alloc(){}

  // Constructor for instances of Class
  function Class_alloc(){}

  // Constructor for instances of Module
  function Module_alloc(){}

  // Constructor for instances of NilClass (nil)
  function NilClass_alloc(){}

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // All bridged classes - keep track to donate methods from Object
  var BridgedClasses = {};

  // This is a useful reference to global object inside ruby files
  Opal.global = global_object;
  global_object.Opal = Opal;

  // Configure runtime behavior with regards to require and unsupported fearures
  Opal.config = {
    missing_require_severity: 'error',        // error, warning, ignore
    unsupported_features_severity: 'warning', // error, warning, ignore
    enable_stack_trace: true                  // true, false
  }

  // Minify common function calls
  var $hasOwn = Object.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Retrieve or assign the id of an object
  Opal.id = function(obj) {
    if (obj.$$is_number) return (obj * 2)+1;
    return obj.$$id || (obj.$$id = Opal.uid());
  };

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and chrome for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    Opal.gvars["!"] = Opal.exceptions.pop() || nil;
  }

  // Inspect any kind of object, including non Ruby ones
  Opal.inspect = function(obj) {
    if (obj === undefined) {
      return "undefined";
    }
    else if (obj === null) {
      return "null";
    }
    else if (!obj.$$class) {
      return obj.toString();
    }
    else {
      return obj.$inspect();
    }
  }


  // Truth
  // -----

  Opal.truthy = function(val) {
    return (val !== nil && val != null && (!val.$$is_boolean || val == true));
  };

  Opal.falsy = function(val) {
    return (val === nil || val == null || (val.$$is_boolean && val == false))
  };


  // Constants
  // ---------
  //
  // For future reference:
  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)
  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)
  //
  // Legend of MRI concepts/names:
  // - constant reference (cref): the module/class that acts as a namespace
  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside
  //            `module A; module B::C; end; end` is `[B::C, A]`

  // Get the cosntant in the scope of the current cref
  function const_get_name(cref, name) {
    if (cref) return cref.$$const[name];
  }

  // Walk up the nesting array looking for the constant
  function const_lookup_nesting(nesting, name) {
    var i, ii, result, constant;

    if (nesting.length === 0) return;

    // If the nesting is not empty the constant is looked up in its elements
    // and in order. The ancestors of those elements are ignored.
    for (i = 0, ii = nesting.length; i < ii; i++) {
      constant = nesting[i].$$const[name];
      if (constant != null) return constant;
    }
  }

  // Walk up the ancestors chain looking for the constant
  function const_lookup_ancestors(cref, name) {
    var i, ii, result, ancestors;

    if (cref == null) return;

    ancestors = Opal.ancestors(cref);

    for (i = 0, ii = ancestors.length; i < ii; i++) {
      if (ancestors[i].$$const && $hasOwn.call(ancestors[i].$$const, name)) {
        return ancestors[i].$$const[name];
      }
    }
  }

  // Walk up Object's ancestors chain looking for the constant,
  // but only if cref is missing or a module.
  function const_lookup_Object(cref, name) {
    if (cref == null || cref.$$is_module) {
      return const_lookup_ancestors(_Object, name);
    }
  }

  // Call const_missing if nothing else worked
  function const_missing(cref, name, skip_missing) {
    if (!skip_missing) {
      return (cref || _Object).$const_missing(name);
    }
  }

  // Look for the constant just in the current cref or call `#const_missing`
  Opal.const_get_local = function(cref, name, skip_missing) {
    var result;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_a_module) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    result = const_get_name(cref, name);              if (result != null) return result;
    result = const_missing(cref, name, skip_missing); if (result != null) return result;
  }

  // Look for the constant relative to a cref or call `#const_missing` (when the
  // constant is prefixed by `::`).
  Opal.const_get_qualified = function(cref, name, skip_missing) {
    var result, cache, cached, current_version = Opal.const_cache_version;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_a_module) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    if ((cache = cref.$$const_cache) == null) {
      cache = cref.$$const_cache = Object.create(null);
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null);
      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Initialize the top level constant cache generation counter
  Opal.const_cache_version = 1;

  // Look for the constant in the open using the current nesting and the nearest
  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).
  Opal.const_get_relative = function(nesting, name, skip_missing) {
    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;

    if ((cache = nesting.$$const_cache) == null) {
      cache = nesting.$$const_cache = Object.create(null);
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_nesting(nesting, name))     != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null) ||
      ((result = const_lookup_Object(cref, name))         != null);

      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Register the constant on a cref and opportunistically set the name of
  // unnamed classes/modules.
  Opal.const_set = function(cref, name, value) {
    if (cref == null || cref === '::') cref = _Object;

    if (value.$$is_a_module) {
      if (value.$$name == null || value.$$name === nil) value.$$name = name;
      if (value.$$base_module == null) value.$$base_module = cref;
    }

    cref.$$const = (cref.$$const || Object.create(null));
    cref.$$const[name] = value;

    Opal.const_cache_version++;

    // Expose top level constants onto the Opal object
    if (cref === _Object) Opal[name] = value;

    return value;
  };

  // Get all the constants reachable from a given cref, by default will include
  // inherited constants.
  Opal.constants = function(cref, inherit) {
    if (inherit == null) inherit = true;

    var module, modules = [cref], module_constants, i, ii, constants = {}, constant;

    if (inherit) modules = modules.concat(Opal.ancestors(cref));
    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));

    for (i = 0, ii = modules.length; i < ii; i++) {
      module = modules[i];

      // Don not show Objects constants unless we're querying Object itself
      if (cref !== _Object && module == _Object) break;

      for (constant in module.$$const) {
        constants[constant] = true;
      }
    }

    return Object.keys(constants);
  };

  // Remove a constant from a cref.
  Opal.const_remove = function(cref, name) {
    Opal.const_cache_version++;

    if (cref.$$const[name] != null) {
      var old = cref.$$const[name];
      delete cref.$$const[name];
      return old;
    }

    if (cref.$$autoload != null && cref.$$autoload[name] != null) {
      delete cref.$$autoload[name];
      return nil;
    }

    throw Opal.NameError.$new("constant "+cref+"::"+cref.$name()+" not defined");
  };


  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `base` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `base` is an object (not a class/module), we simple get its class and
  // use that as the base instead.
  //
  // @param base        [Object] where the class is being created
  // @param superclass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [JS.Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.klass = function(base, superclass, name, constructor) {
    var klass, bridged, alloc;

    if (base == null) {
      base = _Object;
    }

    // If base is an object, use its class
    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    // If the superclass is a function then we're bridging a native JS class
    if (typeof(superclass) === 'function') {
      bridged = superclass;
      superclass = _Object;
    }

    // Try to find the class in the current scope
    klass = const_get_name(base, name);

    // If the class exists in the scope, then we must use that
    if (klass) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superclass && klass.$$super !== superclass) {
        throw Opal.TypeError.$new("superclass mismatch for class " + name);
      }

      return klass;
    }

    // Class doesnt exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superclass == null) {
      superclass = _Object;
    }

    // If bridged the JS class will also be the alloc function
    alloc = bridged || Opal.boot_class_alloc(name, constructor, superclass);

    // Create the class object (instance of Class)
    klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    // @property $$super the superclass, doesn't get changed by module inclusions
    klass.$$super = superclass;

    // @property $$parent direct parent class
    //                    starts with the superclass, after klass inclusion is
    //                    the last included klass
    klass.$$parent = superclass;

    Opal.const_set(base, name, klass);

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    base[name] = klass;

    if (bridged) {
      Opal.bridge(klass, alloc);
    }
    else {
      // Call .inherited() hook with new class on the superclass
      if (superclass.$inherited) {
        superclass.$inherited(klass);
      }
    }

    return klass;
  };

  // Boot a base class (makes instances).
  //
  // @param name [String,null] the class name
  // @param constructor [JS.Function] the class' instances constructor/alloc function
  // @param superclass  [Class,null] the superclass object
  // @return [JS.Function] the consturctor holding the prototype for the class' instances
  Opal.boot_class_alloc = function(name, constructor, superclass) {
    if (superclass) {
      var alloc_proxy = function() {};
      alloc_proxy.prototype = superclass.$$proto || superclass.prototype;
      constructor.prototype = new alloc_proxy();
    }

    if (name) {
      constructor.displayName = name+'_alloc';
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  };

  Opal.setup_module_or_class = function(module) {
    // @property $$id Each class/module is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    module.$$id = Opal.uid();

    // @property $$is_a_module Will be true for Module and its subclasses
    //                         instances (namely: Class).
    module.$$is_a_module = true;

    // @property $$inc included modules
    module.$$inc = [];

    // initialize the name with nil
    module.$$name = nil;

    // Initialize the constants table
    module.$$const = Object.create(null);

    // @property $$cvars class variables defined in the current module
    module.$$cvars = Object.create(null);
  }



  // Adds common/required properties to class object (as in `Class.new`)
  //
  // @param name  [String,null] The name of the class
  //
  // @param alloc [JS.Function] The constructor of the class' instances
  //
  // @param superclass_name [String,null]
  //   The name of the super class, this is
  //   usefule to build the `.displayName` of the singleton class
  //
  // @param superclass_alloc [JS.Function]
  //   The constructor of the superclass from which the singleton_class is
  //   derived.
  //
  // @return [Class]
  Opal.setup_class_object = function(name, alloc, superclass_name, superclass_alloc) {
    // Grab the superclass prototype and use it to build an intermediary object
    // in the prototype chain.
    var superclass_alloc_proxy = function() {};
        superclass_alloc_proxy.prototype = superclass_alloc.prototype;
        superclass_alloc_proxy.displayName = superclass_name;

    var singleton_class_alloc = function() {}
        singleton_class_alloc.prototype = new superclass_alloc_proxy();

    // The built class is the only instance of its singleton_class
    var klass = new singleton_class_alloc();

    Opal.setup_module_or_class(klass);

    // @property $$alloc This is the constructor of instances of the current
    //                   class. Its prototype will be used for method lookup
    klass.$$alloc = alloc;

    klass.$$name = name || nil;

    // Set a displayName for the singleton_class
    singleton_class_alloc.displayName = "#<Class:"+(name || ("#<Class:"+klass.$$id+">"))+">";

    // @property $$proto This is the prototype on which methods will be defined
    klass.$$proto = alloc.prototype;

    // @property $$proto.$$class Make available to instances a reference to the
    //                           class they belong to.
    klass.$$proto.$$class = klass;

    // @property constructor keeps a ref to the constructor, but apparently the
    //                       constructor is already set on:
    //
    //                          `var klass = new constructor` is called.
    //
    //                       Maybe there are some browsers not abiding (IE6?)
    klass.constructor = singleton_class_alloc;

    // @property $$is_class Clearly mark this as a class
    klass.$$is_class = true;

    // @property $$class Classes are instances of the class Class
    klass.$$class    = Class;

    return klass;
  };

  // Define new module (or return existing module). The given `base` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the base is a ruby
  // object then that objects real ruby class is used (e.g. if the base is the
  // main object, then the top level `Object` class is used as the base).
  //
  // If a module of the given name is already defined in the base, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the base, then an error is
  // generated instead (cannot have a class and module of same name in same base).
  //
  // Otherwise, a new module is created in the base with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  base [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  Opal.module = function(base, name) {
    var module;

    if (base == null) {
      base = _Object;
    }

    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    module = const_get_name(base, name);
    if (module == null && base === _Object) module = const_lookup_ancestors(_Object, name);

    if (module) {
      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }
    else {
      module = Opal.module_allocate(Module);
      Opal.const_set(base, name, module);
    }

    return module;
  };

  // The implementation for Module#initialize
  // @param module [Module]
  // @param block [Proc,nil]
  // @return nil
  Opal.module_initialize = function(module, block) {
    if (block !== nil) {
      var block_self = block.$$s;
      block.$$s = null;
      block.call(module);
      block.$$s = block_self;
    }
    return nil;
  };

  // Internal function to create a new module instance. This simply sets up
  // the prototype hierarchy and method tables.
  //
  Opal.module_allocate = function(superclass) {
    var mtor = function() {};
    mtor.prototype = superclass.$$alloc.prototype;

    var module_constructor = function() {};
    module_constructor.prototype = new mtor();

    var module = new module_constructor();
    var module_prototype = {};

    Opal.setup_module_or_class(module);

    // initialize dependency tracking
    module.$$included_in = [];

    // Set the display name of the singleton prototype holder
    module_constructor.displayName = "#<Class:#<Module:"+module.$$id+">>"

    // @property $$proto This is the prototype on which methods will be defined
    module.$$proto = module_prototype;

    // @property constructor
    //   keeps a ref to the constructor, but apparently the
    //   constructor is already set on:
    //
    //      `var module = new constructor` is called.
    //
    //   Maybe there are some browsers not abiding (IE6?)
    module.constructor = module_constructor;

    // @property $$is_module Clearly mark this as a module
    module.$$is_module = true;
    module.$$class     = Module;

    // @property $$super
    //   the superclass, doesn't get changed by module inclusions
    module.$$super = superclass;

    // @property $$parent
    //   direct parent class or module
    //   starts with the superclass, after module inclusion is
    //   the last included module
    module.$$parent = superclass;

    return module;
  };

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.$$is_class || object.$$is_module) {
      return Opal.build_class_singleton_class(object);
    }

    return Opal.build_object_singleton_class(object);
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(object) {
    var alloc, superclass, klass;

    if (object.$$meta) {
      return object.$$meta;
    }

    // The constructor and prototype of the singleton_class instances is the
    // current class constructor and prototype.
    alloc = object.constructor;

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    superclass = object === BasicObject ? Class : Opal.build_class_singleton_class(object.$$super);

    klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);
    klass.$$super  = superclass;
    klass.$$parent = superclass;

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        name = "#<Class:#<" + superclass.$$name + ":" + superclass.$$id + ">>";

    var alloc = Opal.boot_class_alloc(name, function(){}, superclass)
    var klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    klass.$$super  = superclass;
    klass.$$parent = superclass;
    klass.$$class  = superclass.$$class;
    klass.$$proto  = object;

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Returns an object containing all pairs of names/values
  // for all class variables defined in provided +module+
  // and its ancestors.
  //
  // @param module [Module]
  // @return [Object]
  Opal.class_variables = function(module) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length,
        result = {};

    for (i = length - 1; i >= 0; i--) {
      var ancestor = ancestors[i];

      for (var cvar in ancestor.$$cvars) {
        result[cvar] = ancestor.$$cvars[cvar];
      }
    }

    return result;
  }

  // Sets class variable with specified +name+ to +value+
  // in provided +module+
  //
  // @param module [Module]
  // @param name [String]
  // @param value [Object]
  Opal.class_variable_set = function(module, name, value) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length;

    for (i = length - 2; i >= 0; i--) {
      var ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$cvars, name)) {
        ancestor.$$cvars[name] = value;
        return value;
      }
    }

    module.$$cvars[name] = value;

    return value;
  }

  // Bridges a single method.
  //
  // @param target [JS::Function] the constructor of the bridged class
  // @param from [Module] the module/class we are importing the method from
  // @param name [String] the method name in JS land (i.e. starting with $)
  // @param body [JS::Function] the body of the method
  Opal.bridge_method = function(target_constructor, from, name, body) {
    var ancestors, i, ancestor, length;

    ancestors = target_constructor.$$bridge.$ancestors();

    // order important here, we have to check for method presence in
    // ancestors from the bridged class to the last ancestor
    for (i = 0, length = ancestors.length; i < length; i++) {
      ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$proto, name) &&
          ancestor.$$proto[name] &&
          !ancestor.$$proto[name].$$donated &&
          !ancestor.$$proto[name].$$stub &&
          ancestor !== from) {
        break;
      }

      if (ancestor === from) {
        target_constructor.prototype[name] = body
        break;
      }
    }
  };

  // Bridges from *donator* to a *target*.
  //
  // @param target [Module] the potentially associated with bridged classes module
  // @param donator [Module] the module/class source of the methods that should be bridged
  Opal.bridge_methods = function(target, donator) {
    var i,
        bridged = BridgedClasses[target.$__id__()],
        donator_id = donator.$__id__();

    if (bridged) {
      BridgedClasses[donator_id] = bridged.slice();

      for (i = bridged.length - 1; i >= 0; i--) {
        Opal_bridge_methods_to_constructor(bridged[i], donator)
      }
    }
  };

  // Actually bridge methods to the bridged (shared) prototype.
  function Opal_bridge_methods_to_constructor(target_constructor, donator) {
    var i,
        method,
        methods = donator.$instance_methods();

    for (i = methods.length - 1; i >= 0; i--) {
      method = '$' + methods[i];
      Opal.bridge_method(target_constructor, donator, method, donator.$$proto[method]);
    }
  }

  // Associate the target as a bridged class for the current "donator"
  function Opal_add_bridged_constructor(target_constructor, donator) {
    var donator_id = donator.$__id__();

    if (!BridgedClasses[donator_id]) {
      BridgedClasses[donator_id] = [];
    }
    BridgedClasses[donator_id].push(target_constructor);
  }

  // Walks the dependency tree detecting the presence of the base among its
  // own dependencies.
  //
  // @param [Integer] base_id The id of the base module (eg. the "includer")
  // @param [Array<Module>] deps The array of dependencies (eg. the included module, included.$$deps)
  // @param [String] prop The property that holds dependencies (eg. "$$deps")
  // @param [JS::Object] seen A JS object holding the cache of already visited objects
  // @return [Boolean] true if a cyclic dependency is present
  Opal.has_cyclic_dep = function has_cyclic_dep(base_id, deps, prop, seen) {
    var i, dep_id, dep;

    for (i = deps.length - 1; i >= 0; i--) {
      dep = deps[i];
      dep_id = dep.$$id;

      if (seen[dep_id]) {
        continue;
      }
      seen[dep_id] = true;

      if (dep_id === base_id) {
        return true;
      }

      if (has_cyclic_dep(base_id, dep[prop], prop, seen)) {
        return true;
      }
    }

    return false;
  }

  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param includer [Module] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, includer) {
    var iclass, donator, prototype, methods, id, i;

    // check if this module is already included in the class
    for (i = includer.$$inc.length - 1; i >= 0; i--) {
      if (includer.$$inc[i] === module) {
        return;
      }
    }

    // Check that the base module is not also a dependency, classes can't be
    // dependencies so we have a special case for them.
    if (!includer.$$is_class && Opal.has_cyclic_dep(includer.$$id, [module], '$$inc', {})) {
      throw Opal.ArgumentError.$new('cyclic include detected')
    }

    Opal.const_cache_version++;
    includer.$$inc.push(module);
    module.$$included_in.push(includer);
    Opal.bridge_methods(includer, module);

    // iclass
    iclass = {
      $$name:   module.$$name,
      $$proto:  module.$$proto,
      $$parent: includer.$$parent,
      $$module: module,
      $$iclass: true
    };

    includer.$$parent = iclass;

    methods = module.$instance_methods();

    for (i = methods.length - 1; i >= 0; i--) {
      Opal.update_includer(module, includer, '$' + methods[i])
    }
  };

  // Table that holds all methods that have been defined on all objects
  // It is used for defining method stubs for new coming native classes
  Opal.stubs = {};

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for th new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(klass, constructor) {
    if (constructor.$$bridge) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    Opal.stub_subscribers.push(constructor.prototype);

    // Populate constructor with previously stored stubs
    for (var method_name in Opal.stubs) {
      if (!(method_name in constructor.prototype)) {
        constructor.prototype[method_name] = Opal.stub_for(method_name);
      }
    }

    constructor.prototype.$$class = klass;
    constructor.$$bridge          = klass;

    var ancestors = klass.$ancestors();

    // order important here, we have to bridge from the last ancestor to the
    // bridged class
    for (var i = ancestors.length - 1; i >= 0; i--) {
      Opal_add_bridged_constructor(constructor, ancestors[i]);
      Opal_bridge_methods_to_constructor(constructor, ancestors[i]);
    }

    for (var name in BasicObject_alloc.prototype) {
      var method = BasicObject_alloc.prototype[method];

      if (method && method.$$stub && !(name in constructor.prototype)) {
        constructor.prototype[name] = method;
      }
    }

    return klass;
  };

  // Update `jsid` method cache of all classes / modules including `module`.
  Opal.update_includer = function(module, includer, jsid) {
    var dest, current, body,
        klass_includees, j, jj, current_owner_index, module_index;

    body    = module.$$proto[jsid];
    dest    = includer.$$proto;
    current = dest[jsid];

    if (dest.hasOwnProperty(jsid) && !current.$$donated && !current.$$stub) {
      // target class has already defined the same method name - do nothing
    }
    else if (dest.hasOwnProperty(jsid) && !current.$$stub) {
      // target class includes another module that has defined this method
      klass_includees = includer.$$inc;

      for (j = 0, jj = klass_includees.length; j < jj; j++) {
        if (klass_includees[j] === current.$$donated) {
          current_owner_index = j;
        }
        if (klass_includees[j] === module) {
          module_index = j;
        }
      }

      // only redefine method on class if the module was included AFTER
      // the module which defined the current method body. Also make sure
      // a module can overwrite a method it defined before
      if (current_owner_index <= module_index) {
        dest[jsid] = body;
        dest[jsid].$$donated = module;
      }
    }
    else {
      // neither a class, or module included by class, has defined method
      dest[jsid] = body;
      dest[jsid].$$donated = module;
    }

    // if the includer is a module, recursively update all of its includres.
    if (includer.$$included_in) {
      Opal.update_includers(includer, jsid);
    }
  };

  // Update `jsid` method cache of all classes / modules including `module`.
  Opal.update_includers = function(module, jsid) {
    var i, ii, includee, included_in;

    included_in = module.$$included_in;

    if (!included_in) {
      return;
    }

    for (i = 0, ii = included_in.length; i < ii; i++) {
      includee = included_in[i];
      Opal.update_includer(module, includee, jsid);
    }
  };

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module_or_class) {
    var parent = module_or_class,
        result = [],
        modules, i, ii, j, jj;

    while (parent) {
      result.push(parent);
      for (i = parent.$$inc.length-1; i >= 0; i--) {
        modules = Opal.ancestors(parent.$$inc[i]);

        for(j = 0, jj = modules.length; j < jj; j++) {
          result.push(modules[j]);
        }
      }

      // only the actual singleton class gets included in its ancestry
      // after that, traverse the normal class hierarchy
      if (parent.$$is_singleton && parent.$$singleton_of.$$is_module) {
        parent = parent.$$singleton_of.$$super;
      }
      else {
        parent = parent.$$is_class ? parent.$$super : null;
      }
    }

    return result;
  };


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var subscriber, subscribers = Opal.stub_subscribers,
        i, ilength = stubs.length,
        j, jlength = subscribers.length,
        method_name, stub,
        opal_stubs = Opal.stubs;

    for (i = 0; i < ilength; i++) {
      method_name = stubs[i];

      if(!opal_stubs.hasOwnProperty(method_name)) {
        // Save method name to populate other subscribers with this stub
        opal_stubs[method_name] = true;
        stub = Opal.stub_for(method_name);

        for (j = 0; j < jlength; j++) {
          subscriber = subscribers[j];

          if (!(method_name in subscriber)) {
            subscriber[method_name] = stub;
          }
        }
      }
    }
  };

  // Keep a list of prototypes that want method_missing stubs to be added.
  //
  // @default [Prototype List] BasicObject_alloc.prototype
  //
  Opal.stub_subscribers = [BasicObject_alloc.prototype];

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = Opal.stub_for(stub);
    prototype[stub] = method_missing_stub;
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_class || object.$$is_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');
  };

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, mid, current_func, defcheck, defs) {
    var dispatcher, super_method;

    if (defs) {
      if (obj.$$is_class || obj.$$is_module) {
        dispatcher = defs.$$super;
      }
      else {
        dispatcher = obj.$$class.$$proto;
      }
    }
    else {
      dispatcher = Opal.find_obj_super_dispatcher(obj, mid, current_func);
    }

    super_method = dispatcher['$' + mid];

    if (!defcheck && super_method.$$stub && Opal.Kernel.$method_missing === obj.$method_missing) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+"' for "+obj, mid);
    }

    return super_method;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
  };

  Opal.find_obj_super_dispatcher = function(obj, mid, current_func) {
    var klass = obj.$$meta || obj.$$class;

    // first we need to find the class/module current_func is located on
    klass = Opal.find_owning_class(klass, current_func);

    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    return Opal.find_super_func(klass, '$' + mid, current_func);
  };

  Opal.find_owning_class = function(klass, current_func) {
    var owner = current_func.$$owner;

    while (klass) {
      // repeating for readability

      if (klass.$$iclass && klass.$$module === current_func.$$donated) {
        // this klass was the last one the module donated to
        // case is also hit with multiple module includes
        break;
      }
      else if (klass.$$iclass && klass.$$module === owner) {
        // module has donated to other classes but klass isn't one of those
        break;
      }
      else if (owner.$$is_singleton && klass === owner.$$singleton_of.$$class) {
        // cases like stdlib `Singleton::included` that use a singleton of a singleton
        break;
      }
      else if (klass === owner) {
        // no modules, pure class inheritance
        break;
      }

      klass = klass.$$parent;
    }

    return klass;
  };

  Opal.find_super_func = function(owning_klass, jsid, current_func) {
    var klass = owning_klass.$$parent;

    // now we can find the super
    while (klass) {
      var working = klass.$$proto[jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    return klass.$$proto;
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // Used to break out of a block.
  Opal.brk = function(val, breaker) {
    breaker.$v = val;
    throw breaker;
  };

  // Builds a new unique breaker, this is to avoid multiple nested breaks to get
  // in the way of each other.
  Opal.new_brk = function() {
    return new Error('unexpected break');
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate === Opal.JS.Error) {
        return candidate;
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.$$meta === klass || object.$$class === klass) {
      return true;
    }

    if (object.$$is_number && klass.$$is_number_class) {
      return true;
    }

    var i, length, ancestors = Opal.ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    return false;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {
      Array.prototype.splice.call(parameters, parameters.length - 1, 1);
      return kwargs.$to_hash();
    }
    else {
      return Opal.hash2([], {});
    }
  }

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key       = null,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Calls passed method on a ruby object with arguments and block:
  //
  // Can take a method or a method name.
  //
  // 1. When method name gets passed it invokes it by its name
  //    and calls 'method_missing' when object doesn't have this method.
  //    Used internally by Opal to invoke method that takes a block or a splat.
  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'
  //    because it doesn't know the name of the actual method.
  //    Used internally by Opal to invoke 'super'.
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')                    # => 4
  //   Opal.send(my_array, my_array.$length)            # => 4
  //
  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]
  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]
  //
  // @param recv [Object] ruby object
  // @param method [Function, String] method body or name of the method
  // @param args [Array] arguments that will be passed to the method call
  // @param block [Function] ruby block
  // @return [Object] returning value of the method call
  Opal.send = function(recv, method, args, block) {
    var body = (typeof(method) === 'string') ? recv['$'+method] : method;

    if (body != null) {
      body.$$p = block;
      return body.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [method].concat(args));
  }

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @return [null]
  //
  Opal.def = function(obj, jsid, body) {
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    if (!obj.$$eval && (obj.$$is_class || obj.$$is_module)) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Define method on a module or class (see Opal.def).
  Opal.defn = function(obj, jsid, body) {
    obj.$$proto[jsid] = body;
    // for super dispatcher, etc.
    body.$$owner = obj;
    if (body.displayName == null) body.displayName = jsid.substr(1);

    // is it a module?
    if (obj.$$is_module) {
      Opal.update_includers(obj, jsid);

      if (obj.$$module_function) {
        Opal.defs(obj, jsid, body);
      }
    }

    // is it a bridged class?
    var bridged = obj.$__id__ && !obj.$__id__.$$stub && BridgedClasses[obj.$__id__()];
    if (bridged) {
      for (var i = bridged.length - 1; i >= 0; i--) {
        Opal.bridge_method(bridged[i], obj, jsid, body);
      }
    }

    // method_added/singleton_method_added hooks
    var singleton_of = obj.$$singleton_of;
    if (obj.$method_added && !obj.$method_added.$$stub && !singleton_of) {
      obj.$method_added(jsid.substr(1));
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }

    return nil;
  };

  // Define a singleton method on the given object (see Opal.def).
  Opal.defs = function(obj, jsid, body) {
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    // TODO: remove from BridgedClasses as well

    if (!$hasOwn.call(obj.$$proto, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$proto[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_removed && !obj.$$proto.$singleton_method_removed.$$stub) {
        obj.$$proto.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$proto[jsid] || obj.$$proto[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$proto, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_undefined && !obj.$$proto.$singleton_method_undefined.$$stub) {
        obj.$$proto.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.$$proto['$' + old],
        alias;

    // When running inside #instance_eval the alias refers to class methods.
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (typeof(body) !== "function" || body.$$stub) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (typeof(body) !== "function" || body.$$stub) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    // If the body is itself an alias use the original body
    // to keep the max depth at 1.
    if (body.$$alias_of) body = body.$$alias_of;

    // We need a wrapper because otherwise method $$owner and other properties
    // would be ovrewritten on the original body.
    alias = function() {
      var block = alias.$$p, args, i, ii;

      args = new Array(arguments.length);
      for(i = 0, ii = arguments.length; i < ii; i++) {
        args[i] = arguments[i];
      }

      if (block != null) { alias.$$p = null }

      return Opal.send(this, body, args, block);
    };

    // Try to make the browser pick the right name
    alias.displayName       = name;
    alias.length            = body.length;
    alias.$$arity           = body.$$arity;
    alias.$$parameters      = body.$$parameters;
    alias.$$source_location = body.$$source_location;
    alias.$$alias_of        = body;
    alias.$$alias_name      = name;

    Opal.defn(obj, id, alias);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$proto[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = Object.create(null);
    hash.$$map  = Object.create(null);
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {
      key = keys[i];

      if (key.$$is_string) {
        value = smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!$hasOwn.call(hash.$$smap, key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash, bucket, last_bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if (!$hasOwn.call(hash.$$map, key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if ($hasOwn.call(hash.$$smap, key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash, bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if ($hasOwn.call(hash.$$map, key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (!$hasOwn.call(hash.$$smap, key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!$hasOwn.call(hash.$$map, key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!$hasOwn.call(hash.$$map, key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash.$$alloc();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if ($hasOwn.call(args, key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // A faster Hash creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function.
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash.$$alloc();

    hash.$$smap = smap;
    hash.$$map  = Object.create(null);
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range.$$alloc();
        range.begin   = first;
        range.end     = last;
        range.excl    = exc;

    return range;
  };

  // Get the ivar name for a given name.
  // Mostly adds a trailing $ to reserved names.
  //
  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };


  // Regexps
  // -------

  // Escape Regexp special chars letting the resulting string be used to build
  // a new Regexp.
  //
  Opal.escape_regexp = function(str) {
    return str.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
              .replace(/[\n]/g, '\\n')
              .replace(/[\r]/g, '\\r')
              .replace(/[\f]/g, '\\f')
              .replace(/[\t]/g, '\\t');
  }


  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.'
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/^\.\//, '');
    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        return;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        Opal.LoadError ? Opal.LoadError.$new(message) : function(){throw message}();
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  };


  // Initialization
  // --------------

  // Constructors for *instances* of core objects
  Opal.boot_class_alloc('BasicObject', BasicObject_alloc);
  Opal.boot_class_alloc('Object',      Object_alloc,       BasicObject_alloc);
  Opal.boot_class_alloc('Module',      Module_alloc,       Object_alloc);
  Opal.boot_class_alloc('Class',       Class_alloc,        Module_alloc);

  // Constructors for *classes* of core objects
  Opal.BasicObject = BasicObject = Opal.setup_class_object('BasicObject', BasicObject_alloc, 'Class',       Class_alloc);
  Opal.Object      = _Object     = Opal.setup_class_object('Object',      Object_alloc,      'BasicObject', BasicObject.constructor);
  Opal.Module      = Module      = Opal.setup_class_object('Module',      Module_alloc,      'Object',      _Object.constructor);
  Opal.Class       = Class       = Opal.setup_class_object('Class',       Class_alloc,       'Module',      Module.constructor);

  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic
  BasicObject.$$const["BasicObject"] = BasicObject;

  // Assign basic constants
  Opal.const_set(_Object, "BasicObject",  BasicObject);
  Opal.const_set(_Object, "Object",       _Object);
  Opal.const_set(_Object, "Module",       Module);
  Opal.const_set(_Object, "Class",        Class);


  // Fix booted classes to use their metaclass
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Fix superclasses of booted classes
  BasicObject.$$super = null;
  _Object.$$super     = BasicObject;
  Module.$$super      = _Object;
  Class.$$super       = Module;

  BasicObject.$$parent = null;
  _Object.$$parent     = BasicObject;
  Module.$$parent      = _Object;
  Class.$$parent       = Module;

  // Forward .toString() to #to_s
  _Object.$$proto.toString = function() {
    var to_s = this.$to_s();
    if (to_s.$$is_string && typeof(to_s) === 'object') {
      // a string created using new String('string')
      return to_s.valueOf();
    } else {
      return to_s;
    }
  };

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  _Object.$$proto.$require = Opal.require;

  // Instantiate the top object
  Opal.top = new _Object.$$alloc();

  // Nil
  Opal.klass(_Object, _Object, 'NilClass', NilClass_alloc);
  nil = Opal.nil = new NilClass_alloc();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };
  Opal.breaker  = new Error('unexpected break (old)');
  Opal.returner = new Error('unexpected return');

  TypeError.$$super = Error;
}).call(this);
Opal.loaded(["corelib/runtime"]);
/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/helpers"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$coerce_to!', '$!=', '$[]', '$upcase']);
  return (function($base, $parent_nesting) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Opal_bridge_1, TMP_Opal_type_error_2, TMP_Opal_coerce_to_3, TMP_Opal_coerce_to$B_4, TMP_Opal_coerce_to$q_5, TMP_Opal_try_convert_6, TMP_Opal_compare_7, TMP_Opal_destructure_8, TMP_Opal_respond_to$q_9, TMP_Opal_inspect_obj_10, TMP_Opal_instance_variable_name$B_11, TMP_Opal_class_variable_name$B_12, TMP_Opal_const_name$B_13, TMP_Opal_pristine_14;

    
    Opal.defs(self, '$bridge', TMP_Opal_bridge_1 = function $$bridge(klass, constructor) {
      var self = this;

      return Opal.bridge(klass, constructor)
    }, TMP_Opal_bridge_1.$$arity = 2);
    Opal.defs(self, '$type_error', TMP_Opal_type_error_2 = function $$type_error(object, type, method, coerced) {
      var $a, self = this;

      if (method == null) {
        method = nil;
      }
      if (coerced == null) {
        coerced = nil;
      }
      if ($truthy(($truthy($a = method) ? coerced : $a))) {
        return Opal.const_get_relative($nesting, 'TypeError').$new("" + "can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return Opal.const_get_relative($nesting, 'TypeError').$new("" + "no implicit conversion of " + (object.$class()) + " into " + (type))
      }
    }, TMP_Opal_type_error_2.$$arity = -3);
    Opal.defs(self, '$coerce_to', TMP_Opal_coerce_to_3 = function $$coerce_to(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    }, TMP_Opal_coerce_to_3.$$arity = 3);
    Opal.defs(self, '$coerce_to!', TMP_Opal_coerce_to$B_4 = function(object, type, method) {
      var self = this, coerced = nil;

      
      coerced = self.$coerce_to(object, type, method);
      if ($truthy(type['$==='](coerced))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_Opal_coerce_to$B_4.$$arity = 3);
    Opal.defs(self, '$coerce_to?', TMP_Opal_coerce_to$q_5 = function(object, type, method) {
      var self = this, coerced = nil;

      
      if ($truthy(object['$respond_to?'](method))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ($truthy(coerced['$nil?']())) {
        return nil};
      if ($truthy(type['$==='](coerced))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_Opal_coerce_to$q_5.$$arity = 3);
    Opal.defs(self, '$try_convert', TMP_Opal_try_convert_6 = function $$try_convert(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    }, TMP_Opal_try_convert_6.$$arity = 3);
    Opal.defs(self, '$compare', TMP_Opal_compare_7 = function $$compare(a, b) {
      var self = this, compare = nil;

      
      compare = a['$<=>'](b);
      if ($truthy(compare === nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    }, TMP_Opal_compare_7.$$arity = 2);
    Opal.defs(self, '$destructure', TMP_Opal_destructure_8 = function $$destructure(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, TMP_Opal_destructure_8.$$arity = 1);
    Opal.defs(self, '$respond_to?', TMP_Opal_respond_to$q_9 = function(obj, method) {
      var self = this;

      
      
      if (obj == null || !obj.$$class) {
        return false;
      }
    ;
      return obj['$respond_to?'](method);
    }, TMP_Opal_respond_to$q_9.$$arity = 2);
    Opal.defs(self, '$inspect_obj', TMP_Opal_inspect_obj_10 = function $$inspect_obj(obj) {
      var self = this;

      return Opal.inspect(obj)
    }, TMP_Opal_inspect_obj_10.$$arity = 1);
    Opal.defs(self, '$instance_variable_name!', TMP_Opal_instance_variable_name$B_11 = function(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](name, Opal.const_get_relative($nesting, 'String'), "to_str");
      if ($truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, TMP_Opal_instance_variable_name$B_11.$$arity = 1);
    Opal.defs(self, '$class_variable_name!', TMP_Opal_class_variable_name$B_12 = function(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](name, Opal.const_get_relative($nesting, 'String'), "to_str");
      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "`" + (name) + "' is not allowed as a class variable name", name))};
      return name;
    }, TMP_Opal_class_variable_name$B_12.$$arity = 1);
    Opal.defs(self, '$const_name!', TMP_Opal_const_name$B_13 = function(const_name) {
      var self = this;

      
      const_name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](const_name, Opal.const_get_relative($nesting, 'String'), "to_str");
      if ($truthy(const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase()))) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError'), "" + "wrong constant name " + (const_name))};
      return const_name;
    }, TMP_Opal_const_name$B_13.$$arity = 1);
    Opal.defs(self, '$pristine', TMP_Opal_pristine_14 = function $$pristine(owner_class, $a_rest) {
      var self = this, method_names;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      method_names = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        method_names[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      
      var method_name;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        owner_class.$$proto['$'+method_name].$$pristine = true
      }
    ;
      return nil;
    }, TMP_Opal_pristine_14.$$arity = -2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/module"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$class_variable_name!', '$new', '$const_name!', '$=~', '$inject', '$split', '$const_get', '$==', '$!', '$start_with?', '$to_proc', '$lambda', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$+', '$to_s', '$__id__', '$constants', '$include?', '$copy_class_variables', '$copy_constants']);
  return (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_allocate_1, TMP_Module_initialize_2, TMP_Module_$eq$eq$eq_3, TMP_Module_$lt_4, TMP_Module_$lt$eq_5, TMP_Module_$gt_6, TMP_Module_$gt$eq_7, TMP_Module_$lt$eq$gt_8, TMP_Module_alias_method_9, TMP_Module_alias_native_10, TMP_Module_ancestors_11, TMP_Module_append_features_12, TMP_Module_attr_accessor_13, TMP_Module_attr_reader_14, TMP_Module_attr_writer_15, TMP_Module_autoload_16, TMP_Module_class_variables_17, TMP_Module_class_variable_get_18, TMP_Module_class_variable_set_19, TMP_Module_class_variable_defined$q_20, TMP_Module_remove_class_variable_21, TMP_Module_constants_22, TMP_Module_constants_23, TMP_Module_nesting_24, TMP_Module_const_defined$q_25, TMP_Module_const_get_27, TMP_Module_const_missing_28, TMP_Module_const_set_29, TMP_Module_public_constant_30, TMP_Module_define_method_31, TMP_Module_remove_method_33, TMP_Module_singleton_class$q_34, TMP_Module_include_35, TMP_Module_included_modules_36, TMP_Module_include$q_37, TMP_Module_instance_method_38, TMP_Module_instance_methods_39, TMP_Module_included_40, TMP_Module_extended_41, TMP_Module_method_added_42, TMP_Module_method_removed_43, TMP_Module_method_undefined_44, TMP_Module_module_eval_45, TMP_Module_module_exec_47, TMP_Module_method_defined$q_48, TMP_Module_module_function_49, TMP_Module_name_50, TMP_Module_remove_const_51, TMP_Module_to_s_52, TMP_Module_undef_method_53, TMP_Module_instance_variables_54, TMP_Module_dup_55, TMP_Module_copy_class_variables_56, TMP_Module_copy_constants_57;

    
    Opal.defs(self, '$allocate', TMP_Module_allocate_1 = function $$allocate() {
      var self = this;

      
      var module;

      module = Opal.module_allocate(self);
      return module;
    
    }, TMP_Module_allocate_1.$$arity = 0);
    
    Opal.defn(self, '$initialize', TMP_Module_initialize_2 = function $$initialize() {
      var self = this, $iter = TMP_Module_initialize_2.$$p, block = $iter || nil;

      if ($iter) TMP_Module_initialize_2.$$p = null;
      return Opal.module_initialize(self, block)
    }, TMP_Module_initialize_2.$$arity = 0);
    
    Opal.defn(self, '$===', TMP_Module_$eq$eq$eq_3 = function(object) {
      var self = this;

      
      if ($truthy(object == null)) {
        return false};
      return Opal.is_a(object, self);
    }, TMP_Module_$eq$eq$eq_3.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Module_$lt_4 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Module')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    ;
    }, TMP_Module_$lt_4.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Module_$lt$eq_5 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_lt(self, other))
    }, TMP_Module_$lt$eq_5.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Module_$gt_6 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Module')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, TMP_Module_$gt_6.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Module_$gt$eq_7 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_gt(self, other))
    }, TMP_Module_$gt$eq_7.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Module_$lt$eq$gt_8 = function(other) {
      var self = this, lt = nil;

      
      
      if (self === other) {
        return 0;
      }
    ;
      if ($truthy(Opal.const_get_relative($nesting, 'Module')['$==='](other))) {
        } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ($truthy(lt['$nil?']())) {
        return nil};
      if ($truthy(lt)) {
        return -1
        } else {
        return 1
      };
    }, TMP_Module_$lt$eq$gt_8.$$arity = 1);
    
    Opal.defn(self, '$alias_method', TMP_Module_alias_method_9 = function $$alias_method(newname, oldname) {
      var self = this;

      
      Opal.alias(self, newname, oldname);
      return self;
    }, TMP_Module_alias_method_9.$$arity = 2);
    
    Opal.defn(self, '$alias_native', TMP_Module_alias_native_10 = function $$alias_native(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid;
      }
      
      Opal.alias_native(self, mid, jsid);
      return self;
    }, TMP_Module_alias_native_10.$$arity = -2);
    
    Opal.defn(self, '$ancestors', TMP_Module_ancestors_11 = function $$ancestors() {
      var self = this;

      return Opal.ancestors(self)
    }, TMP_Module_ancestors_11.$$arity = 0);
    
    Opal.defn(self, '$append_features', TMP_Module_append_features_12 = function $$append_features(includer) {
      var self = this;

      
      Opal.append_features(self, includer);
      return self;
    }, TMP_Module_append_features_12.$$arity = 1);
    
    Opal.defn(self, '$attr_accessor', TMP_Module_attr_accessor_13 = function $$attr_accessor($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      $send(self, 'attr_reader', Opal.to_a(names));
      return $send(self, 'attr_writer', Opal.to_a(names));
    }, TMP_Module_attr_accessor_13.$$arity = -1);
    Opal.alias(self, "attr", "attr_accessor");
    
    Opal.defn(self, '$attr_reader', TMP_Module_attr_reader_14 = function $$attr_reader($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        proto[ivar] = nil;

        body.$$parameters = [];
        body.$$arity = 0;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    ;
      return nil;
    }, TMP_Module_attr_reader_14.$$arity = -1);
    
    Opal.defn(self, '$attr_writer', TMP_Module_attr_writer_15 = function $$attr_writer($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        proto[ivar] = nil;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    ;
      return nil;
    }, TMP_Module_attr_writer_15.$$arity = -1);
    
    Opal.defn(self, '$autoload', TMP_Module_autoload_16 = function $$autoload(const$, path) {
      var self = this;

      
      if (self.$$autoload == null) self.$$autoload = {};
      Opal.const_cache_version++;
      self.$$autoload[const$] = path;
      return nil;
    
    }, TMP_Module_autoload_16.$$arity = 2);
    
    Opal.defn(self, '$class_variables', TMP_Module_class_variables_17 = function $$class_variables() {
      var self = this;

      return Object.keys(Opal.class_variables(self))
    }, TMP_Module_class_variables_17.$$arity = 0);
    
    Opal.defn(self, '$class_variable_get', TMP_Module_class_variable_get_18 = function $$class_variable_get(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$class_variable_name!'](name);
      
      var value = Opal.class_variables(self)[name];
      if (value == null) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "uninitialized class variable " + (name) + " in " + (self), name))
      }
      return value;
    ;
    }, TMP_Module_class_variable_get_18.$$arity = 1);
    
    Opal.defn(self, '$class_variable_set', TMP_Module_class_variable_set_19 = function $$class_variable_set(name, value) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variable_set(self, name, value);
    }, TMP_Module_class_variable_set_19.$$arity = 2);
    
    Opal.defn(self, '$class_variable_defined?', TMP_Module_class_variable_defined$q_20 = function(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variables(self).hasOwnProperty(name);
    }, TMP_Module_class_variable_defined$q_20.$$arity = 1);
    
    Opal.defn(self, '$remove_class_variable', TMP_Module_remove_class_variable_21 = function $$remove_class_variable(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$class_variable_name!'](name);
      
      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {
        var value = self.$$cvars[name];
        delete self.$$cvars[name];
        return value;
      } else {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "cannot remove " + (name) + " for " + (self)))
      }
    ;
    }, TMP_Module_remove_class_variable_21.$$arity = 1);
    
    Opal.defn(self, '$constants', TMP_Module_constants_22 = function $$constants(inherit) {
      var self = this;

      if (inherit == null) {
        inherit = true;
      }
      return Opal.constants(self, inherit)
    }, TMP_Module_constants_22.$$arity = -1);
    Opal.defs(self, '$constants', TMP_Module_constants_23 = function $$constants(inherit) {
      var self = this;

      
      if (inherit == null) {
        var nesting = (self.$$nesting || []).concat(Opal.Object),
            constant, constants = {},
            i, ii;

        for(i = 0, ii = nesting.length; i < ii; i++) {
          for (constant in nesting[i].$$const) {
            constants[constant] = true;
          }
        }
        return Object.keys(constants);
      } else {
        return Opal.constants(self, inherit)
      }
    
    }, TMP_Module_constants_23.$$arity = -1);
    Opal.defs(self, '$nesting', TMP_Module_nesting_24 = function $$nesting() {
      var self = this;

      return self.$$nesting || []
    }, TMP_Module_nesting_24.$$arity = 0);
    
    Opal.defn(self, '$const_defined?', TMP_Module_const_defined$q_25 = function(name, inherit) {
      var self = this;

      if (inherit == null) {
        inherit = true;
      }
      
      name = Opal.const_get_relative($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(name['$=~'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      var module, modules = [self], module_constants, i, ii;

      // Add up ancestors if inherit is true
      if (inherit) {
        modules = modules.concat(Opal.ancestors(self));

        // Add Object's ancestors if it's a module – modules have no ancestors otherwise
        if (self.$$is_module) {
          modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));
        }
      }

      for (i = 0, ii = modules.length; i < ii; i++) {
        module = modules[i];
        if (module.$$const[name] != null) {
          return true;
        }
      }

      return false;
    ;
    }, TMP_Module_const_defined$q_25.$$arity = -2);
    
    Opal.defn(self, '$const_get', TMP_Module_const_get_27 = function $$const_get(name, inherit) {
      var TMP_26, self = this;

      if (inherit == null) {
        inherit = true;
      }
      
      name = Opal.const_get_relative($nesting, 'Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    ;
      if ($truthy(name.indexOf('::') != -1 && name != '::')) {
        return $send(name.$split("::"), 'inject', [self], (TMP_26 = function(o, c){var self = TMP_26.$$s || this;
if (o == null) o = nil;if (c == null) c = nil;
        return o.$const_get(c)}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26))};
      if ($truthy(name['$=~'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      if (inherit) {
        return Opal.const_get_relative([self], name);
      } else {
        return Opal.const_get_local(self, name);
      }
    ;
    }, TMP_Module_const_get_27.$$arity = -2);
    
    Opal.defn(self, '$const_missing', TMP_Module_const_missing_28 = function $$const_missing(name) {
      var self = this, full_const_name = nil;

      
      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    ;
      full_const_name = (function() {if (self['$=='](Opal.const_get_relative($nesting, 'Object'))) {
        return name
        } else {
        return "" + (self) + "::" + (name)
      }; return nil; })();
      return self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "uninitialized constant " + (full_const_name), name));
    }, TMP_Module_const_missing_28.$$arity = 1);
    
    Opal.defn(self, '$const_set', TMP_Module_const_set_29 = function $$const_set(name, value) {
      var $a, self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(($truthy($a = name['$=~'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Opal'), 'CONST_NAME_REGEXP'))['$!']()) ? $a : name['$start_with?']("::")))) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))};
      Opal.const_set(self, name, value);
      return value;
    }, TMP_Module_const_set_29.$$arity = 2);
    
    Opal.defn(self, '$public_constant', TMP_Module_public_constant_30 = function $$public_constant(const_name) {
      var self = this;

      return nil
    }, TMP_Module_public_constant_30.$$arity = 1);
    
    Opal.defn(self, '$define_method', TMP_Module_define_method_31 = function $$define_method(name, method) {
      var $a, TMP_32, self = this, $iter = TMP_Module_define_method_31.$$p, block = $iter || nil, $case = nil;

      if ($iter) TMP_Module_define_method_31.$$p = null;
      
      if ($truthy(method === undefined && block === nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to create a Proc object without a block")};
      block = ($truthy($a = block) ? $a : (function() {$case = method;
      if (Opal.const_get_relative($nesting, 'Proc')['$===']($case)) {return method}
      else if (Opal.const_get_relative($nesting, 'Method')['$===']($case)) {return method.$to_proc().$$unbound}
      else if (Opal.const_get_relative($nesting, 'UnboundMethod')['$===']($case)) {return $send(self, 'lambda', [], (TMP_32 = function($b_rest){var self = TMP_32.$$s || this, args, bound = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        bound = method.$bind(self);
        return $send(bound, 'call', Opal.to_a(args));}, TMP_32.$$s = self, TMP_32.$$arity = -1, TMP_32))}
      else {return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      Opal.defn(self, id, block);

      return name;
    ;
    }, TMP_Module_define_method_31.$$arity = -2);
    
    Opal.defn(self, '$remove_method', TMP_Module_remove_method_33 = function $$remove_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    ;
      return self;
    }, TMP_Module_remove_method_33.$$arity = -1);
    
    Opal.defn(self, '$singleton_class?', TMP_Module_singleton_class$q_34 = function() {
      var self = this;

      return !!self.$$is_singleton
    }, TMP_Module_singleton_class$q_34.$$arity = 0);
    
    Opal.defn(self, '$include', TMP_Module_include_35 = function $$include($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    ;
      return self;
    }, TMP_Module_include_35.$$arity = -1);
    
    Opal.defn(self, '$included_modules', TMP_Module_included_modules_36 = function $$included_modules() {
      var self = this;

      
      var results;

      var module_chain = function(klass) {
        var included = [];

        for (var i = 0, ii = klass.$$inc.length; i < ii; i++) {
          var mod_or_class = klass.$$inc[i];
          included.push(mod_or_class);
          included = included.concat(module_chain(mod_or_class));
        }

        return included;
      };

      results = module_chain(self);

      // need superclass's modules
      if (self.$$is_class) {
        for (var cls = self; cls; cls = cls.$$super) {
          results = results.concat(module_chain(cls));
        }
      }

      return results;
    
    }, TMP_Module_included_modules_36.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Module_include$q_37 = function(mod) {
      var self = this;

      
      if (!mod.$$is_module) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
      }

      var i, ii, mod2, ancestors = Opal.ancestors(self);

      for (i = 0, ii = ancestors.length; i < ii; i++) {
        mod2 = ancestors[i];
        if (mod2 === mod && mod2 !== self) {
          return true;
        }
      }

      return false;
    
    }, TMP_Module_include$q_37.$$arity = 1);
    
    Opal.defn(self, '$instance_method', TMP_Module_instance_method_38 = function $$instance_method(name) {
      var self = this;

      
      var meth = self.$$proto['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return Opal.const_get_relative($nesting, 'UnboundMethod').$new(self, meth.$$owner || self, meth, name);
    
    }, TMP_Module_instance_method_38.$$arity = 1);
    
    Opal.defn(self, '$instance_methods', TMP_Module_instance_methods_39 = function $$instance_methods(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = true;
      }
      
      var value,
          methods = [],
          proto   = self.$$proto;

      for (var prop in proto) {
        if (prop.charAt(0) !== '$' || prop.charAt(1) === '$') {
          continue;
        }

        value = proto[prop];

        if (typeof(value) !== "function") {
          continue;
        }

        if (value.$$stub) {
          continue;
        }

        if (!self.$$is_module) {
          if (self !== Opal.BasicObject && value === Opal.BasicObject.$$proto[prop]) {
            continue;
          }

          if (!include_super && !proto.hasOwnProperty(prop)) {
            continue;
          }

          if (!include_super && value.$$donated) {
            continue;
          }
        }

        methods.push(prop.substr(1));
      }

      return methods;
    
    }, TMP_Module_instance_methods_39.$$arity = -1);
    
    Opal.defn(self, '$included', TMP_Module_included_40 = function $$included(mod) {
      var self = this;

      return nil
    }, TMP_Module_included_40.$$arity = 1);
    
    Opal.defn(self, '$extended', TMP_Module_extended_41 = function $$extended(mod) {
      var self = this;

      return nil
    }, TMP_Module_extended_41.$$arity = 1);
    
    Opal.defn(self, '$method_added', TMP_Module_method_added_42 = function $$method_added($a_rest) {
      var self = this;

      return nil
    }, TMP_Module_method_added_42.$$arity = -1);
    
    Opal.defn(self, '$method_removed', TMP_Module_method_removed_43 = function $$method_removed($a_rest) {
      var self = this;

      return nil
    }, TMP_Module_method_removed_43.$$arity = -1);
    
    Opal.defn(self, '$method_undefined', TMP_Module_method_undefined_44 = function $$method_undefined($a_rest) {
      var self = this;

      return nil
    }, TMP_Module_method_undefined_44.$$arity = -1);
    
    Opal.defn(self, '$module_eval', TMP_Module_module_eval_45 = function $$module_eval($a_rest) {
      var $b, TMP_46, self = this, args, $iter = TMP_Module_module_eval_45.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Module_module_eval_45.$$p = null;
      
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
          } else {
          Opal.const_get_relative($nesting, 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = Opal.const_get_relative($nesting, 'Opal').$compile(string, compiling_options);
        block = $send(Opal.const_get_relative($nesting, 'Kernel'), 'proc', [], (TMP_46 = function(){var self = TMP_46.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46));
      } else if ($truthy($rb_gt(args.$size(), 0))) {
        Opal.const_get_relative($nesting, 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), $rb_plus("" + "wrong number of arguments (" + (args.$size()) + " for 0)", "\n\n  NOTE:If you want to enable passing a String argument please add \"require 'opal-parser'\" to your script\n"))};
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    ;
    }, TMP_Module_module_eval_45.$$arity = -1);
    Opal.alias(self, "class_eval", "module_eval");
    
    Opal.defn(self, '$module_exec', TMP_Module_module_exec_47 = function $$module_exec($a_rest) {
      var self = this, args, $iter = TMP_Module_module_exec_47.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Module_module_exec_47.$$p = null;
      
      if (block === nil) {
        self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    
    }, TMP_Module_module_exec_47.$$arity = -1);
    Opal.alias(self, "class_exec", "module_exec");
    
    Opal.defn(self, '$method_defined?', TMP_Module_method_defined$q_48 = function(method) {
      var self = this;

      
      var body = self.$$proto['$' + method];
      return (!!body) && !body.$$stub;
    
    }, TMP_Module_method_defined$q_48.$$arity = 1);
    
    Opal.defn(self, '$module_function', TMP_Module_module_function_49 = function $$module_function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$proto[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    
    }, TMP_Module_module_function_49.$$arity = -1);
    
    Opal.defn(self, '$name', TMP_Module_name_50 = function $$name() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        // Give up if any of the ancestors is unnamed
        if (base.$$name === nil || base.$$name == null) return nil;

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, TMP_Module_name_50.$$arity = 0);
    
    Opal.defn(self, '$remove_const', TMP_Module_remove_const_51 = function $$remove_const(name) {
      var self = this;

      return Opal.const_remove(self, name)
    }, TMP_Module_remove_const_51.$$arity = 1);
    
    Opal.defn(self, '$to_s', TMP_Module_to_s_52 = function $$to_s() {
      var $a, self = this;

      return ($truthy($a = Opal.Module.$name.call(self)) ? $a : "" + "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">")
    }, TMP_Module_to_s_52.$$arity = 0);
    
    Opal.defn(self, '$undef_method', TMP_Module_undef_method_53 = function $$undef_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    ;
      return self;
    }, TMP_Module_undef_method_53.$$arity = -1);
    
    Opal.defn(self, '$instance_variables', TMP_Module_instance_variables_54 = function $$instance_variables() {
      var self = this, consts = nil;

      
      consts = (Opal.Module.$$nesting = $nesting, self.$constants());
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    ;
    }, TMP_Module_instance_variables_54.$$arity = 0);
    
    Opal.defn(self, '$dup', TMP_Module_dup_55 = function $$dup() {
      var self = this, $iter = TMP_Module_dup_55.$$p, $yield = $iter || nil, copy = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Module_dup_55.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      copy = $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_Module_dup_55, false), $zuper, $iter);
      copy.$copy_class_variables(self);
      copy.$copy_constants(self);
      return copy;
    }, TMP_Module_dup_55.$$arity = 0);
    
    Opal.defn(self, '$copy_class_variables', TMP_Module_copy_class_variables_56 = function $$copy_class_variables(other) {
      var self = this;

      
      for (var name in other.$$cvars) {
        self.$$cvars[name] = other.$$cvars[name];
      }
    
    }, TMP_Module_copy_class_variables_56.$$arity = 1);
    return (Opal.defn(self, '$copy_constants', TMP_Module_copy_constants_57 = function $$copy_constants(other) {
      var self = this;

      
      var name, other_constants = other.$$const;

      for (name in other_constants) {
        Opal.const_set(self, name, other_constants[name]);
      }
    
    }, TMP_Module_copy_constants_57.$$arity = 1), nil) && 'copy_constants';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$initialize_copy', '$allocate', '$name', '$to_s']);
  
  self.$require("corelib/module");
  return (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_new_1, TMP_Class_allocate_2, TMP_Class_inherited_3, TMP_Class_initialize_dup_4, TMP_Class_new_5, TMP_Class_superclass_6, TMP_Class_to_s_7;

    
    Opal.defs(self, '$new', TMP_Class_new_1 = function(superclass) {
      var self = this, $iter = TMP_Class_new_1.$$p, block = $iter || nil;

      if (superclass == null) {
        superclass = Opal.const_get_relative($nesting, 'Object');
      }
      if ($iter) TMP_Class_new_1.$$p = null;
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var alloc = Opal.boot_class_alloc(null, function(){}, superclass);
      var klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);

      klass.$$super  = superclass;
      klass.$$parent = superclass;

      superclass.$inherited(klass);
      Opal.module_initialize(klass, block);

      return klass;
    
    }, TMP_Class_new_1.$$arity = -1);
    
    Opal.defn(self, '$allocate', TMP_Class_allocate_2 = function $$allocate() {
      var self = this;

      
      var obj = new self.$$alloc();
      obj.$$id = Opal.uid();
      return obj;
    
    }, TMP_Class_allocate_2.$$arity = 0);
    
    Opal.defn(self, '$inherited', TMP_Class_inherited_3 = function $$inherited(cls) {
      var self = this;

      return nil
    }, TMP_Class_inherited_3.$$arity = 1);
    
    Opal.defn(self, '$initialize_dup', TMP_Class_initialize_dup_4 = function $$initialize_dup(original) {
      var self = this;

      
      self.$initialize_copy(original);
      
      self.$$name = null;
      self.$$full_name = null;
    ;
    }, TMP_Class_initialize_dup_4.$$arity = 1);
    
    Opal.defn(self, '$new', TMP_Class_new_5 = function($a_rest) {
      var self = this, args, $iter = TMP_Class_new_5.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Class_new_5.$$p = null;
      
      var object = self.$allocate();
      Opal.send(object, object.$initialize, args, block);
      return object;
    
    }, TMP_Class_new_5.$$arity = -1);
    
    Opal.defn(self, '$superclass', TMP_Class_superclass_6 = function $$superclass() {
      var self = this;

      return self.$$super || nil
    }, TMP_Class_superclass_6.$$arity = 0);
    return (Opal.defn(self, '$to_s', TMP_Class_to_s_7 = function $$to_s() {
      var self = this, $iter = TMP_Class_to_s_7.$$p, $yield = $iter || nil;

      if ($iter) TMP_Class_to_s_7.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && (singleton_of.$$is_class || singleton_of.$$is_module)) {
        return "" + "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "" + "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((Opal.id(singleton_of)).$to_s(16)) + ">>";
      }
      return $send(self, Opal.find_super_dispatcher(self, 'to_s', TMP_Class_to_s_7, false), [], null);
    
    }, TMP_Class_to_s_7.$$arity = 0), nil) && 'to_s';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$>', '$new', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BasicObject_initialize_1, TMP_BasicObject_$eq$eq_2, TMP_BasicObject_eql$q_3, TMP_BasicObject___id___4, TMP_BasicObject___send___5, TMP_BasicObject_$B_6, TMP_BasicObject_$B$eq_7, TMP_BasicObject_instance_eval_8, TMP_BasicObject_instance_exec_10, TMP_BasicObject_singleton_method_added_11, TMP_BasicObject_singleton_method_removed_12, TMP_BasicObject_singleton_method_undefined_13, TMP_BasicObject_method_missing_14;

    
    
    Opal.defn(self, '$initialize', TMP_BasicObject_initialize_1 = function $$initialize($a_rest) {
      var self = this;

      return nil
    }, TMP_BasicObject_initialize_1.$$arity = -1);
    
    Opal.defn(self, '$==', TMP_BasicObject_$eq$eq_2 = function(other) {
      var self = this;

      return self === other
    }, TMP_BasicObject_$eq$eq_2.$$arity = 1);
    
    Opal.defn(self, '$eql?', TMP_BasicObject_eql$q_3 = function(other) {
      var self = this;

      return self['$=='](other)
    }, TMP_BasicObject_eql$q_3.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    
    Opal.defn(self, '$__id__', TMP_BasicObject___id___4 = function $$__id__() {
      var self = this;

      return self.$$id || (self.$$id = Opal.uid())
    }, TMP_BasicObject___id___4.$$arity = 0);
    
    Opal.defn(self, '$__send__', TMP_BasicObject___send___5 = function $$__send__(symbol, $a_rest) {
      var self = this, args, $iter = TMP_BasicObject___send___5.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_BasicObject___send___5.$$p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    }, TMP_BasicObject___send___5.$$arity = -2);
    
    Opal.defn(self, '$!', TMP_BasicObject_$B_6 = function() {
      var self = this;

      return false
    }, TMP_BasicObject_$B_6.$$arity = 0);
    
    Opal.defn(self, '$!=', TMP_BasicObject_$B$eq_7 = function(other) {
      var self = this;

      return self['$=='](other)['$!']()
    }, TMP_BasicObject_$B$eq_7.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    
    Opal.defn(self, '$instance_eval', TMP_BasicObject_instance_eval_8 = function $$instance_eval($a_rest) {
      var $b, TMP_9, self = this, args, $iter = TMP_BasicObject_instance_eval_8.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_BasicObject_instance_eval_8.$$p = null;
      
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
          } else {
          Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = Opal.const_get_qualified('::', 'Opal').$compile(string, compiling_options);
        block = $send(Opal.const_get_qualified('::', 'Kernel'), 'proc', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
      } else if ($truthy($rb_gt(args.$size(), 0))) {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "" + "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    ;
    }, TMP_BasicObject_instance_eval_8.$$arity = -1);
    
    Opal.defn(self, '$instance_exec', TMP_BasicObject_instance_exec_10 = function $$instance_exec($a_rest) {
      var self = this, args, $iter = TMP_BasicObject_instance_exec_10.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_BasicObject_instance_exec_10.$$p = null;
      
      if ($truthy(block)) {
        } else {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    ;
    }, TMP_BasicObject_instance_exec_10.$$arity = -1);
    
    Opal.defn(self, '$singleton_method_added', TMP_BasicObject_singleton_method_added_11 = function $$singleton_method_added($a_rest) {
      var self = this;

      return nil
    }, TMP_BasicObject_singleton_method_added_11.$$arity = -1);
    
    Opal.defn(self, '$singleton_method_removed', TMP_BasicObject_singleton_method_removed_12 = function $$singleton_method_removed($a_rest) {
      var self = this;

      return nil
    }, TMP_BasicObject_singleton_method_removed_12.$$arity = -1);
    
    Opal.defn(self, '$singleton_method_undefined', TMP_BasicObject_singleton_method_undefined_13 = function $$singleton_method_undefined($a_rest) {
      var self = this;

      return nil
    }, TMP_BasicObject_singleton_method_undefined_13.$$arity = -1);
    return (Opal.defn(self, '$method_missing', TMP_BasicObject_method_missing_14 = function $$method_missing(symbol, $a_rest) {
      var self = this, args, $iter = TMP_BasicObject_method_missing_14.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_BasicObject_method_missing_14.$$p = null;
      return Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'NoMethodError').$new((function() {if ($truthy(self.$inspect && !self.$inspect.$$stub)) {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
        } else {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })(), symbol))
    }, TMP_BasicObject_method_missing_14.$$arity = -2), nil) && 'method_missing';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/kernel"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$singleton_class', '$to_proc', '$initialize_dup', '$for', '$>', '$size', '$pop', '$call', '$append_features', '$extended', '$length', '$respond_to?', '$[]', '$nil?', '$to_a', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$coerce_to', '$to_s', '$__id__', '$instance_variable_name!', '$coerce_to!', '$===', '$enum_for', '$result', '$print', '$format', '$puts', '$each', '$<=', '$empty?', '$exception', '$kind_of?', '$rand', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$srand', '$new_seed', '$sym', '$arg', '$open', '$include']);
  
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_method_missing_1, TMP_Kernel_$eq$_2, TMP_Kernel_$B$_3, TMP_Kernel_$eq$eq$eq_4, TMP_Kernel_$lt$eq$gt_5, TMP_Kernel_method_6, TMP_Kernel_methods_7, TMP_Kernel_Array_8, TMP_Kernel_at_exit_9, TMP_Kernel_caller_10, TMP_Kernel_class_11, TMP_Kernel_copy_instance_variables_12, TMP_Kernel_copy_singleton_methods_13, TMP_Kernel_clone_14, TMP_Kernel_initialize_clone_15, TMP_Kernel_define_singleton_method_16, TMP_Kernel_dup_17, TMP_Kernel_initialize_dup_18, TMP_Kernel_enum_for_19, TMP_Kernel_equal$q_20, TMP_Kernel_exit_21, TMP_Kernel_extend_22, TMP_Kernel_format_23, TMP_Kernel_hash_24, TMP_Kernel_initialize_copy_25, TMP_Kernel_inspect_26, TMP_Kernel_instance_of$q_27, TMP_Kernel_instance_variable_defined$q_28, TMP_Kernel_instance_variable_get_29, TMP_Kernel_instance_variable_set_30, TMP_Kernel_remove_instance_variable_31, TMP_Kernel_instance_variables_32, TMP_Kernel_Integer_33, TMP_Kernel_Float_34, TMP_Kernel_Hash_35, TMP_Kernel_is_a$q_36, TMP_Kernel_itself_37, TMP_Kernel_lambda_38, TMP_Kernel_load_39, TMP_Kernel_loop_40, TMP_Kernel_nil$q_42, TMP_Kernel_printf_43, TMP_Kernel_proc_44, TMP_Kernel_puts_45, TMP_Kernel_p_47, TMP_Kernel_print_48, TMP_Kernel_warn_49, TMP_Kernel_raise_50, TMP_Kernel_rand_51, TMP_Kernel_respond_to$q_52, TMP_Kernel_respond_to_missing$q_53, TMP_Kernel_require_54, TMP_Kernel_require_relative_55, TMP_Kernel_require_tree_56, TMP_Kernel_singleton_class_57, TMP_Kernel_sleep_58, TMP_Kernel_srand_59, TMP_Kernel_String_60, TMP_Kernel_tap_61, TMP_Kernel_to_proc_62, TMP_Kernel_to_s_63, TMP_Kernel_catch_64, TMP_Kernel_throw_65, TMP_Kernel_open_66;

    
    
    Opal.defn(self, '$method_missing', TMP_Kernel_method_missing_1 = function $$method_missing(symbol, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_method_missing_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_method_missing_1.$$p = null;
      return self.$raise(Opal.const_get_relative($nesting, 'NoMethodError').$new("" + "undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args))
    }, TMP_Kernel_method_missing_1.$$arity = -2);
    
    Opal.defn(self, '$=~', TMP_Kernel_$eq$_2 = function(obj) {
      var self = this;

      return false
    }, TMP_Kernel_$eq$_2.$$arity = 1);
    
    Opal.defn(self, '$!~', TMP_Kernel_$B$_3 = function(obj) {
      var self = this;

      return self['$=~'](obj)['$!']()
    }, TMP_Kernel_$B$_3.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_Kernel_$eq$eq$eq_4 = function(other) {
      var $a, self = this;

      return ($truthy($a = self.$object_id()['$=='](other.$object_id())) ? $a : self['$=='](other))
    }, TMP_Kernel_$eq$eq$eq_4.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Kernel_$lt$eq$gt_5 = function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, TMP_Kernel_$lt$eq$gt_5.$$arity = 1);
    
    Opal.defn(self, '$method', TMP_Kernel_method_6 = function $$method(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return Opal.const_get_relative($nesting, 'Method').$new(self, meth.$$owner || self.$class(), meth, name);
    
    }, TMP_Kernel_method_6.$$arity = 1);
    
    Opal.defn(self, '$methods', TMP_Kernel_methods_7 = function $$methods(all) {
      var self = this;

      if (all == null) {
        all = true;
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!Opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].$$stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    }, TMP_Kernel_methods_7.$$arity = -1);
    Opal.alias(self, "public_methods", "methods");
    
    Opal.defn(self, '$Array', TMP_Kernel_Array_8 = function $$Array(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](object, Opal.const_get_relative($nesting, 'Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](object, Opal.const_get_relative($nesting, 'Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, TMP_Kernel_Array_8.$$arity = 1);
    
    Opal.defn(self, '$at_exit', TMP_Kernel_at_exit_9 = function $$at_exit() {
      var $a, self = this, $iter = TMP_Kernel_at_exit_9.$$p, block = $iter || nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if ($iter) TMP_Kernel_at_exit_9.$$p = null;
      
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      return $gvars.__at_exit__['$<<'](block);
    }, TMP_Kernel_at_exit_9.$$arity = 0);
    
    Opal.defn(self, '$caller', TMP_Kernel_caller_10 = function $$caller($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return []
    }, TMP_Kernel_caller_10.$$arity = -1);
    
    Opal.defn(self, '$class', TMP_Kernel_class_11 = function() {
      var self = this;

      return self.$$class
    }, TMP_Kernel_class_11.$$arity = 0);
    
    Opal.defn(self, '$copy_instance_variables', TMP_Kernel_copy_instance_variables_12 = function $$copy_instance_variables(other) {
      var self = this;

      
      var keys = Object.keys(other), i, ii, name;
      for (i = 0, ii = keys.length; i < ii; i++) {
        name = keys[i];
        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_Kernel_copy_instance_variables_12.$$arity = 1);
    
    Opal.defn(self, '$copy_singleton_methods', TMP_Kernel_copy_singleton_methods_13 = function $$copy_singleton_methods(other) {
      var self = this;

      
      var name;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class_proto = Opal.get_singleton_class(other).$$proto;
        var self_singleton_class_proto = Opal.get_singleton_class(self).$$proto;

        for (name in other_singleton_class_proto) {
          if (name.charAt(0) === '$' && other_singleton_class_proto.hasOwnProperty(name)) {
            self_singleton_class_proto[name] = other_singleton_class_proto[name];
          }
        }
      }

      for (name in other) {
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_Kernel_copy_singleton_methods_13.$$arity = 1);
    
    Opal.defn(self, '$clone', TMP_Kernel_clone_14 = function $$clone($kwargs) {
      var self = this, freeze, copy = nil;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      }
      
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_Kernel_clone_14.$$arity = -1);
    
    Opal.defn(self, '$initialize_clone', TMP_Kernel_initialize_clone_15 = function $$initialize_clone(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, TMP_Kernel_initialize_clone_15.$$arity = 1);
    
    Opal.defn(self, '$define_singleton_method', TMP_Kernel_define_singleton_method_16 = function $$define_singleton_method(name, method) {
      var self = this, $iter = TMP_Kernel_define_singleton_method_16.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_define_singleton_method_16.$$p = null;
      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc())
    }, TMP_Kernel_define_singleton_method_16.$$arity = -2);
    
    Opal.defn(self, '$dup', TMP_Kernel_dup_17 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_Kernel_dup_17.$$arity = 0);
    
    Opal.defn(self, '$initialize_dup', TMP_Kernel_initialize_dup_18 = function $$initialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, TMP_Kernel_initialize_dup_18.$$arity = 1);
    
    Opal.defn(self, '$enum_for', TMP_Kernel_enum_for_19 = function $$enum_for(method, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_enum_for_19.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_enum_for_19.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'Enumerator'), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc())
    }, TMP_Kernel_enum_for_19.$$arity = -1);
    Opal.alias(self, "to_enum", "enum_for");
    
    Opal.defn(self, '$equal?', TMP_Kernel_equal$q_20 = function(other) {
      var self = this;

      return self === other
    }, TMP_Kernel_equal$q_20.$$arity = 1);
    
    Opal.defn(self, '$exit', TMP_Kernel_exit_21 = function $$exit(status) {
      var $a, self = this, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if (status == null) {
        status = true;
      }
      
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      while ($truthy($rb_gt($gvars.__at_exit__.$size(), 0))) {
        
        block = $gvars.__at_exit__.$pop();
        block.$call();
      };
      
      if (status == null) {
        status = 0
      } else if (status.$$is_boolean) {
        status = status ? 0 : 1;
      } else if (status.$$is_numeric) {
        status = status.$to_i();
      } else {
        status = 0
      }

      Opal.exit(status);
    ;
      return nil;
    }, TMP_Kernel_exit_21.$$arity = -1);
    
    Opal.defn(self, '$extend', TMP_Kernel_extend_22 = function $$extend($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    }, TMP_Kernel_extend_22.$$arity = -1);
    
    Opal.defn(self, '$format', TMP_Kernel_format_23 = function $$format(format_string, $a_rest) {
      var $b, self = this, args, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if ($truthy((($b = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1)))) {
        
        ary = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](args['$[]'](0), Opal.const_get_relative($nesting, 'Array'), "to_ary");
        if ($truthy(ary['$nil?']())) {
          } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode(Opal.const_get_relative($nesting, 'Opal').$coerce_to(arg, Opal.const_get_relative($nesting, 'Integer'), "to_int"));
            }
            if (str.length !== 1) {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, TMP_Kernel_format_23.$$arity = -2);
    
    Opal.defn(self, '$hash', TMP_Kernel_hash_24 = function $$hash() {
      var self = this;

      return self.$__id__()
    }, TMP_Kernel_hash_24.$$arity = 0);
    
    Opal.defn(self, '$initialize_copy', TMP_Kernel_initialize_copy_25 = function $$initialize_copy(other) {
      var self = this;

      return nil
    }, TMP_Kernel_initialize_copy_25.$$arity = 1);
    
    Opal.defn(self, '$inspect', TMP_Kernel_inspect_26 = function $$inspect() {
      var self = this;

      return self.$to_s()
    }, TMP_Kernel_inspect_26.$$arity = 0);
    
    Opal.defn(self, '$instance_of?', TMP_Kernel_instance_of$q_27 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "class or module required");
      }

      return self.$$class === klass;
    
    }, TMP_Kernel_instance_of$q_27.$$arity = 1);
    
    Opal.defn(self, '$instance_variable_defined?', TMP_Kernel_instance_variable_defined$q_28 = function(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));
    }, TMP_Kernel_instance_variable_defined$q_28.$$arity = 1);
    
    Opal.defn(self, '$instance_variable_get', TMP_Kernel_instance_variable_get_29 = function $$instance_variable_get(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    ;
    }, TMP_Kernel_instance_variable_get_29.$$arity = 1);
    
    Opal.defn(self, '$instance_variable_set', TMP_Kernel_instance_variable_set_30 = function $$instance_variable_set(name, value) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;
    }, TMP_Kernel_instance_variable_set_30.$$arity = 2);
    
    Opal.defn(self, '$remove_instance_variable', TMP_Kernel_remove_instance_variable_31 = function $$remove_instance_variable(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    ;
      return self.$raise(Opal.const_get_relative($nesting, 'NameError'), "" + "instance variable " + (name) + " not defined");
    }, TMP_Kernel_remove_instance_variable_31.$$arity = 1);
    
    Opal.defn(self, '$instance_variables', TMP_Kernel_instance_variables_32 = function $$instance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, TMP_Kernel_instance_variables_32.$$arity = 0);
    
    Opal.defn(self, '$Integer', TMP_Kernel_Integer_33 = function $$Integer(value, base) {
      var self = this;

      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](value, Opal.const_get_relative($nesting, 'Integer'), "to_i");
      }

      if (value === "0") {
        return 0;
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = Opal.const_get_relative($nesting, 'Opal').$coerce_to(base, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (base === 1 || base < 0 || base > 36) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    
    }, TMP_Kernel_Integer_33.$$arity = -2);
    
    Opal.defn(self, '$Float', TMP_Kernel_Float_34 = function $$Float(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](value, Opal.const_get_relative($nesting, 'Float'), "to_f");
    
    }, TMP_Kernel_Float_34.$$arity = 1);
    
    Opal.defn(self, '$Hash', TMP_Kernel_Hash_35 = function $$Hash(arg) {
      var $a, self = this;

      
      if ($truthy(($truthy($a = arg['$nil?']()) ? $a : arg['$==']([])))) {
        return $hash2([], {})};
      if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](arg))) {
        return arg};
      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](arg, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
    }, TMP_Kernel_Hash_35.$$arity = 1);
    
    Opal.defn(self, '$is_a?', TMP_Kernel_is_a$q_36 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    
    }, TMP_Kernel_is_a$q_36.$$arity = 1);
    
    Opal.defn(self, '$itself', TMP_Kernel_itself_37 = function $$itself() {
      var self = this;

      return self
    }, TMP_Kernel_itself_37.$$arity = 0);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$lambda', TMP_Kernel_lambda_38 = function $$lambda() {
      var self = this, $iter = TMP_Kernel_lambda_38.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_lambda_38.$$p = null;
      
      block.$$is_lambda = true;
      return block;
    }, TMP_Kernel_lambda_38.$$arity = 0);
    
    Opal.defn(self, '$load', TMP_Kernel_load_39 = function $$load(file) {
      var self = this;

      
      file = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](file, Opal.const_get_relative($nesting, 'String'), "to_str");
      return Opal.load(file);
    }, TMP_Kernel_load_39.$$arity = 1);
    
    Opal.defn(self, '$loop', TMP_Kernel_loop_40 = function $$loop() {
      var TMP_41, $a, self = this, $iter = TMP_Kernel_loop_40.$$p, $yield = $iter || nil, e = nil;

      if ($iter) TMP_Kernel_loop_40.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["loop"], (TMP_41 = function(){var self = TMP_41.$$s || this;

        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41))
      };
      while ($truthy(true)) {
        
        try {
          Opal.yieldX($yield, [])
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StopIteration')])) {e = $err;
            try {
              return e.$result()
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      };
      return self;
    }, TMP_Kernel_loop_40.$$arity = 0);
    
    Opal.defn(self, '$nil?', TMP_Kernel_nil$q_42 = function() {
      var self = this;

      return false
    }, TMP_Kernel_nil$q_42.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.defn(self, '$printf', TMP_Kernel_printf_43 = function $$printf($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if ($truthy($rb_gt(args.$length(), 0))) {
        self.$print($send(self, 'format', Opal.to_a(args)))};
      return nil;
    }, TMP_Kernel_printf_43.$$arity = -1);
    
    Opal.defn(self, '$proc', TMP_Kernel_proc_44 = function $$proc() {
      var self = this, $iter = TMP_Kernel_proc_44.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_proc_44.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, TMP_Kernel_proc_44.$$arity = 0);
    
    Opal.defn(self, '$puts', TMP_Kernel_puts_45 = function $$puts($a_rest) {
      var self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send($gvars.stdout, 'puts', Opal.to_a(strs))
    }, TMP_Kernel_puts_45.$$arity = -1);
    
    Opal.defn(self, '$p', TMP_Kernel_p_47 = function $$p($a_rest) {
      var TMP_46, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      $send(args, 'each', [], (TMP_46 = function(obj){var self = TMP_46.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46));
      if ($truthy($rb_le(args.$length(), 1))) {
        return args['$[]'](0)
        } else {
        return args
      };
    }, TMP_Kernel_p_47.$$arity = -1);
    
    Opal.defn(self, '$print', TMP_Kernel_print_48 = function $$print($a_rest) {
      var self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send($gvars.stdout, 'print', Opal.to_a(strs))
    }, TMP_Kernel_print_48.$$arity = -1);
    
    Opal.defn(self, '$warn', TMP_Kernel_warn_49 = function $$warn($a_rest) {
      var $b, self = this, strs;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($truthy(($truthy($b = $gvars.VERBOSE['$nil?']()) ? $b : strs['$empty?']()))) {
        return nil
        } else {
        return $send($gvars.stderr, 'puts', Opal.to_a(strs))
      }
    }, TMP_Kernel_warn_49.$$arity = -1);
    
    Opal.defn(self, '$raise', TMP_Kernel_raise_50 = function $$raise(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      if (string == null) {
        string = nil;
      }
      if (_backtrace == null) {
        _backtrace = nil;
      }
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = Opal.const_get_relative($nesting, 'RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = Opal.const_get_relative($nesting, 'RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$kind_of?'](Opal.const_get_relative($nesting, 'Exception'))) {
        // exception is fine
      }
      else {
        exception = Opal.const_get_relative($nesting, 'TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    
    }, TMP_Kernel_raise_50.$$arity = -1);
    Opal.alias(self, "fail", "raise");
    
    Opal.defn(self, '$rand', TMP_Kernel_rand_51 = function $$rand(max) {
      var self = this;

      
      
      if (max === undefined) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Random'), 'DEFAULT').$rand();
      }

      if (max.$$is_number) {
        if (max < 0) {
          max = Math.abs(max);
        }

        if (max % 1 !== 0) {
          max = max.$to_i();
        }

        if (max === 0) {
          max = undefined;
        }
      }
    ;
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Random'), 'DEFAULT').$rand(max);
    }, TMP_Kernel_rand_51.$$arity = -1);
    
    Opal.defn(self, '$respond_to?', TMP_Kernel_respond_to$q_52 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      
      if ($truthy(self['$respond_to_missing?'](name, include_all))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    ;
      return false;
    }, TMP_Kernel_respond_to$q_52.$$arity = -2);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Kernel_respond_to_missing$q_53 = function(method_name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return false
    }, TMP_Kernel_respond_to_missing$q_53.$$arity = -2);
    
    Opal.defn(self, '$require', TMP_Kernel_require_54 = function $$require(file) {
      var self = this;

      
      file = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](file, Opal.const_get_relative($nesting, 'String'), "to_str");
      return Opal.require(file);
    }, TMP_Kernel_require_54.$$arity = 1);
    
    Opal.defn(self, '$require_relative', TMP_Kernel_require_relative_55 = function $$require_relative(file) {
      var self = this;

      
      Opal.const_get_relative($nesting, 'Opal')['$try_convert!'](file, Opal.const_get_relative($nesting, 'String'), "to_str");
      file = Opal.const_get_relative($nesting, 'File').$expand_path(Opal.const_get_relative($nesting, 'File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, TMP_Kernel_require_relative_55.$$arity = 1);
    
    Opal.defn(self, '$require_tree', TMP_Kernel_require_tree_56 = function $$require_tree(path) {
      var self = this;

      
      var result = [];

      path = Opal.const_get_relative($nesting, 'File').$expand_path(path)
      path = Opal.normalize(path);
      if (path === '.') path = '';
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          result.push([name, Opal.require(name)]);
        }
      }

      return result;
    
    }, TMP_Kernel_require_tree_56.$$arity = 1);
    Opal.alias(self, "send", "__send__");
    Opal.alias(self, "public_send", "__send__");
    
    Opal.defn(self, '$singleton_class', TMP_Kernel_singleton_class_57 = function $$singleton_class() {
      var self = this;

      return Opal.get_singleton_class(self)
    }, TMP_Kernel_singleton_class_57.$$arity = 0);
    
    Opal.defn(self, '$sleep', TMP_Kernel_sleep_58 = function $$sleep(seconds) {
      var self = this;

      if (seconds == null) {
        seconds = nil;
      }
      
      if (seconds === nil) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "time interval must be positive")
      }
      var get_time = Opal.global.performance ?
        function() {return performance.now()} :
        function() {return new Date()}

      var t = get_time();
      while (get_time() - t <= seconds * 1000);
      return seconds;
    
    }, TMP_Kernel_sleep_58.$$arity = -1);
    Opal.alias(self, "sprintf", "format");
    
    Opal.defn(self, '$srand', TMP_Kernel_srand_59 = function $$srand(seed) {
      var self = this;

      if (seed == null) {
        seed = Opal.const_get_relative($nesting, 'Random').$new_seed();
      }
      return Opal.const_get_relative($nesting, 'Random').$srand(seed)
    }, TMP_Kernel_srand_59.$$arity = -1);
    
    Opal.defn(self, '$String', TMP_Kernel_String_60 = function $$String(str) {
      var $a, self = this;

      return ($truthy($a = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](str, Opal.const_get_relative($nesting, 'String'), "to_str")) ? $a : Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](str, Opal.const_get_relative($nesting, 'String'), "to_s"))
    }, TMP_Kernel_String_60.$$arity = 1);
    
    Opal.defn(self, '$tap', TMP_Kernel_tap_61 = function $$tap() {
      var self = this, $iter = TMP_Kernel_tap_61.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_tap_61.$$p = null;
      
      Opal.yield1(block, self);
      return self;
    }, TMP_Kernel_tap_61.$$arity = 0);
    
    Opal.defn(self, '$to_proc', TMP_Kernel_to_proc_62 = function $$to_proc() {
      var self = this;

      return self
    }, TMP_Kernel_to_proc_62.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Kernel_to_s_63 = function $$to_s() {
      var self = this;

      return "" + "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">"
    }, TMP_Kernel_to_s_63.$$arity = 0);
    
    Opal.defn(self, '$catch', TMP_Kernel_catch_64 = function(sym) {
      var self = this, $iter = TMP_Kernel_catch_64.$$p, $yield = $iter || nil, e = nil;

      if ($iter) TMP_Kernel_catch_64.$$p = null;
      try {
        return Opal.yieldX($yield, []);
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'UncaughtThrowError')])) {e = $err;
          try {
            
            if (e.$sym()['$=='](sym)) {
              return e.$arg()};
            return self.$raise();
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Kernel_catch_64.$$arity = 1);
    
    Opal.defn(self, '$throw', TMP_Kernel_throw_65 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$raise(Opal.const_get_relative($nesting, 'UncaughtThrowError').$new(args))
    }, TMP_Kernel_throw_65.$$arity = -1);
    
    Opal.defn(self, '$open', TMP_Kernel_open_66 = function $$open($a_rest) {
      var self = this, args, $iter = TMP_Kernel_open_66.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_open_66.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'File'), 'open', Opal.to_a(args), block.$to_proc())
    }, TMP_Kernel_open_66.$$arity = -1);
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return self.$include(Opal.const_get_relative($nesting, 'Kernel'))
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/error"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$+', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  
  (function($base, $super, $parent_nesting) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Exception_new_1, TMP_Exception_exception_2, TMP_Exception_initialize_3, TMP_Exception_backtrace_4, TMP_Exception_exception_5, TMP_Exception_message_6, TMP_Exception_inspect_7, TMP_Exception_to_s_8;

    def.message = nil;
    
    var Kernel$raise = Opal.const_get_relative($nesting, 'Kernel').$raise;
    Opal.defs(self, '$new', TMP_Exception_new_1 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var message   = (args.length > 0) ? args[0] : nil;
      var error     = new self.$$alloc(message);
      error.name    = self.$$name;
      error.message = message;
      Opal.send(error, error.$initialize, args);

      // Error.captureStackTrace() will use .name and .toString to build the
      // first line of the stack trace so it must be called after the error
      // has been initialized.
      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html
      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {
        // Passing Kernel.raise will cut the stack trace from that point above
        Error.captureStackTrace(error, Kernel$raise);
      }

      return error;
    
    }, TMP_Exception_new_1.$$arity = -1);
    Opal.defs(self, '$exception', TMP_Exception_exception_2 = function $$exception($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(self, 'new', Opal.to_a(args))
    }, TMP_Exception_exception_2.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Exception_initialize_3 = function $$initialize($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.message = (args.length > 0) ? args[0] : nil
    }, TMP_Exception_initialize_3.$$arity = -1);
    
    Opal.defn(self, '$backtrace', TMP_Exception_backtrace_4 = function $$backtrace() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    }, TMP_Exception_backtrace_4.$$arity = 0);
    
    Opal.defn(self, '$exception', TMP_Exception_exception_5 = function $$exception(str) {
      var self = this;

      if (str == null) {
        str = nil;
      }
      
      if (str === nil || self === str) {
        return self;
      }

      var cloned = self.$clone();
      cloned.message = str;
      return cloned;
    
    }, TMP_Exception_exception_5.$$arity = -1);
    
    Opal.defn(self, '$message', TMP_Exception_message_6 = function $$message() {
      var self = this;

      return self.$to_s()
    }, TMP_Exception_message_6.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Exception_inspect_7 = function $$inspect() {
      var self = this, as_str = nil;

      
      as_str = self.$to_s();
      if ($truthy(as_str['$empty?']())) {
        return self.$class().$to_s()
        } else {
        return "" + "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, TMP_Exception_inspect_7.$$arity = 0);
    return (Opal.defn(self, '$to_s', TMP_Exception_to_s_8 = function $$to_s() {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = self.message) ? self.message.$to_s() : $b)) ? $a : self.$class().$to_s())
    }, TMP_Exception_to_s_8.$$arity = 0), nil) && 'to_s';
  })($nesting[0], Error, $nesting);
  (function($base, $super, $parent_nesting) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMemoryError(){};
    var self = $NoMemoryError = $klass($base, $super, 'NoMemoryError', $NoMemoryError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SignalException(){};
    var self = $SignalException = $klass($base, $super, 'SignalException', $SignalException);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Interrupt(){};
    var self = $Interrupt = $klass($base, $super, 'Interrupt', $Interrupt);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SecurityError(){};
    var self = $SecurityError = $klass($base, $super, 'SecurityError', $SecurityError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $ZeroDivisionError(){};
    var self = $ZeroDivisionError = $klass($base, $super, 'ZeroDivisionError', $ZeroDivisionError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'NameError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'RangeError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $parent_nesting) {
    var $Errno, self = $Errno = $module($base, 'Errno');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_EINVAL_new_9;

      return Opal.defs(self, '$new', TMP_EINVAL_new_9 = function(name) {
        var self = this, $iter = TMP_EINVAL_new_9.$$p, $yield = $iter || nil, message = nil;

        if (name == null) {
          name = nil;
        }
        if ($iter) TMP_EINVAL_new_9.$$p = null;
        
        message = "Invalid argument";
        if ($truthy(name)) {
          message = $rb_plus(message, "" + " - " + (name))};
        return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_EINVAL_new_9, false, $EINVAL), [message], null);
      }, TMP_EINVAL_new_9.$$arity = -1)
    })($nesting[0], Opal.const_get_relative($nesting, 'SystemCallError'), $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $UncaughtThrowError(){};
    var self = $UncaughtThrowError = $klass($base, $super, 'UncaughtThrowError', $UncaughtThrowError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_UncaughtThrowError_initialize_10;

    def.sym = nil;
    
    self.$attr_reader("sym", "arg");
    return (Opal.defn(self, '$initialize', TMP_UncaughtThrowError_initialize_10 = function $$initialize(args) {
      var self = this, $iter = TMP_UncaughtThrowError_initialize_10.$$p, $yield = $iter || nil;

      if ($iter) TMP_UncaughtThrowError_initialize_10.$$p = null;
      
      self.sym = args['$[]'](0);
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.arg = args['$[]'](1)};
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_UncaughtThrowError_initialize_10, false), ["" + "uncaught throw " + (self.sym.$inspect())], null);
    }, TMP_UncaughtThrowError_initialize_10.$$arity = 1), nil) && 'initialize';
  })($nesting[0], Opal.const_get_relative($nesting, 'ArgumentError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NameError_initialize_11;

    
    self.$attr_reader("name");
    return (Opal.defn(self, '$initialize', TMP_NameError_initialize_11 = function $$initialize(message, name) {
      var self = this, $iter = TMP_NameError_initialize_11.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      if ($iter) TMP_NameError_initialize_11.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NameError_initialize_11, false), [message], null);
      return (self.name = name);
    }, TMP_NameError_initialize_11.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NoMethodError_initialize_12;

    
    self.$attr_reader("args");
    return (Opal.defn(self, '$initialize', TMP_NoMethodError_initialize_12 = function $$initialize(message, name, args) {
      var self = this, $iter = TMP_NoMethodError_initialize_12.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      if (args == null) {
        args = [];
      }
      if ($iter) TMP_NoMethodError_initialize_12.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NoMethodError_initialize_12, false), [message, name], null);
      return (self.args = args);
    }, TMP_NoMethodError_initialize_12.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return self.$attr_reader("result")
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $JS, self = $JS = $module($base, 'JS');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Error(){};
      var self = $Error = $klass($base, $super, 'Error', $Error);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/constants"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  
  Opal.const_set($nesting[0], 'RUBY_PLATFORM', "opal");
  Opal.const_set($nesting[0], 'RUBY_ENGINE', "opal");
  Opal.const_set($nesting[0], 'RUBY_VERSION', "2.4.0");
  Opal.const_set($nesting[0], 'RUBY_ENGINE_VERSION', "0.11.0.rc1");
  Opal.const_set($nesting[0], 'RUBY_RELEASE_DATE', "2017-05-01");
  Opal.const_set($nesting[0], 'RUBY_PATCHLEVEL', 0);
  Opal.const_set($nesting[0], 'RUBY_REVISION', 0);
  Opal.const_set($nesting[0], 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2015 Adam Beynon");
  return Opal.const_set($nesting[0], 'RUBY_DESCRIPTION', "" + "opal " + (Opal.const_get_relative($nesting, 'RUBY_ENGINE_VERSION')) + " (" + (Opal.const_get_relative($nesting, 'RUBY_RELEASE_DATE')) + " revision " + (Opal.const_get_relative($nesting, 'RUBY_REVISION')) + ")");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/nil"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$name', '$new', '$>', '$length', '$Rational']);
  
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_$B_2, TMP_NilClass_$_3, TMP_NilClass_$_4, TMP_NilClass_$_5, TMP_NilClass_$eq$eq_6, TMP_NilClass_dup_7, TMP_NilClass_clone_8, TMP_NilClass_inspect_9, TMP_NilClass_nil$q_10, TMP_NilClass_singleton_class_11, TMP_NilClass_to_a_12, TMP_NilClass_to_h_13, TMP_NilClass_to_i_14, TMP_NilClass_to_s_15, TMP_NilClass_to_c_16, TMP_NilClass_rationalize_17, TMP_NilClass_to_r_18, TMP_NilClass_instance_variables_19;

    
    def.$$meta = self;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_allocate_1;

      
      
      Opal.defn(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var self = this;

        return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.defn(self, '$!', TMP_NilClass_$B_2 = function() {
      var self = this;

      return true
    }, TMP_NilClass_$B_2.$$arity = 0);
    
    Opal.defn(self, '$&', TMP_NilClass_$_3 = function(other) {
      var self = this;

      return false
    }, TMP_NilClass_$_3.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_NilClass_$_4 = function(other) {
      var self = this;

      return other !== false && other !== nil
    }, TMP_NilClass_$_4.$$arity = 1);
    
    Opal.defn(self, '$^', TMP_NilClass_$_5 = function(other) {
      var self = this;

      return other !== false && other !== nil
    }, TMP_NilClass_$_5.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_NilClass_$eq$eq_6 = function(other) {
      var self = this;

      return other === nil
    }, TMP_NilClass_$eq$eq_6.$$arity = 1);
    
    Opal.defn(self, '$dup', TMP_NilClass_dup_7 = function $$dup() {
      var self = this;

      return nil
    }, TMP_NilClass_dup_7.$$arity = 0);
    
    Opal.defn(self, '$clone', TMP_NilClass_clone_8 = function $$clone($kwargs) {
      var self = this, freeze;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      }
      return nil
    }, TMP_NilClass_clone_8.$$arity = -1);
    
    Opal.defn(self, '$inspect', TMP_NilClass_inspect_9 = function $$inspect() {
      var self = this;

      return "nil"
    }, TMP_NilClass_inspect_9.$$arity = 0);
    
    Opal.defn(self, '$nil?', TMP_NilClass_nil$q_10 = function() {
      var self = this;

      return true
    }, TMP_NilClass_nil$q_10.$$arity = 0);
    
    Opal.defn(self, '$singleton_class', TMP_NilClass_singleton_class_11 = function $$singleton_class() {
      var self = this;

      return Opal.const_get_relative($nesting, 'NilClass')
    }, TMP_NilClass_singleton_class_11.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_NilClass_to_a_12 = function $$to_a() {
      var self = this;

      return []
    }, TMP_NilClass_to_a_12.$$arity = 0);
    
    Opal.defn(self, '$to_h', TMP_NilClass_to_h_13 = function $$to_h() {
      var self = this;

      return Opal.hash()
    }, TMP_NilClass_to_h_13.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_NilClass_to_i_14 = function $$to_i() {
      var self = this;

      return 0
    }, TMP_NilClass_to_i_14.$$arity = 0);
    Opal.alias(self, "to_f", "to_i");
    
    Opal.defn(self, '$to_s', TMP_NilClass_to_s_15 = function $$to_s() {
      var self = this;

      return ""
    }, TMP_NilClass_to_s_15.$$arity = 0);
    
    Opal.defn(self, '$to_c', TMP_NilClass_to_c_16 = function $$to_c() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Complex').$new(0, 0)
    }, TMP_NilClass_to_c_16.$$arity = 0);
    
    Opal.defn(self, '$rationalize', TMP_NilClass_rationalize_17 = function $$rationalize($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'))};
      return self.$Rational(0, 1);
    }, TMP_NilClass_rationalize_17.$$arity = -1);
    
    Opal.defn(self, '$to_r', TMP_NilClass_to_r_18 = function $$to_r() {
      var self = this;

      return self.$Rational(0, 1)
    }, TMP_NilClass_to_r_18.$$arity = 0);
    return (Opal.defn(self, '$instance_variables', TMP_NilClass_instance_variables_19 = function $$instance_variables() {
      var self = this;

      return []
    }, TMP_NilClass_instance_variables_19.$$arity = 0), nil) && 'instance_variables';
  })($nesting[0], null, $nesting);
  return Opal.const_set($nesting[0], 'NIL', nil);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/boolean"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$name']);
  
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean___id___2, TMP_Boolean_$B_3, TMP_Boolean_$_4, TMP_Boolean_$_5, TMP_Boolean_$_6, TMP_Boolean_$eq$eq_7, TMP_Boolean_singleton_class_8, TMP_Boolean_to_s_9, TMP_Boolean_dup_10, TMP_Boolean_clone_11;

    
    def.$$is_boolean = true;
    def.$$meta = self;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_allocate_1;

      
      
      Opal.defn(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var self = this;

        return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.defn(self, '$__id__', TMP_Boolean___id___2 = function $$__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0
    }, TMP_Boolean___id___2.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.defn(self, '$!', TMP_Boolean_$B_3 = function() {
      var self = this;

      return self != true
    }, TMP_Boolean_$B_3.$$arity = 0);
    
    Opal.defn(self, '$&', TMP_Boolean_$_4 = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false
    }, TMP_Boolean_$_4.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Boolean_$_5 = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil)
    }, TMP_Boolean_$_5.$$arity = 1);
    
    Opal.defn(self, '$^', TMP_Boolean_$_6 = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil)
    }, TMP_Boolean_$_6.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Boolean_$eq$eq_7 = function(other) {
      var self = this;

      return (self == true) === other.valueOf()
    }, TMP_Boolean_$eq$eq_7.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$singleton_class', TMP_Boolean_singleton_class_8 = function $$singleton_class() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Boolean')
    }, TMP_Boolean_singleton_class_8.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Boolean_to_s_9 = function $$to_s() {
      var self = this;

      return (self == true) ? 'true' : 'false'
    }, TMP_Boolean_to_s_9.$$arity = 0);
    
    Opal.defn(self, '$dup', TMP_Boolean_dup_10 = function $$dup() {
      var self = this;

      return self
    }, TMP_Boolean_dup_10.$$arity = 0);
    return (Opal.defn(self, '$clone', TMP_Boolean_clone_11 = function $$clone($kwargs) {
      var self = this, freeze;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      }
      return self
    }, TMP_Boolean_clone_11.$$arity = -1), nil) && 'clone';
  })($nesting[0], Boolean, $nesting);
  Opal.const_set($nesting[0], 'TrueClass', Opal.const_get_relative($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'FalseClass', Opal.const_get_relative($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'TRUE', true);
  return Opal.const_set($nesting[0], 'FALSE', false);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base, $parent_nesting) {
    var $Comparable, self = $Comparable = $module($base, 'Comparable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Comparable_normalize_1, TMP_Comparable_$eq$eq_2, TMP_Comparable_$gt_3, TMP_Comparable_$gt$eq_4, TMP_Comparable_$lt_5, TMP_Comparable_$lt$eq_6, TMP_Comparable_between$q_7, TMP_Comparable_clamp_8;

    
    Opal.defs(self, '$normalize', TMP_Comparable_normalize_1 = function $$normalize(what) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](what))) {
        return what};
      if ($truthy($rb_gt(what, 0))) {
        return 1};
      if ($truthy($rb_lt(what, 0))) {
        return -1};
      return 0;
    }, TMP_Comparable_normalize_1.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Comparable_$eq$eq_2 = function(other) {
      var self = this, cmp = nil;

      try {
        
        if ($truthy(self['$equal?'](other))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
        if ($truthy((cmp = self['$<=>'](other)))) {
          } else {
          return false
        };
        return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Comparable_$eq$eq_2.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Comparable_$gt_3 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) > 0;
    }, TMP_Comparable_$gt_3.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Comparable_$gt$eq_4 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) >= 0;
    }, TMP_Comparable_$gt$eq_4.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Comparable_$lt_5 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) < 0;
    }, TMP_Comparable_$lt_5.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Comparable_$lt$eq_6 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) <= 0;
    }, TMP_Comparable_$lt$eq_6.$$arity = 1);
    
    Opal.defn(self, '$between?', TMP_Comparable_between$q_7 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_Comparable_between$q_7.$$arity = 2);
    
    Opal.defn(self, '$clamp', TMP_Comparable_clamp_8 = function $$clamp(min, max) {
      var self = this, cmp = nil;

      
      cmp = min['$<=>'](max);
      if ($truthy(cmp)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (min.$class()) + " with " + (max.$class()) + " failed")
      };
      if ($truthy($rb_gt(Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp), 0))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "min argument must be smaller than max argument")};
      if ($truthy($rb_lt(Opal.const_get_relative($nesting, 'Comparable').$normalize(self['$<=>'](min)), 0))) {
        return min};
      if ($truthy($rb_gt(Opal.const_get_relative($nesting, 'Comparable').$normalize(self['$<=>'](max)), 0))) {
        return max};
      return self;
    }, TMP_Comparable_clamp_8.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/regexp"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$call', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  
  (function($base, $super, $parent_nesting) {
    function $RegexpError(){};
    var self = $RegexpError = $klass($base, $super, 'RegexpError', $RegexpError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Regexp_$eq$eq_6, TMP_Regexp_$eq$eq$eq_7, TMP_Regexp_$eq$_8, TMP_Regexp_inspect_9, TMP_Regexp_match_10, TMP_Regexp_match$q_11, TMP_Regexp_$_12, TMP_Regexp_source_13, TMP_Regexp_options_14, TMP_Regexp_casefold$q_15;

    
    Opal.const_set($nesting[0], 'IGNORECASE', 1);
    Opal.const_set($nesting[0], 'MULTILINE', 4);
    def.$$is_regexp = true;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_allocate_1, TMP_escape_2, TMP_last_match_3, TMP_union_4, TMP_new_5;

      
      
      Opal.defn(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var self = this, $iter = TMP_allocate_1.$$p, $yield = $iter || nil, allocated = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_allocate_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        allocated = $send(self, Opal.find_super_dispatcher(self, 'allocate', TMP_allocate_1, false), $zuper, $iter);
        allocated.uninitialized = true;
        return allocated;
      }, TMP_allocate_1.$$arity = 0);
      
      Opal.defn(self, '$escape', TMP_escape_2 = function $$escape(string) {
        var self = this;

        return Opal.escape_regexp(string)
      }, TMP_escape_2.$$arity = 1);
      
      Opal.defn(self, '$last_match', TMP_last_match_3 = function $$last_match(n) {
        var self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (n == null) {
          n = nil;
        }
        if ($truthy(n['$nil?']())) {
          return $gvars["~"]
          } else {
          return $gvars["~"]['$[]'](n)
        }
      }, TMP_last_match_3.$$arity = -1);
      Opal.alias(self, "quote", "escape");
      
      Opal.defn(self, '$union', TMP_union_4 = function $$union($a_rest) {
        var self = this, parts;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        parts = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          parts[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "no implicit conversion of Array into String")
        }
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      ;
        return self.$new((quoted_validated).$join("|"), options);
      }, TMP_union_4.$$arity = -1);
      return (Opal.defn(self, '$new', TMP_new_5 = function(regexp, options) {
        var self = this;

        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](regexp, Opal.const_get_relative($nesting, 'String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          self.$raise(Opal.const_get_relative($nesting, 'RegexpError'), "" + "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if (Opal.const_get_relative($nesting, 'IGNORECASE') & options) { temp += 'i'; }
          if (Opal.const_get_relative($nesting, 'MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      
      }, TMP_new_5.$$arity = -2), nil) && 'new';
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.defn(self, '$==', TMP_Regexp_$eq$eq_6 = function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString()
    }, TMP_Regexp_$eq$eq_6.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_Regexp_$eq$eq$eq_7 = function(string) {
      var self = this;

      return self.$match(Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](string, Opal.const_get_relative($nesting, 'String'), "to_str")) !== nil
    }, TMP_Regexp_$eq$eq$eq_7.$$arity = 1);
    
    Opal.defn(self, '$=~', TMP_Regexp_$eq$_8 = function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($truthy($a = self.$match(string)) ? $gvars["~"].$begin(0) : $a)
    }, TMP_Regexp_$eq$_8.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$inspect', TMP_Regexp_inspect_9 = function $$inspect() {
      var self = this;

      
      var regexp_format = /^\/(.*)\/([^\/]*)$/;
      var value = self.toString();
      var matches = regexp_format.exec(value);
      if (matches) {
        var regexp_pattern = matches[1];
        var regexp_flags = matches[2];
        var chars = regexp_pattern.split('');
        var chars_length = chars.length;
        var char_escaped = false;
        var regexp_pattern_escaped = '';
        for (var i = 0; i < chars_length; i++) {
          var current_char = chars[i];
          if (!char_escaped && current_char == '/') {
            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\');
          }
          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);
          if (current_char == '\\') {
            if (char_escaped) {
              // does not over escape
              char_escaped = false;
            } else {
              char_escaped = true;
            }
          } else {
            char_escaped = false;
          }
        }
        return '/' + regexp_pattern_escaped + '/' + regexp_flags;
      } else {
        return value;
      }
    
    }, TMP_Regexp_inspect_9.$$arity = 0);
    
    Opal.defn(self, '$match', TMP_Regexp_match_10 = function $$match(string, pos) {
      var self = this, $iter = TMP_Regexp_match_10.$$p, block = $iter || nil;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      if ($iter) TMP_Regexp_match_10.$$p = null;
      
      if (self.uninitialized) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        pos = 0;
      } else {
        pos = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pos, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (string === nil) {
        return ($gvars["~"] = nil);
      }

      string = Opal.const_get_relative($nesting, 'Opal').$coerce_to(string, Opal.const_get_relative($nesting, 'String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return ($gvars["~"] = nil);
        }
      }

      var source = self.source;
      var flags = 'g';
      // m flag + a . in Ruby will match white space, but in JS, it only matches beginning/ending of lines, so we get the equivalent here
      if (self.multiline) {
        source = source.replace('.', "[\\s\\S]");
        flags += 'm';
      }

      // global RegExp maintains state, so not using self/this
      var md, re = new RegExp(source, flags + (self.ignoreCase ? 'i' : ''));

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return ($gvars["~"] = nil);
        }
        if (md.index >= pos) {
          ($gvars["~"] = Opal.const_get_relative($nesting, 'MatchData').$new(re, md))
          return block === nil ? $gvars["~"] : block.$call($gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    
    }, TMP_Regexp_match_10.$$arity = -2);
    
    Opal.defn(self, '$match?', TMP_Regexp_match$q_11 = function(string, pos) {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        pos = 0;
      } else {
        pos = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pos, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (string === nil) {
        return false;
      }

      string = Opal.const_get_relative($nesting, 'Opal').$coerce_to(string, Opal.const_get_relative($nesting, 'String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return false;
        }
      }

      var source = self.source;
      var flags = 'g';
      // m flag + a . in Ruby will match white space, but in JS, it only matches beginning/ending of lines, so we get the equivalent here
      if (self.multiline) {
        source = source.replace('.', "[\\s\\S]");
        flags += 'm';
      }

      // global RegExp maintains state, so not using self/this
      var md, re = new RegExp(source, flags + (self.ignoreCase ? 'i' : ''));

      md = re.exec(string);
      if (md === null || md.index < pos) {
        return false;
      } else {
        return true;
      }
    
    }, TMP_Regexp_match$q_11.$$arity = -2);
    
    Opal.defn(self, '$~', TMP_Regexp_$_12 = function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._)
    }, TMP_Regexp_$_12.$$arity = 0);
    
    Opal.defn(self, '$source', TMP_Regexp_source_13 = function $$source() {
      var self = this;

      return self.source
    }, TMP_Regexp_source_13.$$arity = 0);
    
    Opal.defn(self, '$options', TMP_Regexp_options_14 = function $$options() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= Opal.const_get_relative($nesting, 'MULTILINE');
      }
      if (self.ignoreCase) {
        result |= Opal.const_get_relative($nesting, 'IGNORECASE');
      }
      return result;
    
    }, TMP_Regexp_options_14.$$arity = 0);
    
    Opal.defn(self, '$casefold?', TMP_Regexp_casefold$q_15 = function() {
      var self = this;

      return self.ignoreCase
    }, TMP_Regexp_casefold$q_15.$$arity = 0);
    return Opal.alias(self, "to_s", "source");
  })($nesting[0], RegExp, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_initialize_16, TMP_MatchData_$$_17, TMP_MatchData_offset_18, TMP_MatchData_$eq$eq_19, TMP_MatchData_begin_20, TMP_MatchData_end_21, TMP_MatchData_captures_22, TMP_MatchData_inspect_23, TMP_MatchData_length_24, TMP_MatchData_to_a_25, TMP_MatchData_to_s_26, TMP_MatchData_values_at_27;

    def.matches = nil;
    
    self.$attr_reader("post_match", "pre_match", "regexp", "string");
    
    Opal.defn(self, '$initialize', TMP_MatchData_initialize_16 = function $$initialize(regexp, match_groups) {
      var self = this;

      
      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    ;
    }, TMP_MatchData_initialize_16.$$arity = 2);
    
    Opal.defn(self, '$[]', TMP_MatchData_$$_17 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(self.matches, '[]', Opal.to_a(args))
    }, TMP_MatchData_$$_17.$$arity = -1);
    
    Opal.defn(self, '$offset', TMP_MatchData_offset_18 = function $$offset(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    
    }, TMP_MatchData_offset_18.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_MatchData_$eq$eq_19 = function(other) {
      var $a, $b, $c, $d, self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'MatchData')['$==='](other))) {
        } else {
        return false
      };
      return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.string == other.string) ? self.regexp.toString() == other.regexp.toString() : $d)) ? self.pre_match == other.pre_match : $c)) ? self.post_match == other.post_match : $b)) ? self.begin == other.begin : $a);
    }, TMP_MatchData_$eq$eq_19.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$begin', TMP_MatchData_begin_20 = function $$begin(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    
    }, TMP_MatchData_begin_20.$$arity = 1);
    
    Opal.defn(self, '$end', TMP_MatchData_end_21 = function $$end(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    
    }, TMP_MatchData_end_21.$$arity = 1);
    
    Opal.defn(self, '$captures', TMP_MatchData_captures_22 = function $$captures() {
      var self = this;

      return self.matches.slice(1)
    }, TMP_MatchData_captures_22.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_MatchData_inspect_23 = function $$inspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    
    }, TMP_MatchData_inspect_23.$$arity = 0);
    
    Opal.defn(self, '$length', TMP_MatchData_length_24 = function $$length() {
      var self = this;

      return self.matches.length
    }, TMP_MatchData_length_24.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$to_a', TMP_MatchData_to_a_25 = function $$to_a() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_a_25.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_MatchData_to_s_26 = function $$to_s() {
      var self = this;

      return self.matches[0]
    }, TMP_MatchData_to_s_26.$$arity = 0);
    return (Opal.defn(self, '$values_at', TMP_MatchData_values_at_27 = function $$values_at($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](args[i], Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    
    }, TMP_MatchData_values_at_27.$$arity = -1), nil) && 'values_at';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/string"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$class', '$match', '$captures', '$proc', '$succ', '$escape']);
  
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String___id___1, TMP_String_try_convert_2, TMP_String_new_3, TMP_String_initialize_4, TMP_String_$_5, TMP_String_$_6, TMP_String_$_7, TMP_String_$lt$eq$gt_8, TMP_String_$eq$eq_9, TMP_String_$eq$_10, TMP_String_$$_11, TMP_String_capitalize_12, TMP_String_casecmp_13, TMP_String_center_14, TMP_String_chars_15, TMP_String_chomp_16, TMP_String_chop_17, TMP_String_chr_18, TMP_String_clone_19, TMP_String_dup_20, TMP_String_count_21, TMP_String_delete_22, TMP_String_downcase_23, TMP_String_each_char_24, TMP_String_each_line_26, TMP_String_empty$q_27, TMP_String_end_with$q_28, TMP_String_gsub_29, TMP_String_hash_30, TMP_String_hex_31, TMP_String_include$q_32, TMP_String_index_33, TMP_String_inspect_34, TMP_String_intern_35, TMP_String_lines_36, TMP_String_length_37, TMP_String_ljust_38, TMP_String_lstrip_39, TMP_String_ascii_only$q_40, TMP_String_match_41, TMP_String_next_42, TMP_String_oct_43, TMP_String_ord_44, TMP_String_partition_45, TMP_String_reverse_46, TMP_String_rindex_47, TMP_String_rjust_48, TMP_String_rpartition_49, TMP_String_rstrip_50, TMP_String_scan_51, TMP_String_split_52, TMP_String_squeeze_53, TMP_String_start_with$q_54, TMP_String_strip_55, TMP_String_sub_56, TMP_String_sum_57, TMP_String_swapcase_58, TMP_String_to_f_59, TMP_String_to_i_60, TMP_String_to_proc_62, TMP_String_to_s_63, TMP_String_tr_64, TMP_String_tr_s_65, TMP_String_upcase_66, TMP_String_upto_67, TMP_String_instance_variables_68, TMP_String__load_69, TMP_String_unpack_70;

    def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    def.$$is_string = true;
    
    Opal.defn(self, '$__id__', TMP_String___id___1 = function $$__id__() {
      var self = this;

      return self.toString()
    }, TMP_String___id___1.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    Opal.defs(self, '$try_convert', TMP_String_try_convert_2 = function $$try_convert(what) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](what, Opal.const_get_relative($nesting, 'String'), "to_str")
    }, TMP_String_try_convert_2.$$arity = 1);
    Opal.defs(self, '$new', TMP_String_new_3 = function(str) {
      var self = this;

      if (str == null) {
        str = "";
      }
      
      str = Opal.const_get_relative($nesting, 'Opal').$coerce_to(str, Opal.const_get_relative($nesting, 'String'), "to_str");
      return new String(str);
    }, TMP_String_new_3.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_String_initialize_4 = function $$initialize(str) {
      var self = this;

      
      
      if (str === undefined) {
        return self;
      }
    ;
      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "Mutable strings are not supported in Opal.");
    }, TMP_String_initialize_4.$$arity = -1);
    
    Opal.defn(self, '$%', TMP_String_$_5 = function(data) {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](data))) {
        return $send(self, 'format', [self].concat(Opal.to_a(data)))
        } else {
        return self.$format(self, data)
      }
    }, TMP_String_$_5.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_String_$_6 = function(count) {
      var self = this;

      
      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return '';
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return result;
    
    }, TMP_String_$_6.$$arity = 1);
    
    Opal.defn(self, '$+', TMP_String_$_7 = function(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'String'), "to_str");
      return self + other.$to_s();
    }, TMP_String_$_7.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_String_$lt$eq$gt_8 = function(other) {
      var self = this;

      if ($truthy(other['$respond_to?']("to_str"))) {
        
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      
      }
    }, TMP_String_$lt$eq$gt_8.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_String_$eq$eq_9 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](other, "to_str")) {
        return other['$=='](self);
      }
      return false;
    
    }, TMP_String_$eq$eq_9.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    
    Opal.defn(self, '$=~', TMP_String_$eq$_10 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    
    }, TMP_String_$eq$_10.$$arity = 1);
    
    Opal.defn(self, '$[]', TMP_String_$$_11 = function(index, length) {
      var self = this;

      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.excl;
        length  = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index.end, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        index   = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index.begin, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'))
        }
        return self.indexOf(index) !== -1 ? index : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          ($gvars["~"] = nil)
          return nil;
        }

        ($gvars["~"] = Opal.const_get_relative($nesting, 'MatchData').$new(index, match))

        if (length == null) {
          return match[0];
        }

        length = Opal.const_get_relative($nesting, 'Opal').$coerce_to(length, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (length < 0 && -length < match.length) {
          return match[length += match.length];
        }

        if (length >= 0 && length < match.length) {
          return match[length];
        }

        return nil;
      }


      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.substr(index, 1);
      }

      length = Opal.const_get_relative($nesting, 'Opal').$coerce_to(length, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    }, TMP_String_$$_11.$$arity = -2);
    Opal.alias(self, "byteslice", "[]");
    
    Opal.defn(self, '$capitalize', TMP_String_capitalize_12 = function $$capitalize() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase()
    }, TMP_String_capitalize_12.$$arity = 0);
    
    Opal.defn(self, '$casecmp', TMP_String_casecmp_13 = function $$casecmp(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    ;
      return self['$<=>'](other);
    }, TMP_String_casecmp_13.$$arity = 1);
    
    Opal.defn(self, '$center', TMP_String_center_14 = function $$center(width, padstr) {
      var self = this;

      if (padstr == null) {
        padstr = " ";
      }
      
      width = Opal.const_get_relative($nesting, 'Opal').$coerce_to(width, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      padstr = Opal.const_get_relative($nesting, 'Opal').$coerce_to(padstr, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    }, TMP_String_center_14.$$arity = -2);
    
    Opal.defn(self, '$chars', TMP_String_chars_15 = function $$chars() {
      var self = this, $iter = TMP_String_chars_15.$$p, block = $iter || nil;

      if ($iter) TMP_String_chars_15.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$each_char().$to_a()
      };
      return $send(self, 'each_char', [], block.$to_proc());
    }, TMP_String_chars_15.$$arity = 0);
    
    Opal.defn(self, '$chomp', TMP_String_chomp_16 = function $$chomp(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      
      if ($truthy(separator === nil || self.length === 0)) {
        return self};
      separator = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](separator, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    ;
      return self;
    }, TMP_String_chomp_16.$$arity = -1);
    
    Opal.defn(self, '$chop', TMP_String_chop_17 = function $$chop() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    }, TMP_String_chop_17.$$arity = 0);
    
    Opal.defn(self, '$chr', TMP_String_chr_18 = function $$chr() {
      var self = this;

      return self.charAt(0)
    }, TMP_String_chr_18.$$arity = 0);
    
    Opal.defn(self, '$clone', TMP_String_clone_19 = function $$clone() {
      var self = this, copy = nil;

      
      copy = self.slice();
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_String_clone_19.$$arity = 0);
    
    Opal.defn(self, '$dup', TMP_String_dup_20 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    }, TMP_String_dup_20.$$arity = 0);
    
    Opal.defn(self, '$count', TMP_String_count_21 = function $$count($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    
    }, TMP_String_count_21.$$arity = -1);
    
    Opal.defn(self, '$delete', TMP_String_delete_22 = function($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp(char_class, 'g'), '');
    
    }, TMP_String_delete_22.$$arity = -1);
    
    Opal.defn(self, '$downcase', TMP_String_downcase_23 = function $$downcase() {
      var self = this;

      return self.toLowerCase()
    }, TMP_String_downcase_23.$$arity = 0);
    
    Opal.defn(self, '$each_char', TMP_String_each_char_24 = function $$each_char() {
      var TMP_25, self = this, $iter = TMP_String_each_char_24.$$p, block = $iter || nil;

      if ($iter) TMP_String_each_char_24.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_char"], (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.charAt(i));
      }
    ;
      return self;
    }, TMP_String_each_char_24.$$arity = 0);
    
    Opal.defn(self, '$each_line', TMP_String_each_line_26 = function $$each_line(separator) {
      var self = this, $iter = TMP_String_each_line_26.$$p, block = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_String_each_line_26.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = Opal.const_get_relative($nesting, 'Opal').$coerce_to(separator, Opal.const_get_relative($nesting, 'String'), "to_str")

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            Opal.yield1(block, (a[i] || "") + (a[i + 1] || ""));
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          Opal.yield1(block, splitted[i] + separator);
        }
        else {
          Opal.yield1(block, splitted[i]);
        }
      }
    ;
      return self;
    }, TMP_String_each_line_26.$$arity = -1);
    
    Opal.defn(self, '$empty?', TMP_String_empty$q_27 = function() {
      var self = this;

      return self.length === 0
    }, TMP_String_empty$q_27.$$arity = 0);
    
    Opal.defn(self, '$end_with?', TMP_String_end_with$q_28 = function($a_rest) {
      var self = this, suffixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      suffixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        suffixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = Opal.const_get_relative($nesting, 'Opal').$coerce_to(suffixes[i], Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    ;
      return false;
    }, TMP_String_end_with$q_28.$$arity = -1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "equal?", "===");
    
    Opal.defn(self, '$gsub', TMP_String_gsub_29 = function $$gsub(pattern, replacement) {
      var self = this, $iter = TMP_String_gsub_29.$$p, block = $iter || nil;

      if ($iter) TMP_String_gsub_29.$$p = null;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pattern, Opal.const_get_relative($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          ($gvars["~"] = nil)
          result += self.slice(index);
          break;
        }

        match_data = Opal.const_get_relative($nesting, 'MatchData').$new(pattern, match);

        if (replacement === undefined) {
          _replacement = block(match[0]);
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = Opal.const_get_relative($nesting, 'Opal').$coerce_to(replacement, Opal.const_get_relative($nesting, 'String'), "to_str");
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      ($gvars["~"] = match_data)
      return result;
    
    }, TMP_String_gsub_29.$$arity = -2);
    
    Opal.defn(self, '$hash', TMP_String_hash_30 = function $$hash() {
      var self = this;

      return self.toString()
    }, TMP_String_hash_30.$$arity = 0);
    
    Opal.defn(self, '$hex', TMP_String_hex_31 = function $$hex() {
      var self = this;

      return self.$to_i(16)
    }, TMP_String_hex_31.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_String_include$q_32 = function(other) {
      var self = this;

      
      if (!other.$$is_string) {
        (other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'String'), "to_str"))
      }
      return self.indexOf(other) !== -1;
    
    }, TMP_String_include$q_32.$$arity = 1);
    
    Opal.defn(self, '$index', TMP_String_index_33 = function $$index(search, offset) {
      var self = this;

      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = Opal.const_get_relative($nesting, 'Opal').$coerce_to(offset, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            ($gvars["~"] = nil);
            index = -1;
            break;
          }
          if (match.index >= offset) {
            ($gvars["~"] = Opal.const_get_relative($nesting, 'MatchData').$new(regex, match))
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = Opal.const_get_relative($nesting, 'Opal').$coerce_to(search, Opal.const_get_relative($nesting, 'String'), "to_str");
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    
    }, TMP_String_index_33.$$arity = -2);
    
    Opal.defn(self, '$inspect', TMP_String_inspect_34 = function $$inspect() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\u007F-\u009F\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    }, TMP_String_inspect_34.$$arity = 0);
    
    Opal.defn(self, '$intern', TMP_String_intern_35 = function $$intern() {
      var self = this;

      return self
    }, TMP_String_intern_35.$$arity = 0);
    
    Opal.defn(self, '$lines', TMP_String_lines_36 = function $$lines(separator) {
      var self = this, $iter = TMP_String_lines_36.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_String_lines_36.$$p = null;
      
      e = $send(self, 'each_line', [separator], block.$to_proc());
      if ($truthy(block)) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_String_lines_36.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_String_length_37 = function $$length() {
      var self = this;

      return self.length
    }, TMP_String_length_37.$$arity = 0);
    
    Opal.defn(self, '$ljust', TMP_String_ljust_38 = function $$ljust(width, padstr) {
      var self = this;

      if (padstr == null) {
        padstr = " ";
      }
      
      width = Opal.const_get_relative($nesting, 'Opal').$coerce_to(width, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      padstr = Opal.const_get_relative($nesting, 'Opal').$coerce_to(padstr, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    ;
    }, TMP_String_ljust_38.$$arity = -2);
    
    Opal.defn(self, '$lstrip', TMP_String_lstrip_39 = function $$lstrip() {
      var self = this;

      return self.replace(/^\s*/, '')
    }, TMP_String_lstrip_39.$$arity = 0);
    
    Opal.defn(self, '$ascii_only?', TMP_String_ascii_only$q_40 = function() {
      var self = this;

      return self.match(/[ -~\n]*/)[0] === self
    }, TMP_String_ascii_only$q_40.$$arity = 0);
    
    Opal.defn(self, '$match', TMP_String_match_41 = function $$match(pattern, pos) {
      var $a, self = this, $iter = TMP_String_match_41.$$p, block = $iter || nil;

      if ($iter) TMP_String_match_41.$$p = null;
      
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?']("to_str")))) {
        pattern = Opal.const_get_relative($nesting, 'Regexp').$new(pattern.$to_str())};
      if ($truthy(Opal.const_get_relative($nesting, 'Regexp')['$==='](pattern))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return $send(pattern, 'match', [self, pos], block.$to_proc());
    }, TMP_String_match_41.$$arity = -2);
    
    Opal.defn(self, '$next', TMP_String_next_42 = function $$next() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return '';
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return result;
    
    }, TMP_String_next_42.$$arity = 0);
    
    Opal.defn(self, '$oct', TMP_String_oct_43 = function $$oct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, TMP_String_oct_43.$$arity = 0);
    
    Opal.defn(self, '$ord', TMP_String_ord_44 = function $$ord() {
      var self = this;

      return self.charCodeAt(0)
    }, TMP_String_ord_44.$$arity = 0);
    
    Opal.defn(self, '$partition', TMP_String_partition_45 = function $$partition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          Opal.const_get_relative($nesting, 'MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = Opal.const_get_relative($nesting, 'Opal').$coerce_to(sep, Opal.const_get_relative($nesting, 'String'), "to_str");
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_String_partition_45.$$arity = 1);
    
    Opal.defn(self, '$reverse', TMP_String_reverse_46 = function $$reverse() {
      var self = this;

      return self.split('').reverse().join('')
    }, TMP_String_reverse_46.$$arity = 0);
    
    Opal.defn(self, '$rindex', TMP_String_rindex_47 = function $$rindex(search, offset) {
      var self = this;

      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = Opal.const_get_relative($nesting, 'Opal').$coerce_to(offset, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          ($gvars["~"] = nil)
          i = -1;
        } else {
          Opal.const_get_relative($nesting, 'MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = Opal.const_get_relative($nesting, 'Opal').$coerce_to(search, Opal.const_get_relative($nesting, 'String'), "to_str");
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    
    }, TMP_String_rindex_47.$$arity = -2);
    
    Opal.defn(self, '$rjust', TMP_String_rjust_48 = function $$rjust(width, padstr) {
      var self = this;

      if (padstr == null) {
        padstr = " ";
      }
      
      width = Opal.const_get_relative($nesting, 'Opal').$coerce_to(width, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      padstr = Opal.const_get_relative($nesting, 'Opal').$coerce_to(padstr, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    ;
    }, TMP_String_rjust_48.$$arity = -2);
    
    Opal.defn(self, '$rpartition', TMP_String_rpartition_49 = function $$rpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = new RegExp(sep.source, 'gm' + (sep.ignoreCase ? 'i' : ''));

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          Opal.const_get_relative($nesting, 'MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = Opal.const_get_relative($nesting, 'Opal').$coerce_to(sep, Opal.const_get_relative($nesting, 'String'), "to_str");
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_String_rpartition_49.$$arity = 1);
    
    Opal.defn(self, '$rstrip', TMP_String_rstrip_50 = function $$rstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '')
    }, TMP_String_rstrip_50.$$arity = 0);
    
    Opal.defn(self, '$scan', TMP_String_scan_51 = function $$scan(pattern) {
      var self = this, $iter = TMP_String_scan_51.$$p, block = $iter || nil;

      if ($iter) TMP_String_scan_51.$$p = null;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pattern, Opal.const_get_relative($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = Opal.const_get_relative($nesting, 'MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      ($gvars["~"] = match_data)

      return (block !== nil ? self : result);
    
    }, TMP_String_scan_51.$$arity = 1);
    Opal.alias(self, "size", "length");
    Opal.alias(self, "slice", "[]");
    
    Opal.defn(self, '$split', TMP_String_split_52 = function $$split(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](limit, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ($truthy($a = $gvars[";"]) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i, ii;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pattern, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return result;
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0, ii = match.length; i < ii; i++) {
            result.push('');
          }
        }
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        return result;
      }

      if (limit >= result.length) {
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      return result;
    
    }, TMP_String_split_52.$$arity = -1);
    
    Opal.defn(self, '$squeeze', TMP_String_squeeze_53 = function $$squeeze($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1');
    
    }, TMP_String_squeeze_53.$$arity = -1);
    
    Opal.defn(self, '$start_with?', TMP_String_start_with$q_54 = function($a_rest) {
      var self = this, prefixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      prefixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        prefixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = Opal.const_get_relative($nesting, 'Opal').$coerce_to(prefixes[i], Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    }, TMP_String_start_with$q_54.$$arity = -1);
    
    Opal.defn(self, '$strip', TMP_String_strip_55 = function $$strip() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '')
    }, TMP_String_strip_55.$$arity = 0);
    
    Opal.defn(self, '$sub', TMP_String_sub_56 = function $$sub(pattern, replacement) {
      var self = this, $iter = TMP_String_sub_56.$$p, block = $iter || nil;

      if ($iter) TMP_String_sub_56.$$p = null;
      
      if (!pattern.$$is_regexp) {
        pattern = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pattern, Opal.const_get_relative($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result = pattern.exec(self);

      if (result === null) {
        ($gvars["~"] = nil)
        return self.toString();
      }

      Opal.const_get_relative($nesting, 'MatchData').$new(pattern, result)

      if (replacement === undefined) {
        if (block === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (1 for 2)")
        }
        return self.slice(0, result.index) + block(result[0]) + self.slice(result.index + result[0].length);
      }

      if (replacement.$$is_hash) {
        return self.slice(0, result.index) + (replacement)['$[]'](result[0]).$to_s() + self.slice(result.index + result[0].length);
      }

      replacement = Opal.const_get_relative($nesting, 'Opal').$coerce_to(replacement, Opal.const_get_relative($nesting, 'String'), "to_str");

      replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
        if (slashes.length % 2 === 0) {
          return original;
        }
        switch (command) {
        case "+":
          for (var i = result.length - 1; i > 0; i--) {
            if (result[i] !== undefined) {
              return slashes.slice(1) + result[i];
            }
          }
          return '';
        case "&": return slashes.slice(1) + result[0];
        case "`": return slashes.slice(1) + self.slice(0, result.index);
        case "'": return slashes.slice(1) + self.slice(result.index + result[0].length);
        default:  return slashes.slice(1) + (result[command] || '');
        }
      }).replace(/\\\\/g, '\\');

      return self.slice(0, result.index) + replacement + self.slice(result.index + result[0].length);
    
    }, TMP_String_sub_56.$$arity = -2);
    Opal.alias(self, "succ", "next");
    
    Opal.defn(self, '$sum', TMP_String_sum_57 = function $$sum(n) {
      var self = this;

      if (n == null) {
        n = 16;
      }
      
      n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    
    }, TMP_String_sum_57.$$arity = -1);
    
    Opal.defn(self, '$swapcase', TMP_String_swapcase_58 = function $$swapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    }, TMP_String_swapcase_58.$$arity = 0);
    
    Opal.defn(self, '$to_f', TMP_String_to_f_59 = function $$to_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, TMP_String_to_f_59.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_String_to_i_60 = function $$to_i(base) {
      var self = this;

      if (base == null) {
        base = 10;
      }
      
      var result,
          string = self.toLowerCase(),
          radix = Opal.const_get_relative($nesting, 'Opal').$coerce_to(base, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, TMP_String_to_i_60.$$arity = -1);
    
    Opal.defn(self, '$to_proc', TMP_String_to_proc_62 = function $$to_proc() {
      var TMP_61, self = this, sym = nil;

      
      sym = self.valueOf();
      return $send(self, 'proc', [], (TMP_61 = function($a_rest){var self = TMP_61.$$s || this, block, args;

        block = TMP_61.$$p || nil;
        if (block) TMP_61.$$p = null;
        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        if (args.length === 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no receiver given")
        }
        var obj = args.shift();
        if (obj == null) obj = nil;
        return Opal.send(obj, sym, args, block);
      }, TMP_61.$$s = self, TMP_61.$$arity = -1, TMP_61));
    }, TMP_String_to_proc_62.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_String_to_s_63 = function $$to_s() {
      var self = this;

      return self.toString()
    }, TMP_String_to_s_63.$$arity = 0);
    Opal.alias(self, "to_str", "to_s");
    Opal.alias(self, "to_sym", "intern");
    
    Opal.defn(self, '$tr', TMP_String_tr_64 = function $$tr(from, to) {
      var self = this;

      
      from = Opal.const_get_relative($nesting, 'Opal').$coerce_to(from, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      to = Opal.const_get_relative($nesting, 'Opal').$coerce_to(to, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      
      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    ;
    }, TMP_String_tr_64.$$arity = 2);
    
    Opal.defn(self, '$tr_s', TMP_String_tr_s_65 = function $$tr_s(from, to) {
      var self = this;

      
      from = Opal.const_get_relative($nesting, 'Opal').$coerce_to(from, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      to = Opal.const_get_relative($nesting, 'Opal').$coerce_to(to, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      
      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    ;
    }, TMP_String_tr_s_65.$$arity = 2);
    
    Opal.defn(self, '$upcase', TMP_String_upcase_66 = function $$upcase() {
      var self = this;

      return self.toUpperCase()
    }, TMP_String_upcase_66.$$arity = 0);
    
    Opal.defn(self, '$upto', TMP_String_upto_67 = function $$upto(stop, excl) {
      var self = this, $iter = TMP_String_upto_67.$$p, block = $iter || nil;

      if (excl == null) {
        excl = false;
      }
      if ($iter) TMP_String_upto_67.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("upto", stop, excl)
      };
      stop = Opal.const_get_relative($nesting, 'Opal').$coerce_to(stop, Opal.const_get_relative($nesting, 'String'), "to_str");
      
      var a, b, s = self.toString();

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    ;
    }, TMP_String_upto_67.$$arity = -2);
    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = Opal.const_get_relative($nesting, 'Opal').$coerce_to(sets[i], Opal.const_get_relative($nesting, 'String'), "to_str");
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + Opal.const_get_relative($nesting, 'Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + Opal.const_get_relative($nesting, 'Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  ;
    
    Opal.defn(self, '$instance_variables', TMP_String_instance_variables_68 = function $$instance_variables() {
      var self = this;

      return []
    }, TMP_String_instance_variables_68.$$arity = 0);
    Opal.defs(self, '$_load', TMP_String__load_69 = function $$_load($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(self, 'new', Opal.to_a(args))
    }, TMP_String__load_69.$$arity = -1);
    return (Opal.defn(self, '$unpack', TMP_String_unpack_70 = function $$unpack(pattern) {
      var self = this, $case = nil;

      
      
      function stringToBytes(string) {
        var i,
            singleByte,
            l = string.length,
            result = [];

        for (i = 0; i < l; i++) {
          singleByte = string.charCodeAt(i);
          result.push(singleByte);
        }
        return result;
      }
    ;
      return (function() {$case = pattern;
      if ("U*"['$===']($case) || "C*"['$===']($case)) {return stringToBytes(self);}
      else {return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))}})();
    }, TMP_String_unpack_70.$$arity = 1), nil) && 'unpack';
  })($nesting[0], String, $nesting);
  return Opal.const_set($nesting[0], 'Symbol', Opal.const_get_relative($nesting, 'String'));
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $falsy = Opal.falsy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$destructure', '$to_enum', '$enumerator_size', '$new', '$yield', '$raise', '$slice_when', '$!', '$enum_for', '$flatten', '$map', '$warn', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$ceil', '$/', '$size', '$===', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$dup', '$to_a', '$lambda', '$sort!', '$map!', '$has_key?', '$values', '$zip']);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_all$q_1, TMP_Enumerable_any$q_4, TMP_Enumerable_chunk_7, TMP_Enumerable_chunk_while_10, TMP_Enumerable_collect_12, TMP_Enumerable_collect_concat_14, TMP_Enumerable_count_17, TMP_Enumerable_cycle_21, TMP_Enumerable_detect_23, TMP_Enumerable_drop_25, TMP_Enumerable_drop_while_26, TMP_Enumerable_each_cons_27, TMP_Enumerable_each_entry_29, TMP_Enumerable_each_slice_31, TMP_Enumerable_each_with_index_33, TMP_Enumerable_each_with_object_35, TMP_Enumerable_entries_37, TMP_Enumerable_find_all_38, TMP_Enumerable_find_index_40, TMP_Enumerable_first_45, TMP_Enumerable_grep_46, TMP_Enumerable_grep_v_47, TMP_Enumerable_group_by_48, TMP_Enumerable_include$q_51, TMP_Enumerable_inject_52, TMP_Enumerable_lazy_54, TMP_Enumerable_enumerator_size_55, TMP_Enumerable_max_56, TMP_Enumerable_max_by_57, TMP_Enumerable_min_59, TMP_Enumerable_min_by_60, TMP_Enumerable_minmax_62, TMP_Enumerable_minmax_by_64, TMP_Enumerable_none$q_65, TMP_Enumerable_one$q_68, TMP_Enumerable_partition_71, TMP_Enumerable_reject_73, TMP_Enumerable_reverse_each_75, TMP_Enumerable_slice_before_77, TMP_Enumerable_slice_after_79, TMP_Enumerable_slice_when_82, TMP_Enumerable_sort_84, TMP_Enumerable_sort_by_86, TMP_Enumerable_sum_91, TMP_Enumerable_take_93, TMP_Enumerable_take_while_94, TMP_Enumerable_uniq_96, TMP_Enumerable_zip_98;

    
    
    Opal.defn(self, '$all?', TMP_Enumerable_all$q_1 = function() {try {

      var TMP_2, TMP_3, self = this, $iter = TMP_Enumerable_all$q_1.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_all$q_1.$$p = null;
      
      if ((block !== nil)) {
        $send(self, 'each', [], (TMP_2 = function($a_rest){var self = TMP_2.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2))
        } else {
        $send(self, 'each', [], (TMP_3 = function($a_rest){var self = TMP_3.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.const_get_relative($nesting, 'Opal').$destructure(value))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_all$q_1.$$arity = 0);
    
    Opal.defn(self, '$any?', TMP_Enumerable_any$q_4 = function() {try {

      var TMP_5, TMP_6, self = this, $iter = TMP_Enumerable_any$q_4.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_any$q_4.$$p = null;
      
      if ((block !== nil)) {
        $send(self, 'each', [], (TMP_5 = function($a_rest){var self = TMP_5.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5))
        } else {
        $send(self, 'each', [], (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.const_get_relative($nesting, 'Opal').$destructure(value))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6))
      };
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_any$q_4.$$arity = 0);
    
    Opal.defn(self, '$chunk', TMP_Enumerable_chunk_7 = function $$chunk() {
      var TMP_8, TMP_9, self = this, $iter = TMP_Enumerable_chunk_7.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_chunk_7.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'to_enum', ["chunk"], (TMP_8 = function(){var self = TMP_8.$$s || this;

        return self.$enumerator_size()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))
      };
      return $send(Opal.const_get_qualified('::', 'Enumerator'), 'new', [], (TMP_9 = function(yielder){var self = TMP_9.$$s || this;
if (yielder == null) yielder = nil;
      
        var previous = nil, accumulate = [];

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      }, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
    }, TMP_Enumerable_chunk_7.$$arity = 0);
    
    Opal.defn(self, '$chunk_while', TMP_Enumerable_chunk_while_10 = function $$chunk_while() {
      var TMP_11, self = this, $iter = TMP_Enumerable_chunk_while_10.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_chunk_while_10.$$p = null;
      
      if ((block !== nil)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
      };
      return $send(self, 'slice_when', [], (TMP_11 = function(before, after){var self = TMP_11.$$s || this;
if (before == null) before = nil;if (after == null) after = nil;
      return Opal.yieldX(block, [before, after])['$!']()}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
    }, TMP_Enumerable_chunk_while_10.$$arity = 0);
    
    Opal.defn(self, '$collect', TMP_Enumerable_collect_12 = function $$collect() {
      var TMP_13, self = this, $iter = TMP_Enumerable_collect_12.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_collect_12.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["collect"], (TMP_13 = function(){var self = TMP_13.$$s || this;

        return self.$enumerator_size()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_collect_12.$$arity = 0);
    
    Opal.defn(self, '$collect_concat', TMP_Enumerable_collect_concat_14 = function $$collect_concat() {
      var TMP_15, TMP_16, self = this, $iter = TMP_Enumerable_collect_concat_14.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_collect_concat_14.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["collect_concat"], (TMP_15 = function(){var self = TMP_15.$$s || this;

        return self.$enumerator_size()}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15))
      };
      return $send(self, 'map', [], (TMP_16 = function(item){var self = TMP_16.$$s || this;
if (item == null) item = nil;
      return Opal.yield1(block, item);}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16)).$flatten(1);
    }, TMP_Enumerable_collect_concat_14.$$arity = 0);
    
    Opal.defn(self, '$count', TMP_Enumerable_count_17 = function $$count(object) {
      var TMP_18, TMP_19, TMP_20, self = this, $iter = TMP_Enumerable_count_17.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Enumerable_count_17.$$p = null;
      
      result = 0;
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      if ($truthy(object != null)) {
        block = $send(self, 'proc', [], (TMP_18 = function($a_rest){var self = TMP_18.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return Opal.const_get_relative($nesting, 'Opal').$destructure(args)['$=='](object)}, TMP_18.$$s = self, TMP_18.$$arity = -1, TMP_18))
      } else if ($truthy(block['$nil?']())) {
        block = $send(self, 'proc', [], (TMP_19 = function(){var self = TMP_19.$$s || this;

        return true}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19))};
      $send(self, 'each', [], (TMP_20 = function($a_rest){var self = TMP_20.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ($truthy(Opal.yieldX(block, args))) {
          return result++
          } else {
          return nil
        }}, TMP_20.$$s = self, TMP_20.$$arity = -1, TMP_20));
      return result;
    }, TMP_Enumerable_count_17.$$arity = -1);
    
    Opal.defn(self, '$cycle', TMP_Enumerable_cycle_21 = function $$cycle(n) {
      var TMP_22, self = this, $iter = TMP_Enumerable_cycle_21.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      if ($iter) TMP_Enumerable_cycle_21.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["cycle", n], (TMP_22 = function(){var self = TMP_22.$$s || this;

        if (n['$=='](nil)) {
            if ($truthy(self['$respond_to?']("size"))) {
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')
              } else {
              return nil
            }
            } else {
            
            n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22))
      };
      if ($truthy(n['$nil?']())) {
        } else {
        
        n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(n <= 0)) {
          return nil};
      };
      
      var result,
          all = [], i, length, value;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }

          n--;
        }
      }
    ;
    }, TMP_Enumerable_cycle_21.$$arity = -1);
    
    Opal.defn(self, '$detect', TMP_Enumerable_detect_23 = function $$detect(ifnone) {try {

      var TMP_24, self = this, $iter = TMP_Enumerable_detect_23.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_detect_23.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      $send(self, 'each', [], (TMP_24 = function($a_rest){var self = TMP_24.$$s || this, args, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        value = Opal.const_get_relative($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
          Opal.ret(value)
          } else {
          return nil
        };}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24));
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    ;
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_detect_23.$$arity = -1);
    
    Opal.defn(self, '$drop', TMP_Enumerable_drop_25 = function $$drop(number) {
      var self = this;

      
      number = Opal.const_get_relative($nesting, 'Opal').$coerce_to(number, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(number < 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push(Opal.const_get_relative($nesting, 'Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    ;
    }, TMP_Enumerable_drop_25.$$arity = 1);
    
    Opal.defn(self, '$drop_while', TMP_Enumerable_drop_while_26 = function $$drop_while() {
      var self = this, $iter = TMP_Enumerable_drop_while_26.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_drop_while_26.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if ($falsy(value)) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_drop_while_26.$$arity = 0);
    
    Opal.defn(self, '$each_cons', TMP_Enumerable_each_cons_27 = function $$each_cons(n) {
      var TMP_28, self = this, $iter = TMP_Enumerable_each_cons_27.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_each_cons_27.$$p = null;
      
      if ($truthy(arguments.length != 1)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = Opal.const_get_relative($nesting, 'Opal').$try_convert(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "invalid size")};
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_cons", n], (TMP_28 = function(){var self = TMP_28.$$s || this, $a, enum_size = nil;

        
          enum_size = self.$enumerator_size();
          if ($truthy(enum_size['$nil?']())) {
            return nil
          } else if ($truthy(($truthy($a = enum_size['$=='](0)) ? $a : $rb_lt(enum_size, n)))) {
            return 0
            } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28))
      };
      
      var buffer = [], result = nil;

      self.$each.$$p = function() {
        var element = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          Opal.yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_each_cons_27.$$arity = 1);
    
    Opal.defn(self, '$each_entry', TMP_Enumerable_each_entry_29 = function $$each_entry($a_rest) {
      var TMP_30, self = this, data, $iter = TMP_Enumerable_each_entry_29.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      data = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        data[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_each_entry_29.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'to_enum', ["each_entry"].concat(Opal.to_a(data)), (TMP_30 = function(){var self = TMP_30.$$s || this;

        return self.$enumerator_size()}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30))
      };
      
      self.$each.$$p = function() {
        var item = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        Opal.yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, TMP_Enumerable_each_entry_29.$$arity = -1);
    
    Opal.defn(self, '$each_slice', TMP_Enumerable_each_slice_31 = function $$each_slice(n) {
      var TMP_32, self = this, $iter = TMP_Enumerable_each_slice_31.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_each_slice_31.$$p = null;
      
      n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_slice", n], (TMP_32 = function(){var self = TMP_32.$$s || this;

        if ($truthy(self['$respond_to?']("size"))) {
            return $rb_divide(self.$size(), n).$ceil()
            } else {
            return nil
          }}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32))
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          Opal.yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        Opal.yield1(block, slice);
      }
    ;
      return nil;
    }, TMP_Enumerable_each_slice_31.$$arity = 1);
    
    Opal.defn(self, '$each_with_index', TMP_Enumerable_each_with_index_33 = function $$each_with_index($a_rest) {
      var TMP_34, self = this, args, $iter = TMP_Enumerable_each_with_index_33.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_each_with_index_33.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_with_index"].concat(Opal.to_a(args)), (TMP_34 = function(){var self = TMP_34.$$s || this;

        return self.$enumerator_size()}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    ;
      return self;
    }, TMP_Enumerable_each_with_index_33.$$arity = -1);
    
    Opal.defn(self, '$each_with_object', TMP_Enumerable_each_with_object_35 = function $$each_with_object(object) {
      var TMP_36, self = this, $iter = TMP_Enumerable_each_with_object_35.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_each_with_object_35.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_with_object", object], (TMP_36 = function(){var self = TMP_36.$$s || this;

        return self.$enumerator_size()}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36))
      };
      
      var result;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        block(param, object);
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return object;
    }, TMP_Enumerable_each_with_object_35.$$arity = 1);
    
    Opal.defn(self, '$entries', TMP_Enumerable_entries_37 = function $$entries($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      self.$each.$$p = function() {
        result.push(Opal.const_get_relative($nesting, 'Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    }, TMP_Enumerable_entries_37.$$arity = -1);
    Opal.alias(self, "find", "detect");
    
    Opal.defn(self, '$find_all', TMP_Enumerable_find_all_38 = function $$find_all() {
      var TMP_39, self = this, $iter = TMP_Enumerable_find_all_38.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_find_all_38.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["find_all"], (TMP_39 = function(){var self = TMP_39.$$s || this;

        return self.$enumerator_size()}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_find_all_38.$$arity = 0);
    
    Opal.defn(self, '$find_index', TMP_Enumerable_find_index_40 = function $$find_index(object) {try {

      var TMP_41, TMP_42, self = this, $iter = TMP_Enumerable_find_index_40.$$p, block = $iter || nil, index = nil;

      if ($iter) TMP_Enumerable_find_index_40.$$p = null;
      
      if ($truthy(object === undefined && block === nil)) {
        return self.$enum_for("find_index")};
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      index = 0;
      if ($truthy(object != null)) {
        $send(self, 'each', [], (TMP_41 = function($a_rest){var self = TMP_41.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        
          if (Opal.const_get_relative($nesting, 'Opal').$destructure(value)['$=='](object)) {
            Opal.ret(index)};
          return index += 1;}, TMP_41.$$s = self, TMP_41.$$arity = -1, TMP_41))
        } else {
        $send(self, 'each', [], (TMP_42 = function($a_rest){var self = TMP_42.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(index)};
          return index += 1;}, TMP_42.$$s = self, TMP_42.$$arity = -1, TMP_42))
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_find_index_40.$$arity = -1);
    
    Opal.defn(self, '$first', TMP_Enumerable_first_45 = function $$first(number) {try {

      var TMP_43, TMP_44, self = this, result = nil, current = nil;

      if ($truthy(number === undefined)) {
        return $send(self, 'each', [], (TMP_43 = function(value){var self = TMP_43.$$s || this;
if (value == null) value = nil;
        Opal.ret(value)}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43))
        } else {
        
        result = [];
        number = Opal.const_get_relative($nesting, 'Opal').$coerce_to(number, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(number < 0)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "attempt to take negative size")};
        if ($truthy(number == 0)) {
          return []};
        current = 0;
        $send(self, 'each', [], (TMP_44 = function($a_rest){var self = TMP_44.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        
          result.push(Opal.const_get_relative($nesting, 'Opal').$destructure(args));
          if ($truthy(number <= ++current)) {
            Opal.ret(result)
            } else {
            return nil
          };}, TMP_44.$$s = self, TMP_44.$$arity = -1, TMP_44));
        return result;
      }
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_first_45.$$arity = -1);
    Opal.alias(self, "flat_map", "collect_concat");
    
    Opal.defn(self, '$grep', TMP_Enumerable_grep_46 = function $$grep(pattern) {
      var self = this, $iter = TMP_Enumerable_grep_46.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_grep_46.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ($truthy(value)) {
            value = Opal.yield1(block, param);

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ($truthy(value)) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    
    }, TMP_Enumerable_grep_46.$$arity = 1);
    
    Opal.defn(self, '$grep_v', TMP_Enumerable_grep_v_47 = function $$grep_v(pattern) {
      var self = this, $iter = TMP_Enumerable_grep_v_47.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_grep_v_47.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ($falsy(value)) {
            value = Opal.yield1(block, param);

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ($falsy(value)) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    
    }, TMP_Enumerable_grep_v_47.$$arity = 1);
    
    Opal.defn(self, '$group_by', TMP_Enumerable_group_by_48 = function $$group_by() {
      var TMP_49, $a, self = this, $iter = TMP_Enumerable_group_by_48.$$p, block = $iter || nil, hash = nil, $writer = nil;

      if ($iter) TMP_Enumerable_group_by_48.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["group_by"], (TMP_49 = function(){var self = TMP_49.$$s || this;

        return self.$enumerator_size()}, TMP_49.$$s = self, TMP_49.$$arity = 0, TMP_49))
      };
      hash = Opal.const_get_relative($nesting, 'Hash').$new();
      
      var result;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        ($truthy($a = hash['$[]'](value)) ? $a : (($writer = [value, []]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return hash;
    }, TMP_Enumerable_group_by_48.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Enumerable_include$q_51 = function(obj) {try {

      var TMP_50, self = this;

      
      $send(self, 'each', [], (TMP_50 = function($a_rest){var self = TMP_50.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if (Opal.const_get_relative($nesting, 'Opal').$destructure(args)['$=='](obj)) {
          Opal.ret(true)
          } else {
          return nil
        }}, TMP_50.$$s = self, TMP_50.$$arity = -1, TMP_50));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_include$q_51.$$arity = 1);
    
    Opal.defn(self, '$inject', TMP_Enumerable_inject_52 = function $$inject(object, sym) {
      var self = this, $iter = TMP_Enumerable_inject_52.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_inject_52.$$p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!Opal.const_get_relative($nesting, 'Symbol')['$==='](object)) {
            self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    
    }, TMP_Enumerable_inject_52.$$arity = -1);
    
    Opal.defn(self, '$lazy', TMP_Enumerable_lazy_54 = function $$lazy() {
      var TMP_53, self = this;

      return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], (TMP_53 = function(enum$, $a_rest){var self = TMP_53.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }if (enum$ == null) enum$ = nil;
      return $send(enum$, 'yield', Opal.to_a(args))}, TMP_53.$$s = self, TMP_53.$$arity = -2, TMP_53))
    }, TMP_Enumerable_lazy_54.$$arity = 0);
    
    Opal.defn(self, '$enumerator_size', TMP_Enumerable_enumerator_size_55 = function $$enumerator_size() {
      var self = this;

      if ($truthy(self['$respond_to?']("size"))) {
        return self.$size()
        } else {
        return nil
      }
    }, TMP_Enumerable_enumerator_size_55.$$arity = 0);
    Opal.alias(self, "map", "collect");
    
    Opal.defn(self, '$max', TMP_Enumerable_max_56 = function $$max(n) {
      var self = this, $iter = TMP_Enumerable_max_56.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_max_56.$$p = null;
      
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = Opal.yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }
    ;
      n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);
    }, TMP_Enumerable_max_56.$$arity = -1);
    
    Opal.defn(self, '$max_by', TMP_Enumerable_max_by_57 = function $$max_by() {
      var TMP_58, self = this, $iter = TMP_Enumerable_max_by_57.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_max_by_57.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["max_by"], (TMP_58 = function(){var self = TMP_58.$$s || this;

        return self.$enumerator_size()}, TMP_58.$$s = self, TMP_58.$$arity = 0, TMP_58))
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, TMP_Enumerable_max_by_57.$$arity = 0);
    Opal.alias(self, "member?", "include?");
    
    Opal.defn(self, '$min', TMP_Enumerable_min_59 = function $$min() {
      var self = this, $iter = TMP_Enumerable_min_59.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_min_59.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if (Opal.const_get_relative($nesting, 'Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_Enumerable_min_59.$$arity = 0);
    
    Opal.defn(self, '$min_by', TMP_Enumerable_min_by_60 = function $$min_by() {
      var TMP_61, self = this, $iter = TMP_Enumerable_min_by_60.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_min_by_60.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["min_by"], (TMP_61 = function(){var self = TMP_61.$$s || this;

        return self.$enumerator_size()}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61))
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, TMP_Enumerable_min_by_60.$$arity = 0);
    
    Opal.defn(self, '$minmax', TMP_Enumerable_minmax_62 = function $$minmax() {
      var $a, TMP_63, self = this, $iter = TMP_Enumerable_minmax_62.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_minmax_62.$$p = null;
      
      block = ($truthy($a = block) ? $a : $send(self, 'proc', [], (TMP_63 = function(a, b){var self = TMP_63.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$<=>'](b)}, TMP_63.$$s = self, TMP_63.$$arity = 2, TMP_63)));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    ;
    }, TMP_Enumerable_minmax_62.$$arity = 0);
    
    Opal.defn(self, '$minmax_by', TMP_Enumerable_minmax_by_64 = function $$minmax_by() {
      var self = this, $iter = TMP_Enumerable_minmax_by_64.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_minmax_by_64.$$p = null;
      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
    }, TMP_Enumerable_minmax_by_64.$$arity = 0);
    
    Opal.defn(self, '$none?', TMP_Enumerable_none$q_65 = function() {try {

      var TMP_66, TMP_67, self = this, $iter = TMP_Enumerable_none$q_65.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_none$q_65.$$p = null;
      
      if ((block !== nil)) {
        $send(self, 'each', [], (TMP_66 = function($a_rest){var self = TMP_66.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_66.$$s = self, TMP_66.$$arity = -1, TMP_66))
        } else {
        $send(self, 'each', [], (TMP_67 = function($a_rest){var self = TMP_67.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.const_get_relative($nesting, 'Opal').$destructure(value))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_67.$$s = self, TMP_67.$$arity = -1, TMP_67))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_none$q_65.$$arity = 0);
    
    Opal.defn(self, '$one?', TMP_Enumerable_one$q_68 = function() {try {

      var TMP_69, TMP_70, self = this, $iter = TMP_Enumerable_one$q_68.$$p, block = $iter || nil, count = nil;

      if ($iter) TMP_Enumerable_one$q_68.$$p = null;
      
      count = 0;
      if ((block !== nil)) {
        $send(self, 'each', [], (TMP_69 = function($a_rest){var self = TMP_69.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            
            count = $rb_plus(count, 1);
            if ($truthy($rb_gt(count, 1))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_69.$$s = self, TMP_69.$$arity = -1, TMP_69))
        } else {
        $send(self, 'each', [], (TMP_70 = function($a_rest){var self = TMP_70.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.const_get_relative($nesting, 'Opal').$destructure(value))) {
            
            count = $rb_plus(count, 1);
            if ($truthy($rb_gt(count, 1))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_70.$$s = self, TMP_70.$$arity = -1, TMP_70))
      };
      return count['$=='](1);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_one$q_68.$$arity = 0);
    
    Opal.defn(self, '$partition', TMP_Enumerable_partition_71 = function $$partition() {
      var TMP_72, self = this, $iter = TMP_Enumerable_partition_71.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_partition_71.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["partition"], (TMP_72 = function(){var self = TMP_72.$$s || this;

        return self.$enumerator_size()}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72))
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    ;
    }, TMP_Enumerable_partition_71.$$arity = 0);
    Opal.alias(self, "reduce", "inject");
    
    Opal.defn(self, '$reject', TMP_Enumerable_reject_73 = function $$reject() {
      var TMP_74, self = this, $iter = TMP_Enumerable_reject_73.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_reject_73.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reject"], (TMP_74 = function(){var self = TMP_74.$$s || this;

        return self.$enumerator_size()}, TMP_74.$$s = self, TMP_74.$$arity = 0, TMP_74))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($falsy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_reject_73.$$arity = 0);
    
    Opal.defn(self, '$reverse_each', TMP_Enumerable_reverse_each_75 = function $$reverse_each() {
      var TMP_76, self = this, $iter = TMP_Enumerable_reverse_each_75.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_reverse_each_75.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reverse_each"], (TMP_76 = function(){var self = TMP_76.$$s || this;

        return self.$enumerator_size()}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76))
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    ;
    }, TMP_Enumerable_reverse_each_75.$$arity = 0);
    Opal.alias(self, "select", "find_all");
    
    Opal.defn(self, '$slice_before', TMP_Enumerable_slice_before_77 = function $$slice_before(pattern) {
      var TMP_78, self = this, $iter = TMP_Enumerable_slice_before_77.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_slice_before_77.$$p = null;
      
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      return $send(Opal.const_get_relative($nesting, 'Enumerator'), 'new', [], (TMP_78 = function(e){var self = TMP_78.$$s || this;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ($truthy(value) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      }, TMP_78.$$s = self, TMP_78.$$arity = 1, TMP_78));
    }, TMP_Enumerable_slice_before_77.$$arity = -1);
    
    Opal.defn(self, '$slice_after', TMP_Enumerable_slice_after_79 = function $$slice_after(pattern) {
      var TMP_80, TMP_81, self = this, $iter = TMP_Enumerable_slice_after_79.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_slice_after_79.$$p = null;
      
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      if ($truthy(pattern !== undefined)) {
        block = $send(self, 'proc', [], (TMP_80 = function(e){var self = TMP_80.$$s || this;
if (e == null) e = nil;
        return pattern['$==='](e)}, TMP_80.$$s = self, TMP_80.$$arity = 1, TMP_80))};
      return $send(Opal.const_get_relative($nesting, 'Enumerator'), 'new', [], (TMP_81 = function(yielder){var self = TMP_81.$$s || this;
if (yielder == null) yielder = nil;
      
        var accumulate;

        self.$each.$$p = function() {
          var element = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              end_chunk = Opal.yield1(block, element);

          if (accumulate == null) {
            accumulate = [];
          }

          if ($truthy(end_chunk)) {
            accumulate.push(element);
            yielder.$yield(accumulate);
            accumulate = null;
          } else {
            accumulate.push(element)
          }
        }

        self.$each();

        if (accumulate != null) {
          yielder.$yield(accumulate);
        }
      }, TMP_81.$$s = self, TMP_81.$$arity = 1, TMP_81));
    }, TMP_Enumerable_slice_after_79.$$arity = -1);
    
    Opal.defn(self, '$slice_when', TMP_Enumerable_slice_when_82 = function $$slice_when() {
      var TMP_83, self = this, $iter = TMP_Enumerable_slice_when_82.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_slice_when_82.$$p = null;
      
      if ((block !== nil)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1)")
      };
      return $send(Opal.const_get_relative($nesting, 'Enumerator'), 'new', [], (TMP_83 = function(yielder){var self = TMP_83.$$s || this;
if (yielder == null) yielder = nil;
      
        var slice = nil, last_after = nil;

        self.$each_cons.$$p = function() {
          var params = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              before = params[0],
              after = params[1],
              match = Opal.yieldX(block, [before, after]);

          last_after = after;

          if (slice === nil) {
            slice = [];
          }

          if ($truthy(match)) {
            slice.push(before);
            yielder.$yield(slice);
            slice = [];
          } else {
            slice.push(before);
          }
        }

        self.$each_cons(2);

        if (slice !== nil) {
          slice.push(last_after);
          yielder.$yield(slice);
        }
      }, TMP_83.$$s = self, TMP_83.$$arity = 1, TMP_83));
    }, TMP_Enumerable_slice_when_82.$$arity = 0);
    
    Opal.defn(self, '$sort', TMP_Enumerable_sort_84 = function $$sort() {
      var TMP_85, self = this, $iter = TMP_Enumerable_sort_84.$$p, block = $iter || nil, ary = nil;

      if ($iter) TMP_Enumerable_sort_84.$$p = null;
      
      ary = self.$to_a();
      if ((block !== nil)) {
        } else {
        block = $send(self, 'lambda', [], (TMP_85 = function(a, b){var self = TMP_85.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        return a['$<=>'](b)}, TMP_85.$$s = self, TMP_85.$$arity = 2, TMP_85))
      };
      return $send(ary, 'sort', [], block.$to_proc());
    }, TMP_Enumerable_sort_84.$$arity = 0);
    
    Opal.defn(self, '$sort_by', TMP_Enumerable_sort_by_86 = function $$sort_by() {
      var TMP_87, TMP_88, TMP_89, TMP_90, self = this, $iter = TMP_Enumerable_sort_by_86.$$p, block = $iter || nil, dup = nil;

      if ($iter) TMP_Enumerable_sort_by_86.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["sort_by"], (TMP_87 = function(){var self = TMP_87.$$s || this;

        return self.$enumerator_size()}, TMP_87.$$s = self, TMP_87.$$arity = 0, TMP_87))
      };
      dup = $send(self, 'map', [], (TMP_88 = function(){var self = TMP_88.$$s || this, arg = nil;

      
        arg = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);
        return [Opal.yield1(block, arg), arg];}, TMP_88.$$s = self, TMP_88.$$arity = 0, TMP_88));
      $send(dup, 'sort!', [], (TMP_89 = function(a, b){var self = TMP_89.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return (a[0])['$<=>'](b[0])}, TMP_89.$$s = self, TMP_89.$$arity = 2, TMP_89));
      return $send(dup, 'map!', [], (TMP_90 = function(i){var self = TMP_90.$$s || this;
if (i == null) i = nil;
      return i[1]}, TMP_90.$$s = self, TMP_90.$$arity = 1, TMP_90));
    }, TMP_Enumerable_sort_by_86.$$arity = 0);
    
    Opal.defn(self, '$sum', TMP_Enumerable_sum_91 = function $$sum(initial) {
      var TMP_92, self = this, $iter = TMP_Enumerable_sum_91.$$p, block = $iter || nil, result = nil;

      if (initial == null) {
        initial = 0;
      }
      if ($iter) TMP_Enumerable_sum_91.$$p = null;
      
      result = initial;
      $send(self, 'each', [], (TMP_92 = function($a_rest){var self = TMP_92.$$s || this, args, item = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        if ((block !== nil)) {
          item = $send(block, 'call', Opal.to_a(args))
          } else {
          item = Opal.const_get_relative($nesting, 'Opal').$destructure(args)
        };
        return (result = $rb_plus(result, item));}, TMP_92.$$s = self, TMP_92.$$arity = -1, TMP_92));
      return result;
    }, TMP_Enumerable_sum_91.$$arity = -1);
    
    Opal.defn(self, '$take', TMP_Enumerable_take_93 = function $$take(num) {
      var self = this;

      return self.$first(num)
    }, TMP_Enumerable_take_93.$$arity = 1);
    
    Opal.defn(self, '$take_while', TMP_Enumerable_take_while_94 = function $$take_while() {try {

      var TMP_95, self = this, $iter = TMP_Enumerable_take_while_94.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Enumerable_take_while_94.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("take_while")
      };
      result = [];
      return $send(self, 'each', [], (TMP_95 = function($a_rest){var self = TMP_95.$$s || this, args, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        value = Opal.const_get_relative($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
          } else {
          Opal.ret(result)
        };
        return result.push(value);}, TMP_95.$$s = self, TMP_95.$$arity = -1, TMP_95));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_take_while_94.$$arity = 0);
    
    Opal.defn(self, '$uniq', TMP_Enumerable_uniq_96 = function $$uniq() {
      var TMP_97, self = this, $iter = TMP_Enumerable_uniq_96.$$p, block = $iter || nil, hash = nil;

      if ($iter) TMP_Enumerable_uniq_96.$$p = null;
      
      hash = $hash2([], {});
      $send(self, 'each', [], (TMP_97 = function($a_rest){var self = TMP_97.$$s || this, args, value = nil, produced = nil, $writer = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        value = Opal.const_get_relative($nesting, 'Opal').$destructure(args);
        produced = (function() {if ((block !== nil)) {
          return block.$call(value)
          } else {
          return value
        }; return nil; })();
        if ($truthy(hash['$has_key?'](produced))) {
          return nil
          } else {
          
          $writer = [produced, value];
          $send(hash, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };}, TMP_97.$$s = self, TMP_97.$$arity = -1, TMP_97));
      return hash.$values();
    }, TMP_Enumerable_uniq_96.$$arity = 0);
    Opal.alias(self, "to_a", "entries");
    
    Opal.defn(self, '$zip', TMP_Enumerable_zip_98 = function $$zip($a_rest) {
      var self = this, others, $iter = TMP_Enumerable_zip_98.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_zip_98.$$p = null;
      return $send(self.$to_a(), 'zip', Opal.to_a(others))
    }, TMP_Enumerable_zip_98.$$arity = -1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerator_for_1, TMP_Enumerator_initialize_2, TMP_Enumerator_each_3, TMP_Enumerator_size_4, TMP_Enumerator_with_index_5, TMP_Enumerator_inspect_7;

    def.size = def.args = def.object = def.method = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    def.$$is_enumerator = true;
    Opal.defs(self, '$for', TMP_Enumerator_for_1 = function(object, method, $a_rest) {
      var self = this, args, $iter = TMP_Enumerator_for_1.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerator_for_1.$$p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    
    }, TMP_Enumerator_for_1.$$arity = -2);
    
    Opal.defn(self, '$initialize', TMP_Enumerator_initialize_2 = function $$initialize($a_rest) {
      var self = this, $iter = TMP_Enumerator_initialize_2.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerator_initialize_2.$$p = null;
      if ($truthy(block)) {
        
        self.object = $send(Opal.const_get_relative($nesting, 'Generator'), 'new', [], block.$to_proc());
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ($truthy(self.size)) {
          return (self.size = Opal.const_get_relative($nesting, 'Opal').$coerce_to(self.size, Opal.const_get_relative($nesting, 'Integer'), "to_int"))
          } else {
          return nil
        };
        } else {
        
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return (self.size = nil);
      }
    }, TMP_Enumerator_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$each', TMP_Enumerator_each_3 = function $$each($a_rest) {
      var $b, self = this, args, $iter = TMP_Enumerator_each_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerator_each_3.$$p = null;
      
      if ($truthy(($truthy($b = block['$nil?']()) ? args['$empty?']() : $b))) {
        return self};
      args = $rb_plus(self.args, args);
      if ($truthy(block['$nil?']())) {
        return $send(self.$class(), 'new', [self.object, self.method].concat(Opal.to_a(args)))};
      return $send(self.object, '__send__', [self.method].concat(Opal.to_a(args)), block.$to_proc());
    }, TMP_Enumerator_each_3.$$arity = -1);
    
    Opal.defn(self, '$size', TMP_Enumerator_size_4 = function $$size() {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Proc')['$==='](self.size))) {
        return $send(self.size, 'call', Opal.to_a(self.args))
        } else {
        return self.size
      }
    }, TMP_Enumerator_size_4.$$arity = 0);
    
    Opal.defn(self, '$with_index', TMP_Enumerator_with_index_5 = function $$with_index(offset) {
      var TMP_6, self = this, $iter = TMP_Enumerator_with_index_5.$$p, block = $iter || nil;

      if (offset == null) {
        offset = 0;
      }
      if ($iter) TMP_Enumerator_with_index_5.$$p = null;
      
      if ($truthy(offset)) {
        offset = Opal.const_get_relative($nesting, 'Opal').$coerce_to(offset, Opal.const_get_relative($nesting, 'Integer'), "to_int")
        } else {
        offset = 0
      };
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["with_index", offset], (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$size()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    ;
    }, TMP_Enumerator_with_index_5.$$arity = -1);
    Opal.alias(self, "with_object", "each_with_object");
    
    Opal.defn(self, '$inspect', TMP_Enumerator_inspect_7 = function $$inspect() {
      var self = this, result = nil;

      
      result = "" + "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ($truthy(self.args['$empty?']())) {
        } else {
        result = $rb_plus(result, "" + "(" + (self.args.$inspect()['$[]'](Opal.const_get_relative($nesting, 'Range').$new(1, -2))) + ")")
      };
      return $rb_plus(result, ">");
    }, TMP_Enumerator_inspect_7.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Generator_initialize_8, TMP_Generator_each_9;

      def.block = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
      
      Opal.defn(self, '$initialize', TMP_Generator_initialize_8 = function $$initialize() {
        var self = this, $iter = TMP_Generator_initialize_8.$$p, block = $iter || nil;

        if ($iter) TMP_Generator_initialize_8.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
        };
        return (self.block = block);
      }, TMP_Generator_initialize_8.$$arity = 0);
      return (Opal.defn(self, '$each', TMP_Generator_each_9 = function $$each($a_rest) {
        var self = this, args, $iter = TMP_Generator_each_9.$$p, block = $iter || nil, yielder = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_Generator_each_9.$$p = null;
        
        yielder = $send(Opal.const_get_relative($nesting, 'Yielder'), 'new', [], block.$to_proc());
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, TMP_Generator_each_9.$$arity = -1), nil) && 'each';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Yielder_initialize_10, TMP_Yielder_yield_11, TMP_Yielder_$lt$lt_12;

      def.block = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Yielder_initialize_10 = function $$initialize() {
        var self = this, $iter = TMP_Yielder_initialize_10.$$p, block = $iter || nil;

        if ($iter) TMP_Yielder_initialize_10.$$p = null;
        return (self.block = block)
      }, TMP_Yielder_initialize_10.$$arity = 0);
      
      Opal.defn(self, '$yield', TMP_Yielder_yield_11 = function($a_rest) {
        var self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      
      }, TMP_Yielder_yield_11.$$arity = -1);
      return (Opal.defn(self, '$<<', TMP_Yielder_$lt$lt_12 = function($a_rest) {
        var self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        $send(self, 'yield', Opal.to_a(values));
        return self;
      }, TMP_Yielder_$lt$lt_12.$$arity = -1), nil) && '<<';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Lazy_initialize_13, TMP_Lazy_lazy_16, TMP_Lazy_collect_17, TMP_Lazy_collect_concat_19, TMP_Lazy_drop_24, TMP_Lazy_drop_while_25, TMP_Lazy_enum_for_27, TMP_Lazy_find_all_28, TMP_Lazy_grep_30, TMP_Lazy_reject_33, TMP_Lazy_take_36, TMP_Lazy_take_while_37, TMP_Lazy_inspect_39;

      def.enumerator = nil;
      
      (function($base, $super, $parent_nesting) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
      
      Opal.defn(self, '$initialize', TMP_Lazy_initialize_13 = function $$initialize(object, size) {
        var TMP_14, self = this, $iter = TMP_Lazy_initialize_13.$$p, block = $iter || nil;

        if (size == null) {
          size = nil;
        }
        if ($iter) TMP_Lazy_initialize_13.$$p = null;
        
        if ((block !== nil)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Lazy_initialize_13, false), [size], (TMP_14 = function(yielder, $a_rest){var self = TMP_14.$$s || this, each_args, TMP_15;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          each_args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            each_args[$arg_idx - 1] = arguments[$arg_idx];
          }if (yielder == null) yielder = nil;
        
          try {
            return $send(object, 'each', Opal.to_a(each_args), (TMP_15 = function($a_rest){var self = TMP_15.$$s || this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              args.unshift(yielder);

              Opal.yieldX(block, args);
            }, TMP_15.$$s = self, TMP_15.$$arity = -1, TMP_15))
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };}, TMP_14.$$s = self, TMP_14.$$arity = -2, TMP_14));
      }, TMP_Lazy_initialize_13.$$arity = -2);
      Opal.alias(self, "force", "to_a");
      
      Opal.defn(self, '$lazy', TMP_Lazy_lazy_16 = function $$lazy() {
        var self = this;

        return self
      }, TMP_Lazy_lazy_16.$$arity = 0);
      
      Opal.defn(self, '$collect', TMP_Lazy_collect_17 = function $$collect() {
        var TMP_18, self = this, $iter = TMP_Lazy_collect_17.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_collect_17.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, self.$enumerator_size()], (TMP_18 = function(enum$, $a_rest){var self = TMP_18.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          enum$.$yield(value);
        }, TMP_18.$$s = self, TMP_18.$$arity = -2, TMP_18));
      }, TMP_Lazy_collect_17.$$arity = 0);
      
      Opal.defn(self, '$collect_concat', TMP_Lazy_collect_concat_19 = function $$collect_concat() {
        var TMP_20, self = this, $iter = TMP_Lazy_collect_concat_19.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_collect_concat_19.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_20 = function(enum$, $a_rest){var self = TMP_20.$$s || this, args, TMP_21, TMP_22;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            $send((value), 'each', [], (TMP_21 = function(v){var self = TMP_21.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21))
          }
          else {
            var array = Opal.const_get_relative($nesting, 'Opal').$try_convert(value, Opal.const_get_relative($nesting, 'Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              $send((value), 'each', [], (TMP_22 = function(v){var self = TMP_22.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22));
            }
          }
        }, TMP_20.$$s = self, TMP_20.$$arity = -2, TMP_20));
      }, TMP_Lazy_collect_concat_19.$$arity = 0);
      
      Opal.defn(self, '$drop', TMP_Lazy_drop_24 = function $$drop(n) {
        var TMP_23, self = this, current_size = nil, set_size = nil, dropped = nil;

        
        n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(n, 0))) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, set_size], (TMP_23 = function(enum$, $a_rest){var self = TMP_23.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ($truthy($rb_lt(dropped, n))) {
            return (dropped = $rb_plus(dropped, 1))
            } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          }}, TMP_23.$$s = self, TMP_23.$$arity = -2, TMP_23));
      }, TMP_Lazy_drop_24.$$arity = 1);
      
      Opal.defn(self, '$drop_while', TMP_Lazy_drop_while_25 = function $$drop_while() {
        var TMP_26, self = this, $iter = TMP_Lazy_drop_while_25.$$p, block = $iter || nil, succeeding = nil;

        if ($iter) TMP_Lazy_drop_while_25.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_26 = function(enum$, $a_rest){var self = TMP_26.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ($truthy(succeeding)) {
            
            var value = Opal.yieldX(block, args);

            if ($falsy(value)) {
              succeeding = false;

              $send(enum$, 'yield', Opal.to_a(args));
            }
          
            } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          }}, TMP_26.$$s = self, TMP_26.$$arity = -2, TMP_26));
      }, TMP_Lazy_drop_while_25.$$arity = 0);
      
      Opal.defn(self, '$enum_for', TMP_Lazy_enum_for_27 = function $$enum_for(method, $a_rest) {
        var self = this, args, $iter = TMP_Lazy_enum_for_27.$$p, block = $iter || nil;

        if (method == null) {
          method = "each";
        }
        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_Lazy_enum_for_27.$$p = null;
        return $send(self.$class(), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc())
      }, TMP_Lazy_enum_for_27.$$arity = -1);
      
      Opal.defn(self, '$find_all', TMP_Lazy_find_all_28 = function $$find_all() {
        var TMP_29, self = this, $iter = TMP_Lazy_find_all_28.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_find_all_28.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy select without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_29 = function(enum$, $a_rest){var self = TMP_29.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        }, TMP_29.$$s = self, TMP_29.$$arity = -2, TMP_29));
      }, TMP_Lazy_find_all_28.$$arity = 0);
      Opal.alias(self, "flat_map", "collect_concat");
      
      Opal.defn(self, '$grep', TMP_Lazy_grep_30 = function $$grep(pattern) {
        var TMP_31, TMP_32, self = this, $iter = TMP_Lazy_grep_30.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_grep_30.$$p = null;
        if ($truthy(block)) {
          return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_31 = function(enum$, $a_rest){var self = TMP_31.$$s || this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = Opal.const_get_relative($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              value = Opal.yield1(block, param);

              enum$.$yield(Opal.yield1(block, param));
            }
          }, TMP_31.$$s = self, TMP_31.$$arity = -2, TMP_31))
          } else {
          return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_32 = function(enum$, $a_rest){var self = TMP_32.$$s || this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = Opal.const_get_relative($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              enum$.$yield(param);
            }
          }, TMP_32.$$s = self, TMP_32.$$arity = -2, TMP_32))
        }
      }, TMP_Lazy_grep_30.$$arity = 1);
      Opal.alias(self, "map", "collect");
      Opal.alias(self, "select", "find_all");
      
      Opal.defn(self, '$reject', TMP_Lazy_reject_33 = function $$reject() {
        var TMP_34, self = this, $iter = TMP_Lazy_reject_33.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_reject_33.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy reject without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_34 = function(enum$, $a_rest){var self = TMP_34.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ($falsy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        }, TMP_34.$$s = self, TMP_34.$$arity = -2, TMP_34));
      }, TMP_Lazy_reject_33.$$arity = 0);
      
      Opal.defn(self, '$take', TMP_Lazy_take_36 = function $$take(n) {
        var TMP_35, self = this, current_size = nil, set_size = nil, taken = nil;

        
        n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(n, 0))) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, set_size], (TMP_35 = function(enum$, $a_rest){var self = TMP_35.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ($truthy($rb_lt(taken, n))) {
            
            $send(enum$, 'yield', Opal.to_a(args));
            return (taken = $rb_plus(taken, 1));
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'StopLazyError'))
          }}, TMP_35.$$s = self, TMP_35.$$arity = -2, TMP_35));
      }, TMP_Lazy_take_36.$$arity = 1);
      
      Opal.defn(self, '$take_while', TMP_Lazy_take_while_37 = function $$take_while() {
        var TMP_38, self = this, $iter = TMP_Lazy_take_while_37.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_take_while_37.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy take_while without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_38 = function(enum$, $a_rest){var self = TMP_38.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
          else {
            self.$raise(Opal.const_get_relative($nesting, 'StopLazyError'));
          }
        }, TMP_38.$$s = self, TMP_38.$$arity = -2, TMP_38));
      }, TMP_Lazy_take_while_37.$$arity = 0);
      Opal.alias(self, "to_enum", "enum_for");
      return (Opal.defn(self, '$inspect', TMP_Lazy_inspect_39 = function $$inspect() {
        var self = this;

        return "" + "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">"
      }, TMP_Lazy_inspect_39.$$arity = 0), nil) && 'inspect';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/numeric"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$coerce', '$===', '$raise', '$__send__', '$equal?', '$-', '$*', '$div', '$<', '$-@', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$coerce_to!', '$round', '$to_i', '$truncate', '$>']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_coerce_1, TMP_Numeric___coerced___2, TMP_Numeric_$lt$eq$gt_3, TMP_Numeric_$$_4, TMP_Numeric_$$_5, TMP_Numeric_$_6, TMP_Numeric_abs_7, TMP_Numeric_abs2_8, TMP_Numeric_angle_9, TMP_Numeric_ceil_10, TMP_Numeric_conj_11, TMP_Numeric_denominator_12, TMP_Numeric_div_13, TMP_Numeric_divmod_14, TMP_Numeric_fdiv_15, TMP_Numeric_floor_16, TMP_Numeric_i_17, TMP_Numeric_imag_18, TMP_Numeric_integer$q_19, TMP_Numeric_nonzero$q_20, TMP_Numeric_numerator_21, TMP_Numeric_polar_22, TMP_Numeric_quo_23, TMP_Numeric_real_24, TMP_Numeric_real$q_25, TMP_Numeric_rect_26, TMP_Numeric_round_27, TMP_Numeric_to_c_28, TMP_Numeric_to_int_29, TMP_Numeric_truncate_30, TMP_Numeric_zero$q_31, TMP_Numeric_positive$q_32, TMP_Numeric_negative$q_33, TMP_Numeric_dup_34, TMP_Numeric_clone_35;

    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    
    Opal.defn(self, '$coerce', TMP_Numeric_coerce_1 = function $$coerce(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    }, TMP_Numeric_coerce_1.$$arity = 1);
    
    Opal.defn(self, '$__coerced__', TMP_Numeric___coerced___2 = function $$__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      
      
      try {
        $b = other.$coerce(self), $a = Opal.to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
          try {
            $case = method;
            if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerce into Numeric")}
            else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return a.$__send__(method, b);
    }, TMP_Numeric___coerced___2.$$arity = 2);
    
    Opal.defn(self, '$<=>', TMP_Numeric_$lt$eq$gt_3 = function(other) {
      var self = this;

      
      if ($truthy(self['$equal?'](other))) {
        return 0};
      return nil;
    }, TMP_Numeric_$lt$eq$gt_3.$$arity = 1);
    
    Opal.defn(self, '$+@', TMP_Numeric_$$_4 = function() {
      var self = this;

      return self
    }, TMP_Numeric_$$_4.$$arity = 0);
    
    Opal.defn(self, '$-@', TMP_Numeric_$$_5 = function() {
      var self = this;

      return $rb_minus(0, self)
    }, TMP_Numeric_$$_5.$$arity = 0);
    
    Opal.defn(self, '$%', TMP_Numeric_$_6 = function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)))
    }, TMP_Numeric_$_6.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_Numeric_abs_7 = function $$abs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
        } else {
        return self
      }
    }, TMP_Numeric_abs_7.$$arity = 0);
    
    Opal.defn(self, '$abs2', TMP_Numeric_abs2_8 = function $$abs2() {
      var self = this;

      return $rb_times(self, self)
    }, TMP_Numeric_abs2_8.$$arity = 0);
    
    Opal.defn(self, '$angle', TMP_Numeric_angle_9 = function $$angle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Math'), 'PI')
        } else {
        return 0
      }
    }, TMP_Numeric_angle_9.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.defn(self, '$ceil', TMP_Numeric_ceil_10 = function $$ceil() {
      var self = this;

      return self.$to_f().$ceil()
    }, TMP_Numeric_ceil_10.$$arity = 0);
    
    Opal.defn(self, '$conj', TMP_Numeric_conj_11 = function $$conj() {
      var self = this;

      return self
    }, TMP_Numeric_conj_11.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.defn(self, '$denominator', TMP_Numeric_denominator_12 = function $$denominator() {
      var self = this;

      return self.$to_r().$denominator()
    }, TMP_Numeric_denominator_12.$$arity = 0);
    
    Opal.defn(self, '$div', TMP_Numeric_div_13 = function $$div(other) {
      var self = this;

      
      if (other['$=='](0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by o")};
      return $rb_divide(self, other).$floor();
    }, TMP_Numeric_div_13.$$arity = 1);
    
    Opal.defn(self, '$divmod', TMP_Numeric_divmod_14 = function $$divmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)]
    }, TMP_Numeric_divmod_14.$$arity = 1);
    
    Opal.defn(self, '$fdiv', TMP_Numeric_fdiv_15 = function $$fdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other)
    }, TMP_Numeric_fdiv_15.$$arity = 1);
    
    Opal.defn(self, '$floor', TMP_Numeric_floor_16 = function $$floor() {
      var self = this;

      return self.$to_f().$floor()
    }, TMP_Numeric_floor_16.$$arity = 0);
    
    Opal.defn(self, '$i', TMP_Numeric_i_17 = function $$i() {
      var self = this;

      return self.$Complex(0, self)
    }, TMP_Numeric_i_17.$$arity = 0);
    
    Opal.defn(self, '$imag', TMP_Numeric_imag_18 = function $$imag() {
      var self = this;

      return 0
    }, TMP_Numeric_imag_18.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.defn(self, '$integer?', TMP_Numeric_integer$q_19 = function() {
      var self = this;

      return false
    }, TMP_Numeric_integer$q_19.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.defn(self, '$nonzero?', TMP_Numeric_nonzero$q_20 = function() {
      var self = this;

      if ($truthy(self['$zero?']())) {
        return nil
        } else {
        return self
      }
    }, TMP_Numeric_nonzero$q_20.$$arity = 0);
    
    Opal.defn(self, '$numerator', TMP_Numeric_numerator_21 = function $$numerator() {
      var self = this;

      return self.$to_r().$numerator()
    }, TMP_Numeric_numerator_21.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.defn(self, '$polar', TMP_Numeric_polar_22 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, TMP_Numeric_polar_22.$$arity = 0);
    
    Opal.defn(self, '$quo', TMP_Numeric_quo_23 = function $$quo(other) {
      var self = this;

      return $rb_divide(Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](self, Opal.const_get_relative($nesting, 'Rational'), "to_r"), other)
    }, TMP_Numeric_quo_23.$$arity = 1);
    
    Opal.defn(self, '$real', TMP_Numeric_real_24 = function $$real() {
      var self = this;

      return self
    }, TMP_Numeric_real_24.$$arity = 0);
    
    Opal.defn(self, '$real?', TMP_Numeric_real$q_25 = function() {
      var self = this;

      return true
    }, TMP_Numeric_real$q_25.$$arity = 0);
    
    Opal.defn(self, '$rect', TMP_Numeric_rect_26 = function $$rect() {
      var self = this;

      return [self, 0]
    }, TMP_Numeric_rect_26.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.defn(self, '$round', TMP_Numeric_round_27 = function $$round(digits) {
      var self = this;

      return self.$to_f().$round(digits)
    }, TMP_Numeric_round_27.$$arity = -1);
    
    Opal.defn(self, '$to_c', TMP_Numeric_to_c_28 = function $$to_c() {
      var self = this;

      return self.$Complex(self, 0)
    }, TMP_Numeric_to_c_28.$$arity = 0);
    
    Opal.defn(self, '$to_int', TMP_Numeric_to_int_29 = function $$to_int() {
      var self = this;

      return self.$to_i()
    }, TMP_Numeric_to_int_29.$$arity = 0);
    
    Opal.defn(self, '$truncate', TMP_Numeric_truncate_30 = function $$truncate() {
      var self = this;

      return self.$to_f().$truncate()
    }, TMP_Numeric_truncate_30.$$arity = 0);
    
    Opal.defn(self, '$zero?', TMP_Numeric_zero$q_31 = function() {
      var self = this;

      return self['$=='](0)
    }, TMP_Numeric_zero$q_31.$$arity = 0);
    
    Opal.defn(self, '$positive?', TMP_Numeric_positive$q_32 = function() {
      var self = this;

      return $rb_gt(self, 0)
    }, TMP_Numeric_positive$q_32.$$arity = 0);
    
    Opal.defn(self, '$negative?', TMP_Numeric_negative$q_33 = function() {
      var self = this;

      return $rb_lt(self, 0)
    }, TMP_Numeric_negative$q_33.$$arity = 0);
    
    Opal.defn(self, '$dup', TMP_Numeric_dup_34 = function $$dup() {
      var self = this;

      return self
    }, TMP_Numeric_dup_34.$$arity = 0);
    return (Opal.defn(self, '$clone', TMP_Numeric_clone_35 = function $$clone($kwargs) {
      var self = this, freeze;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      }
      return self
    }, TMP_Numeric_clone_35.$$arity = -1), nil) && 'clone';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/array"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_a', '$warn', '$raise', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$===', '$join', '$to_str', '$class', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$bsearch_index', '$to_proc', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$map', '$equal?', '$dup', '$each', '$[]', '$dig', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$to_s', '$new', '$!', '$>=', '$**', '$delete_if', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$-', '$<<', '$values', '$kind_of?', '$last', '$first', '$upto', '$reject', '$pristine']);
  
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_$$_1, TMP_Array_initialize_2, TMP_Array_try_convert_3, TMP_Array_$_4, TMP_Array_$_5, TMP_Array_$_6, TMP_Array_$_7, TMP_Array_$_8, TMP_Array_$lt$lt_9, TMP_Array_$lt$eq$gt_10, TMP_Array_$eq$eq_11, TMP_Array_$$_12, TMP_Array_$$$eq_13, TMP_Array_any$q_14, TMP_Array_assoc_15, TMP_Array_at_16, TMP_Array_bsearch_index_17, TMP_Array_bsearch_18, TMP_Array_cycle_19, TMP_Array_clear_21, TMP_Array_count_22, TMP_Array_initialize_copy_23, TMP_Array_collect_24, TMP_Array_collect$B_26, TMP_Array_combination_28, TMP_Array_repeated_combination_30, TMP_Array_compact_32, TMP_Array_compact$B_33, TMP_Array_concat_36, TMP_Array_delete_37, TMP_Array_delete_at_38, TMP_Array_delete_if_39, TMP_Array_dig_41, TMP_Array_drop_42, TMP_Array_dup_43, TMP_Array_each_44, TMP_Array_each_index_46, TMP_Array_empty$q_48, TMP_Array_eql$q_49, TMP_Array_fetch_50, TMP_Array_fill_51, TMP_Array_first_52, TMP_Array_flatten_53, TMP_Array_flatten$B_54, TMP_Array_hash_55, TMP_Array_include$q_56, TMP_Array_index_57, TMP_Array_insert_58, TMP_Array_inspect_59, TMP_Array_join_60, TMP_Array_keep_if_61, TMP_Array_last_63, TMP_Array_length_64, TMP_Array_permutation_65, TMP_Array_repeated_permutation_67, TMP_Array_pop_69, TMP_Array_product_70, TMP_Array_push_71, TMP_Array_rassoc_72, TMP_Array_reject_73, TMP_Array_reject$B_75, TMP_Array_replace_77, TMP_Array_reverse_78, TMP_Array_reverse$B_79, TMP_Array_reverse_each_80, TMP_Array_rindex_82, TMP_Array_rotate_83, TMP_Array_rotate$B_84, TMP_Array_sample_87, TMP_Array_select_88, TMP_Array_select$B_90, TMP_Array_shift_92, TMP_Array_shuffle_93, TMP_Array_shuffle$B_94, TMP_Array_slice$B_95, TMP_Array_sort_96, TMP_Array_sort$B_97, TMP_Array_sort_by$B_98, TMP_Array_take_100, TMP_Array_take_while_101, TMP_Array_to_a_102, TMP_Array_to_h_103, TMP_Array_transpose_106, TMP_Array_uniq_107, TMP_Array_uniq$B_108, TMP_Array_unshift_109, TMP_Array_values_at_112, TMP_Array_zip_113, TMP_Array_inherited_114, TMP_Array_instance_variables_115;

    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    def.$$is_array = true;
    
    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }
  ;
    Opal.defs(self, '$[]', TMP_Array_$$_1 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return toArraySubclass(objects, self)
    }, TMP_Array_$$_1.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Array_initialize_2 = function $$initialize(size, obj) {
      var self = this, $iter = TMP_Array_initialize_2.$$p, block = $iter || nil;

      if (size == null) {
        size = nil;
      }
      if (obj == null) {
        obj = nil;
      }
      if ($iter) TMP_Array_initialize_2.$$p = null;
      
      if (obj !== nil && block !== nil) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (size > Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Integer'), 'MAX')) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "array size too big")
      }

      if (arguments.length > 2) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..2)")
      }

      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }

      if (arguments.length === 1) {
        if (size.$$is_array) {
          self.$replace(size.$to_a())
          return self;
        } else if (size['$respond_to?']("to_ary")) {
          self.$replace(size.$to_ary())
          return self;
        }
      }

      size = Opal.const_get_relative($nesting, 'Opal').$coerce_to(size, Opal.const_get_relative($nesting, 'Integer'), "to_int")

      if (size < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size")
      }

      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    
    }, TMP_Array_initialize_2.$$arity = -1);
    Opal.defs(self, '$try_convert', TMP_Array_try_convert_3 = function $$try_convert(obj) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](obj, Opal.const_get_relative($nesting, 'Array'), "to_ary")
    }, TMP_Array_try_convert_3.$$arity = 1);
    
    Opal.defn(self, '$&', TMP_Array_$_4 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_$_4.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Array_$_5 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        Opal.hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, TMP_Array_$_5.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Array_$_6 = function(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
        return self.$join(other.$to_str())};
      other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(other < 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative argument")};
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return toArraySubclass(result, self.$class());
    ;
    }, TMP_Array_$_6.$$arity = 1);
    
    Opal.defn(self, '$+', TMP_Array_$_7 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      return self.concat(other);
    }, TMP_Array_$_7.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Array_$_8 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(other.length === 0)) {
        return self.slice()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_$_8.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Array_$lt$lt_9 = function(object) {
      var self = this;

      
      self.push(object);;
      return self;
    }, TMP_Array_$lt$lt_9.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Array_$lt$eq$gt_10 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
      } else if ($truthy(other['$respond_to?']("to_ary"))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, TMP_Array_$lt$eq$gt_10.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Array_$eq$eq_11 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](other, "to_ary")) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.constructor !== Array)
          array = (array).$to_a();
        if (other.constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    
    }, TMP_Array_$eq$eq_11.$$arity = 1);
    
    function $array_slice_range(self, index) {
      var size = self.length,
          exclude, from, to, result;

      exclude = index.excl;
      from    = Opal.Opal.$coerce_to(index.begin, Opal.Integer, 'to_int');
      to      = Opal.Opal.$coerce_to(index.end, Opal.Integer, 'to_int');

      if (from < 0) {
        from += size;

        if (from < 0) {
          return nil;
        }
      }

      if (from > size) {
        return nil;
      }

      if (to < 0) {
        to += size;

        if (to < 0) {
          return [];
        }
      }

      if (!exclude) {
        to += 1;
      }

      result = self.slice(from, to);
      return toArraySubclass(result, self.$class());
    }

    function $array_slice_index_length(self, index, length) {
      var size = self.length,
          exclude, from, to, result;

      index = Opal.Opal.$coerce_to(index, Opal.Integer, 'to_int');

      if (index < 0) {
        index += size;

        if (index < 0) {
          return nil;
        }
      }

      if (length === undefined) {
        if (index >= size || index < 0) {
          return nil;
        }

        return self[index];
      }
      else {
        length = Opal.Opal.$coerce_to(length, Opal.Integer, 'to_int');

        if (length < 0 || index > size || index < 0) {
          return nil;
        }

        result = self.slice(index, index + length);
      }
      return toArraySubclass(result, self.$class());
    }
  ;
    
    Opal.defn(self, '$[]', TMP_Array_$$_12 = function(index, length) {
      var self = this;

      
      if (index.$$is_range) {
        return $array_slice_range(self, index);
      }
      else {
        return $array_slice_index_length(self, index, length);
      }
    
    }, TMP_Array_$$_12.$$arity = -2);
    
    Opal.defn(self, '$[]=', TMP_Array_$$$eq_13 = function(index, value, extra) {
      var self = this, data = nil, length = nil;

      
      
      var i, size = self.length;
    ;
      if ($truthy(Opal.const_get_relative($nesting, 'Range')['$==='](index))) {
        
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](value))) {
          data = value.$to_a()
        } else if ($truthy(value['$respond_to?']("to_ary"))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var exclude = index.excl,
            from    = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index.begin, Opal.const_get_relative($nesting, 'Integer'), "to_int"),
            to      = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index.end, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        
        if ($truthy(extra === undefined)) {
          length = 1
          } else {
          
          length = value;
          value = extra;
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](value))) {
            data = value.$to_a()
          } else if ($truthy(value['$respond_to?']("to_ary"))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var old;

        index  = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        length = Opal.const_get_relative($nesting, 'Opal').$coerce_to(length, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      ;
      };
    }, TMP_Array_$$$eq_13.$$arity = -3);
    
    Opal.defn(self, '$any?', TMP_Array_any$q_14 = function() {
      var self = this, $iter = TMP_Array_any$q_14.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_any$q_14.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if (self.length === 0) return false;;
      return $send(self, Opal.find_super_dispatcher(self, 'any?', TMP_Array_any$q_14, false), $zuper, $iter);
    }, TMP_Array_any$q_14.$$arity = 0);
    
    Opal.defn(self, '$assoc', TMP_Array_assoc_15 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, TMP_Array_assoc_15.$$arity = 1);
    
    Opal.defn(self, '$at', TMP_Array_at_16 = function $$at(index) {
      var self = this;

      
      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    ;
    }, TMP_Array_at_16.$$arity = 1);
    
    Opal.defn(self, '$bsearch_index', TMP_Array_bsearch_index_17 = function $$bsearch_index() {
      var self = this, $iter = TMP_Array_bsearch_index_17.$$p, block = $iter || nil;

      if ($iter) TMP_Array_bsearch_index_17.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch_index")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = Opal.yield1(block, val);

        if (ret === true) {
          satisfied = mid;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return mid; }
          smaller = (ret < 0);
        }
        else {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    ;
    }, TMP_Array_bsearch_index_17.$$arity = 0);
    
    Opal.defn(self, '$bsearch', TMP_Array_bsearch_18 = function $$bsearch() {
      var self = this, $iter = TMP_Array_bsearch_18.$$p, block = $iter || nil, index = nil;

      if ($iter) TMP_Array_bsearch_18.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch")
      };
      index = $send(self, 'bsearch_index', [], block.$to_proc());
      
      if (index != null && index.$$is_number) {
        return self[index];
      } else {
        return index;
      }
    ;
    }, TMP_Array_bsearch_18.$$arity = 0);
    
    Opal.defn(self, '$cycle', TMP_Array_cycle_19 = function $$cycle(n) {
      var TMP_20, $a, self = this, $iter = TMP_Array_cycle_19.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      if ($iter) TMP_Array_cycle_19.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["cycle", n], (TMP_20 = function(){var self = TMP_20.$$s || this;

        if (n['$=='](nil)) {
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')
            } else {
            
            n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20))
      };
      if ($truthy(($truthy($a = self['$empty?']()) ? $a : n['$=='](0)))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }
        }
      }
      else {
        n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }

          n--;
        }
      }
    ;
      return self;
    }, TMP_Array_cycle_19.$$arity = -1);
    
    Opal.defn(self, '$clear', TMP_Array_clear_21 = function $$clear() {
      var self = this;

      
      self.splice(0, self.length);
      return self;
    }, TMP_Array_clear_21.$$arity = 0);
    
    Opal.defn(self, '$count', TMP_Array_count_22 = function $$count(object) {
      var $a, self = this, $iter = TMP_Array_count_22.$$p, block = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if (object == null) {
        object = nil;
      }
      if ($iter) TMP_Array_count_22.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = object) ? $a : block))) {
        return $send(self, Opal.find_super_dispatcher(self, 'count', TMP_Array_count_22, false), $zuper, $iter)
        } else {
        return self.$size()
      }
    }, TMP_Array_count_22.$$arity = -1);
    
    Opal.defn(self, '$initialize_copy', TMP_Array_initialize_copy_23 = function $$initialize_copy(other) {
      var self = this;

      return self.$replace(other)
    }, TMP_Array_initialize_copy_23.$$arity = 1);
    
    Opal.defn(self, '$collect', TMP_Array_collect_24 = function $$collect() {
      var TMP_25, self = this, $iter = TMP_Array_collect_24.$$p, block = $iter || nil;

      if ($iter) TMP_Array_collect_24.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["collect"], (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        result.push(value);
      }

      return result;
    ;
    }, TMP_Array_collect_24.$$arity = 0);
    
    Opal.defn(self, '$collect!', TMP_Array_collect$B_26 = function() {
      var TMP_27, self = this, $iter = TMP_Array_collect$B_26.$$p, block = $iter || nil;

      if ($iter) TMP_Array_collect$B_26.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["collect!"], (TMP_27 = function(){var self = TMP_27.$$s || this;

        return self.$size()}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        self[i] = value;
      }
    ;
      return self;
    }, TMP_Array_collect$B_26.$$arity = 0);
    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  ;
    
    Opal.defn(self, '$combination', TMP_Array_combination_28 = function $$combination(n) {
      var TMP_29, self = this, $iter = TMP_Array_combination_28.$$p, $yield = $iter || nil, num = nil;

      if ($iter) TMP_Array_combination_28.$$p = null;
      
      num = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["combination", num], (TMP_29 = function(){var self = TMP_29.$$s || this;

        return binomial_coefficient(self.length, num)}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, TMP_Array_combination_28.$$arity = 1);
    
    Opal.defn(self, '$repeated_combination', TMP_Array_repeated_combination_30 = function $$repeated_combination(n) {
      var TMP_31, self = this, $iter = TMP_Array_repeated_combination_30.$$p, $yield = $iter || nil, num = nil;

      if ($iter) TMP_Array_repeated_combination_30.$$p = null;
      
      num = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["repeated_combination", num], (TMP_31 = function(){var self = TMP_31.$$s || this;

        return binomial_coefficient(self.length + num - 1, num)}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    ;
      return self;
    }, TMP_Array_repeated_combination_30.$$arity = 1);
    
    Opal.defn(self, '$compact', TMP_Array_compact_32 = function $$compact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_Array_compact_32.$$arity = 0);
    
    Opal.defn(self, '$compact!', TMP_Array_compact$B_33 = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, TMP_Array_compact$B_33.$$arity = 0);
    
    Opal.defn(self, '$concat', TMP_Array_concat_36 = function $$concat($a_rest) {
      var TMP_34, TMP_35, self = this, others;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      others = $send(others, 'map', [], (TMP_34 = function(other){var self = TMP_34.$$s || this;
if (other == null) other = nil;
      
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
          other = other.$to_a()
          } else {
          other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
        };
        if ($truthy(other['$equal?'](self))) {
          other = other.$dup()};
        return other;}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));
      $send(others, 'each', [], (TMP_35 = function(other){var self = TMP_35.$$s || this;
if (other == null) other = nil;
      
        for (var i = 0, length = other.length; i < length; i++) {
          self.push(other[i]);
        }
      }, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35));
      return self;
    }, TMP_Array_concat_36.$$arity = -1);
    
    Opal.defn(self, '$delete', TMP_Array_delete_37 = function(object) {
      var self = this, $iter = TMP_Array_delete_37.$$p, $yield = $iter || nil;

      if ($iter) TMP_Array_delete_37.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    
    }, TMP_Array_delete_37.$$arity = 1);
    
    Opal.defn(self, '$delete_at', TMP_Array_delete_at_38 = function $$delete_at(index) {
      var self = this;

      
      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    
    }, TMP_Array_delete_at_38.$$arity = 1);
    
    Opal.defn(self, '$delete_if', TMP_Array_delete_if_39 = function $$delete_if() {
      var TMP_40, self = this, $iter = TMP_Array_delete_if_39.$$p, block = $iter || nil;

      if ($iter) TMP_Array_delete_if_39.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["delete_if"], (TMP_40 = function(){var self = TMP_40.$$s || this;

        return self.$size()}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40))
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    ;
      return self;
    }, TMP_Array_delete_if_39.$$arity = 0);
    
    Opal.defn(self, '$dig', TMP_Array_dig_41 = function $$dig(idx, $a_rest) {
      var self = this, idxs, item = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      idxs = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        idxs[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      item = self['$[]'](idx);
      
      if (item === nil || idxs.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(idxs));
    }, TMP_Array_dig_41.$$arity = -2);
    
    Opal.defn(self, '$drop', TMP_Array_drop_42 = function $$drop(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'))
      }

      return self.slice(number);
    
    }, TMP_Array_drop_42.$$arity = 1);
    
    Opal.defn(self, '$dup', TMP_Array_dup_43 = function $$dup() {
      var self = this, $iter = TMP_Array_dup_43.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_dup_43.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if (
        self.$$class === Opal.Array &&
        self.$allocate.$$pristine &&
        self.$copy_instance_variables.$$pristine &&
        self.$initialize_dup.$$pristine
      ) return self.slice(0);
    ;
      return $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_Array_dup_43, false), $zuper, $iter);
    }, TMP_Array_dup_43.$$arity = 0);
    
    Opal.defn(self, '$each', TMP_Array_each_44 = function $$each() {
      var TMP_45, self = this, $iter = TMP_Array_each_44.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_44.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each"], (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$size()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
      }
    ;
      return self;
    }, TMP_Array_each_44.$$arity = 0);
    
    Opal.defn(self, '$each_index', TMP_Array_each_index_46 = function $$each_index() {
      var TMP_47, self = this, $iter = TMP_Array_each_index_46.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_index_46.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_index"], (TMP_47 = function(){var self = TMP_47.$$s || this;

        return self.$size()}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);
      }
    ;
      return self;
    }, TMP_Array_each_index_46.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Array_empty$q_48 = function() {
      var self = this;

      return self.length === 0
    }, TMP_Array_empty$q_48.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Array_eql$q_49 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, TMP_Array_eql$q_49.$$arity = 1);
    
    Opal.defn(self, '$fetch', TMP_Array_fetch_50 = function $$fetch(index, defaults) {
      var self = this, $iter = TMP_Array_fetch_50.$$p, block = $iter || nil;

      if ($iter) TMP_Array_fetch_50.$$p = null;
      
      var original = index;

      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil && defaults != null) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    
    }, TMP_Array_fetch_50.$$arity = -2);
    
    Opal.defn(self, '$fill', TMP_Array_fill_51 = function $$fill($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_Array_fill_51.$$p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Array_fill_51.$$p = null;
      
      
      var i, length, value;
    ;
      if ($truthy(block)) {
        
        if ($truthy(args.length > 2)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $c = args, $b = Opal.to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;
        } else {
        
        if ($truthy(args.length == 0)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ($truthy(args.length > 3)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $c = args, $b = Opal.to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;
      };
      if ($truthy(Opal.const_get_relative($nesting, 'Range')['$==='](one))) {
        
        if ($truthy(two)) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "length invalid with range")};
        left = Opal.const_get_relative($nesting, 'Opal').$coerce_to(one.$begin(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(left < 0)) {
          left += this.length};
        if ($truthy(left < 0)) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + (one.$inspect()) + " out of range")};
        right = Opal.const_get_relative($nesting, 'Opal').$coerce_to(one.$end(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(right < 0)) {
          right += this.length};
        if ($truthy(one['$exclude_end?']())) {
          } else {
          right += 1
        };
        if ($truthy(right <= left)) {
          return self};
      } else if ($truthy(one)) {
        
        left = Opal.const_get_relative($nesting, 'Opal').$coerce_to(one, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(left < 0)) {
          left += this.length};
        if ($truthy(left < 0)) {
          left = 0};
        if ($truthy(two)) {
          
          right = Opal.const_get_relative($nesting, 'Opal').$coerce_to(two, Opal.const_get_relative($nesting, 'Integer'), "to_int");
          if ($truthy(right == 0)) {
            return self};
          right += left;
          } else {
          right = this.length
        };
        } else {
        
        left = 0;
        right = this.length;
      };
      if ($truthy(left > this.length)) {
        
        for (i = this.length; i < right; i++) {
          self[i] = nil;
        }
      };
      if ($truthy(right > this.length)) {
        this.length = right};
      if ($truthy(block)) {
        
        for (length = this.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      
        } else {
        
        for (length = this.length; left < right; left++) {
          self[left] = obj;
        }
      
      };
      return self;
    }, TMP_Array_fill_51.$$arity = -1);
    
    Opal.defn(self, '$first', TMP_Array_first_52 = function $$first(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    
    }, TMP_Array_first_52.$$arity = -1);
    
    Opal.defn(self, '$flatten', TMP_Array_flatten_53 = function $$flatten(level) {
      var self = this;

      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](item, "to_ary")) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
          }

          if (ary === self) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = Opal.const_get_relative($nesting, 'Opal').$coerce_to(level, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      return toArraySubclass(_flatten(self, level), self.$class());
    
    }, TMP_Array_flatten_53.$$arity = -1);
    
    Opal.defn(self, '$flatten!', TMP_Array_flatten$B_54 = function(level) {
      var self = this;

      
      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, TMP_Array_flatten$B_54.$$arity = -1);
    
    Opal.defn(self, '$hash', TMP_Array_hash_55 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        // return early for recursive structures
        if (Opal.hash_ids[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, TMP_Array_hash_55.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Array_include$q_56 = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, TMP_Array_include$q_56.$$arity = 1);
    
    Opal.defn(self, '$index', TMP_Array_index_57 = function $$index(object) {
      var self = this, $iter = TMP_Array_index_57.$$p, block = $iter || nil;

      if ($iter) TMP_Array_index_57.$$p = null;
      
      var i, length, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    }, TMP_Array_index_57.$$arity = -1);
    
    Opal.defn(self, '$insert', TMP_Array_insert_58 = function $$insert(index, $a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      
      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, TMP_Array_insert_58.$$arity = -2);
    
    Opal.defn(self, '$inspect', TMP_Array_inspect_59 = function $$inspect() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_Array_inspect_59.$$arity = 0);
    
    Opal.defn(self, '$join', TMP_Array_join_60 = function $$join(sep) {
      var self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil;
      }
      
      if ($truthy(self.length === 0)) {
        return ""};
      if ($truthy(sep === nil)) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](item, "to_str")) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](item, "to_ary")) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](item, "to_s")) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise(Opal.const_get_relative($nesting, 'NoMethodError').$new("" + (Opal.inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join(Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](sep, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s());
      }
    ;
    }, TMP_Array_join_60.$$arity = -1);
    
    Opal.defn(self, '$keep_if', TMP_Array_keep_if_61 = function $$keep_if() {
      var TMP_62, self = this, $iter = TMP_Array_keep_if_61.$$p, block = $iter || nil;

      if ($iter) TMP_Array_keep_if_61.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["keep_if"], (TMP_62 = function(){var self = TMP_62.$$s || this;

        return self.$size()}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62))
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    ;
      return self;
    }, TMP_Array_keep_if_61.$$arity = 0);
    
    Opal.defn(self, '$last', TMP_Array_last_63 = function $$last(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    }, TMP_Array_last_63.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_Array_length_64 = function $$length() {
      var self = this;

      return self.length
    }, TMP_Array_length_64.$$arity = 0);
    Opal.alias(self, "map", "collect");
    Opal.alias(self, "map!", "collect!");
    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  ;
    
    Opal.defn(self, '$permutation', TMP_Array_permutation_65 = function $$permutation(num) {
      var TMP_66, self = this, $iter = TMP_Array_permutation_65.$$p, block = $iter || nil, perm = nil, used = nil;

      if ($iter) TMP_Array_permutation_65.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["permutation", num], (TMP_66 = function(){var self = TMP_66.$$s || this;

        return descending_factorial(self.length, num === undefined ? self.length : num)}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66))
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = Opal.const_get_relative($nesting, 'Opal').$coerce_to(num, Opal.const_get_relative($nesting, 'Integer'), "to_int")
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        (perm = Opal.const_get_relative($nesting, 'Array').$new(num));
        (used = Opal.const_get_relative($nesting, 'Array').$new(self.length, false));

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                Opal.yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, TMP_Array_permutation_65.$$arity = -1);
    
    Opal.defn(self, '$repeated_permutation', TMP_Array_repeated_permutation_67 = function $$repeated_permutation(n) {
      var TMP_68, self = this, $iter = TMP_Array_repeated_permutation_67.$$p, $yield = $iter || nil, num = nil;

      if ($iter) TMP_Array_repeated_permutation_67.$$p = null;
      
      num = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["repeated_permutation", num], (TMP_68 = function(){var self = TMP_68.$$s || this;

        if ($truthy($rb_ge(num, 0))) {
            return self.$size()['$**'](num)
            } else {
            return 0
          }}, TMP_68.$$s = self, TMP_68.$$arity = 0, TMP_68))
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    ;
      return self;
    }, TMP_Array_repeated_permutation_67.$$arity = 1);
    
    Opal.defn(self, '$pop', TMP_Array_pop_69 = function $$pop(count) {
      var self = this;

      
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.pop();};
      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(count < 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(count > self.length)) {
        return self.splice(0, self.length)
        } else {
        return self.splice(self.length - count, self.length)
      };
    }, TMP_Array_pop_69.$$arity = -1);
    
    Opal.defn(self, '$product', TMP_Array_product_70 = function $$product($a_rest) {
      var self = this, args, $iter = TMP_Array_product_70.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Array_product_70.$$p = null;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = Opal.const_get_relative($nesting, 'Opal').$coerce_to(args[i - 1], Opal.const_get_relative($nesting, 'Array'), "to_ary");
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    
    }, TMP_Array_product_70.$$arity = -1);
    
    Opal.defn(self, '$push', TMP_Array_push_71 = function $$push($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    ;
      return self;
    }, TMP_Array_push_71.$$arity = -1);
    
    Opal.defn(self, '$rassoc', TMP_Array_rassoc_72 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, TMP_Array_rassoc_72.$$arity = 1);
    
    Opal.defn(self, '$reject', TMP_Array_reject_73 = function $$reject() {
      var TMP_74, self = this, $iter = TMP_Array_reject_73.$$p, block = $iter || nil;

      if ($iter) TMP_Array_reject_73.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reject"], (TMP_74 = function(){var self = TMP_74.$$s || this;

        return self.$size()}, TMP_74.$$s = self, TMP_74.$$arity = 0, TMP_74))
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    ;
    }, TMP_Array_reject_73.$$arity = 0);
    
    Opal.defn(self, '$reject!', TMP_Array_reject$B_75 = function() {
      var TMP_76, self = this, $iter = TMP_Array_reject$B_75.$$p, block = $iter || nil, original = nil;

      if ($iter) TMP_Array_reject$B_75.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reject!"], (TMP_76 = function(){var self = TMP_76.$$s || this;

        return self.$size()}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76))
      };
      original = self.$length();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    }, TMP_Array_reject$B_75.$$arity = 0);
    
    Opal.defn(self, '$replace', TMP_Array_replace_77 = function $$replace(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    ;
      return self;
    }, TMP_Array_replace_77.$$arity = 1);
    
    Opal.defn(self, '$reverse', TMP_Array_reverse_78 = function $$reverse() {
      var self = this;

      return self.slice(0).reverse()
    }, TMP_Array_reverse_78.$$arity = 0);
    
    Opal.defn(self, '$reverse!', TMP_Array_reverse$B_79 = function() {
      var self = this;

      return self.reverse()
    }, TMP_Array_reverse$B_79.$$arity = 0);
    
    Opal.defn(self, '$reverse_each', TMP_Array_reverse_each_80 = function $$reverse_each() {
      var TMP_81, self = this, $iter = TMP_Array_reverse_each_80.$$p, block = $iter || nil;

      if ($iter) TMP_Array_reverse_each_80.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reverse_each"], (TMP_81 = function(){var self = TMP_81.$$s || this;

        return self.$size()}, TMP_81.$$s = self, TMP_81.$$arity = 0, TMP_81))
      };
      $send(self.$reverse(), 'each', [], block.$to_proc());
      return self;
    }, TMP_Array_reverse_each_80.$$arity = 0);
    
    Opal.defn(self, '$rindex', TMP_Array_rindex_82 = function $$rindex(object) {
      var self = this, $iter = TMP_Array_rindex_82.$$p, block = $iter || nil;

      if ($iter) TMP_Array_rindex_82.$$p = null;
      
      var i, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    }, TMP_Array_rindex_82.$$arity = -1);
    
    Opal.defn(self, '$rotate', TMP_Array_rotate_83 = function $$rotate(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      
      n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      
      var ary, idx, firstPart, lastPart;

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    ;
    }, TMP_Array_rotate_83.$$arity = -1);
    
    Opal.defn(self, '$rotate!', TMP_Array_rotate$B_84 = function(cnt) {
      var self = this, ary = nil;

      if (cnt == null) {
        cnt = 1;
      }
      
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
    ;
      cnt = Opal.const_get_relative($nesting, 'Opal').$coerce_to(cnt, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, TMP_Array_rotate$B_84.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      function $SampleRandom(){};
      var self = $SampleRandom = $klass($base, $super, 'SampleRandom', $SampleRandom);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_SampleRandom_initialize_85, TMP_SampleRandom_rand_86;

      def.rng = nil;
      
      
      Opal.defn(self, '$initialize', TMP_SampleRandom_initialize_85 = function $$initialize(rng) {
        var self = this;

        return (self.rng = rng)
      }, TMP_SampleRandom_initialize_85.$$arity = 1);
      return (Opal.defn(self, '$rand', TMP_SampleRandom_rand_86 = function $$rand(size) {
        var self = this, random = nil;

        
        random = Opal.const_get_relative($nesting, 'Opal').$coerce_to(self.rng.$rand(size), Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(random < 0)) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "random value must be >= 0")};
        if ($truthy(random < size)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "random value must be less than Array size")
        };
        return random;
      }, TMP_SampleRandom_rand_86.$$arity = 1), nil) && 'rand';
    })($nesting[0], null, $nesting);
    
    Opal.defn(self, '$sample', TMP_Array_sample_87 = function $$sample(count, options) {
      var $a, self = this, o = nil, rng = nil;

      
      if ($truthy(count === undefined)) {
        return self.$at(Opal.const_get_relative($nesting, 'Kernel').$rand(self.length))};
      if ($truthy(options === undefined)) {
        if ($truthy((o = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](count, Opal.const_get_relative($nesting, 'Hash'), "to_hash")))) {
          
          options = o;
          count = nil;
          } else {
          
          options = nil;
          count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        }
        } else {
        
        count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        options = Opal.const_get_relative($nesting, 'Opal').$coerce_to(options, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      };
      if ($truthy(($truthy($a = count) ? count < 0 : $a))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "count must be greater than 0")};
      if ($truthy(options)) {
        rng = options['$[]']("random")};
      if ($truthy(($truthy($a = rng) ? rng['$respond_to?']("rand") : $a))) {
        rng = Opal.const_get_relative($nesting, 'SampleRandom').$new(rng)
        } else {
        rng = Opal.const_get_relative($nesting, 'Kernel')
      };
      if ($truthy(count)) {
        } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = Opal.const_get_relative($nesting, 'Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    ;
    }, TMP_Array_sample_87.$$arity = -1);
    
    Opal.defn(self, '$select', TMP_Array_select_88 = function $$select() {
      var TMP_89, self = this, $iter = TMP_Array_select_88.$$p, block = $iter || nil;

      if ($iter) TMP_Array_select_88.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["select"], (TMP_89 = function(){var self = TMP_89.$$s || this;

        return self.$size()}, TMP_89.$$s = self, TMP_89.$$arity = 0, TMP_89))
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = Opal.yield1(block, item);

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_select_88.$$arity = 0);
    
    Opal.defn(self, '$select!', TMP_Array_select$B_90 = function() {
      var TMP_91, self = this, $iter = TMP_Array_select$B_90.$$p, block = $iter || nil;

      if ($iter) TMP_Array_select$B_90.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["select!"], (TMP_91 = function(){var self = TMP_91.$$s || this;

        return self.$size()}, TMP_91.$$s = self, TMP_91.$$arity = 0, TMP_91))
      };
      
      var original = self.length;
      $send(self, 'keep_if', [], block.$to_proc());
      return self.length === original ? nil : self;
    ;
    }, TMP_Array_select$B_90.$$arity = 0);
    
    Opal.defn(self, '$shift', TMP_Array_shift_92 = function $$shift(count) {
      var self = this;

      
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.shift();};
      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(count < 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      return self.splice(0, count);
    }, TMP_Array_shift_92.$$arity = -1);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$shuffle', TMP_Array_shuffle_93 = function $$shuffle(rng) {
      var self = this;

      return self.$dup().$to_a()['$shuffle!'](rng)
    }, TMP_Array_shuffle_93.$$arity = -1);
    
    Opal.defn(self, '$shuffle!', TMP_Array_shuffle$B_94 = function(rng) {
      var self = this;

      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](rng, Opal.const_get_relative($nesting, 'Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "random number too big " + (j))
          }
        }
        else {
          j = self.$rand(i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    
    }, TMP_Array_shuffle$B_94.$$arity = -1);
    Opal.alias(self, "slice", "[]");
    
    Opal.defn(self, '$slice!', TMP_Array_slice$B_95 = function(index, length) {
      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      
      result = nil;
      if ($truthy(length === undefined)) {
        if ($truthy(Opal.const_get_relative($nesting, 'Range')['$==='](index))) {
          
          range = index;
          result = self['$[]'](range);
          range_start = Opal.const_get_relative($nesting, 'Opal').$coerce_to(range.$begin(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
          range_end = Opal.const_get_relative($nesting, 'Opal').$coerce_to(range.$end(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.excl) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.excl) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        ;
          } else {
          
          start = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        ;
        }
        } else {
        
        start = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        length = Opal.const_get_relative($nesting, 'Opal').$coerce_to(length, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      ;
      };
      return result;
    }, TMP_Array_slice$B_95.$$arity = -2);
    
    Opal.defn(self, '$sort', TMP_Array_sort_96 = function $$sort() {
      var self = this, $iter = TMP_Array_sort_96.$$p, block = $iter || nil;

      if ($iter) TMP_Array_sort_96.$$p = null;
      
      if ($truthy(self.length > 1)) {
        } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, TMP_Array_sort_96.$$arity = 0);
    
    Opal.defn(self, '$sort!', TMP_Array_sort$B_97 = function() {
      var self = this, $iter = TMP_Array_sort$B_97.$$p, block = $iter || nil;

      if ($iter) TMP_Array_sort$B_97.$$p = null;
      
      var result;

      if ((block !== nil)) {
        result = $send((self.slice()), 'sort', [], block.$to_proc());
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    
    }, TMP_Array_sort$B_97.$$arity = 0);
    
    Opal.defn(self, '$sort_by!', TMP_Array_sort_by$B_98 = function() {
      var TMP_99, self = this, $iter = TMP_Array_sort_by$B_98.$$p, block = $iter || nil;

      if ($iter) TMP_Array_sort_by$B_98.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["sort_by!"], (TMP_99 = function(){var self = TMP_99.$$s || this;

        return self.$size()}, TMP_99.$$s = self, TMP_99.$$arity = 0, TMP_99))
      };
      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));
    }, TMP_Array_sort_by$B_98.$$arity = 0);
    
    Opal.defn(self, '$take', TMP_Array_take_100 = function $$take(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'));
      }

      return self.slice(0, count);
    
    }, TMP_Array_take_100.$$arity = 1);
    
    Opal.defn(self, '$take_while', TMP_Array_take_while_101 = function $$take_while() {
      var self = this, $iter = TMP_Array_take_while_101.$$p, block = $iter || nil;

      if ($iter) TMP_Array_take_while_101.$$p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    }, TMP_Array_take_while_101.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Array_to_a_102 = function $$to_a() {
      var self = this;

      return self
    }, TMP_Array_to_a_102.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    
    Opal.defn(self, '$to_h', TMP_Array_to_h_103 = function $$to_h() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](self[i], Opal.const_get_relative($nesting, 'Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        Opal.hash_put(hash, key, val);
      }

      return hash;
    
    }, TMP_Array_to_h_103.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.defn(self, '$transpose', TMP_Array_transpose_106 = function $$transpose() {
      var TMP_104, self = this, result = nil, max = nil;

      
      if ($truthy(self['$empty?']())) {
        return []};
      result = [];
      max = nil;
      $send(self, 'each', [], (TMP_104 = function(row){var self = TMP_104.$$s || this, $a, TMP_105;
if (row == null) row = nil;
      
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](row))) {
          row = row.$to_a()
          } else {
          row = Opal.const_get_relative($nesting, 'Opal').$coerce_to(row, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
        };
        max = ($truthy($a = max) ? $a : row.length);
        if ($truthy((row.length)['$!='](max))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "element size differs (" + (row.length) + " should be " + (max))};
        return $send((row.length), 'times', [], (TMP_105 = function(i){var self = TMP_105.$$s || this, $b, entry = nil, $writer = nil;
if (i == null) i = nil;
        
          entry = ($truthy($b = result['$[]'](i)) ? $b : (($writer = [i, []]), $send(result, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          return entry['$<<'](row.$at(i));}, TMP_105.$$s = self, TMP_105.$$arity = 1, TMP_105));}, TMP_104.$$s = self, TMP_104.$$arity = 1, TMP_104));
      return result;
    }, TMP_Array_transpose_106.$$arity = 0);
    
    Opal.defn(self, '$uniq', TMP_Array_uniq_107 = function $$uniq() {
      var self = this, $iter = TMP_Array_uniq_107.$$p, block = $iter || nil;

      if ($iter) TMP_Array_uniq_107.$$p = null;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if (Opal.hash_get(hash, item) === undefined) {
            Opal.hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = Opal.yield1(block, item);
          if (Opal.hash_get(hash, key) === undefined) {
            Opal.hash_put(hash, key, item);
          }
        }
      }

      return toArraySubclass((hash).$values(), self.$class());
    
    }, TMP_Array_uniq_107.$$arity = 0);
    
    Opal.defn(self, '$uniq!', TMP_Array_uniq$B_108 = function() {
      var self = this, $iter = TMP_Array_uniq$B_108.$$p, block = $iter || nil;

      if ($iter) TMP_Array_uniq$B_108.$$p = null;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : Opal.yield1(block, item));

        if (Opal.hash_get(hash, key) === undefined) {
          Opal.hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    
    }, TMP_Array_uniq$B_108.$$arity = 0);
    
    Opal.defn(self, '$unshift', TMP_Array_unshift_109 = function $$unshift($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    ;
      return self;
    }, TMP_Array_unshift_109.$$arity = -1);
    
    Opal.defn(self, '$values_at', TMP_Array_values_at_112 = function $$values_at($a_rest) {
      var TMP_110, self = this, args, out = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      out = [];
      $send(args, 'each', [], (TMP_110 = function(elem){var self = TMP_110.$$s || this, TMP_111, finish = nil, start = nil, i = nil;
if (elem == null) elem = nil;
      if ($truthy(elem['$kind_of?'](Opal.const_get_relative($nesting, 'Range')))) {
          
          finish = Opal.const_get_relative($nesting, 'Opal').$coerce_to(elem.$last(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
          start = Opal.const_get_relative($nesting, 'Opal').$coerce_to(elem.$first(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        ;
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        ;
          return $send(start, 'upto', [finish], (TMP_111 = function(i){var self = TMP_111.$$s || this;
if (i == null) i = nil;
          return out['$<<'](self.$at(i))}, TMP_111.$$s = self, TMP_111.$$arity = 1, TMP_111));
          } else {
          
          i = Opal.const_get_relative($nesting, 'Opal').$coerce_to(elem, Opal.const_get_relative($nesting, 'Integer'), "to_int");
          return out['$<<'](self.$at(i));
        }}, TMP_110.$$s = self, TMP_110.$$arity = 1, TMP_110));
      return out;
    }, TMP_Array_values_at_112.$$arity = -1);
    
    Opal.defn(self, '$zip', TMP_Array_zip_113 = function $$zip($a_rest) {
      var $b, self = this, others, $iter = TMP_Array_zip_113.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Array_zip_113.$$p = null;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = ($truthy($b = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](o, Opal.const_get_relative($nesting, 'Array'), "to_ary")) ? $b : Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](o, Opal.const_get_relative($nesting, 'Enumerator'), "each")).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }, TMP_Array_zip_113.$$arity = -1);
    Opal.defs(self, '$inherited', TMP_Array_inherited_114 = function $$inherited(klass) {
      var self = this;

      
      klass.$$proto.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, TMP_Array_inherited_114.$$arity = 1);
    
    Opal.defn(self, '$instance_variables', TMP_Array_instance_variables_115 = function $$instance_variables() {
      var TMP_116, self = this, $iter = TMP_Array_instance_variables_115.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_instance_variables_115.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send($send(self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_Array_instance_variables_115, false), $zuper, $iter), 'reject', [], (TMP_116 = function(ivar){var self = TMP_116.$$s || this, $a;
if (ivar == null) ivar = nil;
      return ($truthy($a = /^@\d+$/.test(ivar)) ? $a : ivar['$==']("@length"))}, TMP_116.$$s = self, TMP_116.$$arity = 1, TMP_116))
    }, TMP_Array_instance_variables_115.$$arity = 0);
    return Opal.const_get_relative($nesting, 'Opal').$pristine(self, "allocate", "copy_instance_variables", "initialize_dup");
  })($nesting[0], Array, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/hash"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$coerce_to!', '$each', '$fetch', '$>=', '$>', '$==', '$compare_by_identity', '$lambda?', '$abs', '$arity', '$call', '$enum_for', '$size', '$respond_to?', '$class', '$dig', '$inspect', '$map', '$to_proc', '$flatten', '$eql?', '$default', '$dup', '$default_proc', '$default_proc=', '$-', '$default=', '$alias_method', '$proc']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_$$_1, TMP_Hash_allocate_2, TMP_Hash_try_convert_3, TMP_Hash_initialize_4, TMP_Hash_$eq$eq_5, TMP_Hash_$gt$eq_7, TMP_Hash_$gt_8, TMP_Hash_$lt_9, TMP_Hash_$lt$eq_10, TMP_Hash_$$_11, TMP_Hash_$$$eq_12, TMP_Hash_assoc_13, TMP_Hash_clear_14, TMP_Hash_clone_15, TMP_Hash_compact_16, TMP_Hash_compact$B_17, TMP_Hash_compare_by_identity_18, TMP_Hash_compare_by_identity$q_19, TMP_Hash_default_20, TMP_Hash_default$eq_21, TMP_Hash_default_proc_22, TMP_Hash_default_proc$eq_23, TMP_Hash_delete_24, TMP_Hash_delete_if_25, TMP_Hash_dig_27, TMP_Hash_each_28, TMP_Hash_each_key_30, TMP_Hash_each_value_32, TMP_Hash_empty$q_34, TMP_Hash_fetch_35, TMP_Hash_fetch_values_36, TMP_Hash_flatten_38, TMP_Hash_has_key$q_39, TMP_Hash_has_value$q_40, TMP_Hash_hash_41, TMP_Hash_index_42, TMP_Hash_indexes_43, TMP_Hash_inspect_44, TMP_Hash_invert_45, TMP_Hash_keep_if_46, TMP_Hash_keys_48, TMP_Hash_length_49, TMP_Hash_merge_50, TMP_Hash_merge$B_51, TMP_Hash_rassoc_52, TMP_Hash_rehash_53, TMP_Hash_reject_54, TMP_Hash_reject$B_56, TMP_Hash_replace_58, TMP_Hash_select_59, TMP_Hash_select$B_61, TMP_Hash_shift_63, TMP_Hash_to_a_64, TMP_Hash_to_h_65, TMP_Hash_to_hash_66, TMP_Hash_to_proc_68, TMP_Hash_transform_values_69, TMP_Hash_transform_values$B_71, TMP_Hash_values_73;

    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    def.$$is_hash = true;
    Opal.defs(self, '$[]', TMP_Hash_$$_1 = function($a_rest) {
      var self = this, argv;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      argv = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        argv[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), Opal.const_get_relative($nesting, 'Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), Opal.const_get_relative($nesting, 'Array'), "to_ary");
        if (argv === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    
    }, TMP_Hash_$$_1.$$arity = -1);
    Opal.defs(self, '$allocate', TMP_Hash_allocate_2 = function $$allocate() {
      var self = this;

      
      var hash = new self.$$alloc();

      Opal.hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, TMP_Hash_allocate_2.$$arity = 0);
    Opal.defs(self, '$try_convert', TMP_Hash_try_convert_3 = function $$try_convert(obj) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](obj, Opal.const_get_relative($nesting, 'Hash'), "to_hash")
    }, TMP_Hash_try_convert_3.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Hash_initialize_4 = function $$initialize(defaults) {
      var self = this, $iter = TMP_Hash_initialize_4.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_initialize_4.$$p = null;
      
      
      if (defaults !== undefined && block !== nil) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;
    ;
      return self;
    }, TMP_Hash_initialize_4.$$arity = -1);
    
    Opal.defn(self, '$==', TMP_Hash_$eq$eq_5 = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, TMP_Hash_$eq$eq_5.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Hash_$gt$eq_7 = function(other) {
      var TMP_6, self = this, result = nil;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length < other.$$keys.length) {
        return false
      }
    ;
      result = true;
      $send(other, 'each', [], (TMP_6 = function(other_key, other_val){var self = TMP_6.$$s || this, val = nil;
if (other_key == null) other_key = nil;if (other_val == null) other_val = nil;
      
        val = self.$fetch(other_key, null);
        
        if (val == null || val !== other_val) {
          result = false;
          return;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6));
      return result;
    }, TMP_Hash_$gt$eq_7.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Hash_$gt_8 = function(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length <= other.$$keys.length) {
        return false
      }
    ;
      return $rb_ge(self, other);
    }, TMP_Hash_$gt_8.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Hash_$lt_9 = function(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      return $rb_gt(other, self);
    }, TMP_Hash_$lt_9.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Hash_$lt$eq_10 = function(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      return $rb_ge(other, self);
    }, TMP_Hash_$lt$eq_10.$$arity = 1);
    
    Opal.defn(self, '$[]', TMP_Hash_$$_11 = function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, TMP_Hash_$$_11.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Hash_$$$eq_12 = function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    }, TMP_Hash_$$$eq_12.$$arity = 2);
    
    Opal.defn(self, '$assoc', TMP_Hash_assoc_13 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, TMP_Hash_assoc_13.$$arity = 1);
    
    Opal.defn(self, '$clear', TMP_Hash_clear_14 = function $$clear() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    }, TMP_Hash_clear_14.$$arity = 0);
    
    Opal.defn(self, '$clone', TMP_Hash_clone_15 = function $$clone() {
      var self = this;

      
      var hash = new self.$$class.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_Hash_clone_15.$$arity = 0);
    
    Opal.defn(self, '$compact', TMP_Hash_compact_16 = function $$compact() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, TMP_Hash_compact_16.$$arity = 0);
    
    Opal.defn(self, '$compact!', TMP_Hash_compact$B_17 = function() {
      var self = this;

      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    }, TMP_Hash_compact$B_17.$$arity = 0);
    
    Opal.defn(self, '$compare_by_identity', TMP_Hash_compare_by_identity_18 = function $$compare_by_identity() {
      var self = this;

      
      var i, ii, key, keys = self.$$keys, identity_hash;

      if (self.$$by_identity) return self;
      if (self.$$keys.length === 0) {
        self.$$by_identity = true
        return self;
      }

      identity_hash = $hash2([], {}).$compare_by_identity();
      for(i = 0, ii = keys.length; i < ii; i++) {
        key = keys[i];
        if (!key.$$is_string) key = key.key;
        Opal.hash_put(identity_hash, key, Opal.hash_get(self, key));
      }

      self.$$by_identity = true;
      self.$$map = identity_hash.$$map;
      self.$$smap = identity_hash.$$smap;
      return self;
    
    }, TMP_Hash_compare_by_identity_18.$$arity = 0);
    
    Opal.defn(self, '$compare_by_identity?', TMP_Hash_compare_by_identity$q_19 = function() {
      var self = this;

      return self.$$by_identity === true
    }, TMP_Hash_compare_by_identity$q_19.$$arity = 0);
    
    Opal.defn(self, '$default', TMP_Hash_default_20 = function(key) {
      var self = this;

      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    
    }, TMP_Hash_default_20.$$arity = -1);
    
    Opal.defn(self, '$default=', TMP_Hash_default$eq_21 = function(object) {
      var self = this;

      
      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, TMP_Hash_default$eq_21.$$arity = 1);
    
    Opal.defn(self, '$default_proc', TMP_Hash_default_proc_22 = function $$default_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, TMP_Hash_default_proc_22.$$arity = 0);
    
    Opal.defn(self, '$default_proc=', TMP_Hash_default_proc$eq_23 = function(default_proc) {
      var self = this;

      
      var proc = default_proc;

      if (proc !== nil) {
        proc = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](proc, Opal.const_get_relative($nesting, 'Proc'), "to_proc");

        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return default_proc;
    
    }, TMP_Hash_default_proc$eq_23.$$arity = 1);
    
    Opal.defn(self, '$delete', TMP_Hash_delete_24 = function(key) {
      var self = this, $iter = TMP_Hash_delete_24.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_delete_24.$$p = null;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block.$call(key);
      }

      return nil;
    
    }, TMP_Hash_delete_24.$$arity = 1);
    
    Opal.defn(self, '$delete_if', TMP_Hash_delete_if_25 = function $$delete_if() {
      var TMP_26, self = this, $iter = TMP_Hash_delete_if_25.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_delete_if_25.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["delete_if"], (TMP_26 = function(){var self = TMP_26.$$s || this;

        return self.$size()}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, TMP_Hash_delete_if_25.$$arity = 0);
    Opal.alias(self, "dup", "clone");
    
    Opal.defn(self, '$dig', TMP_Hash_dig_27 = function $$dig(key, $a_rest) {
      var self = this, keys, item = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      keys = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        keys[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      item = self['$[]'](key);
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, TMP_Hash_dig_27.$$arity = -2);
    
    Opal.defn(self, '$each', TMP_Hash_each_28 = function $$each() {
      var TMP_29, self = this, $iter = TMP_Hash_each_28.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_each_28.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["each"], (TMP_29 = function(){var self = TMP_29.$$s || this;

        return self.$size()}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.yield1(block, [key, value]);
      }

      return self;
    ;
    }, TMP_Hash_each_28.$$arity = 0);
    
    Opal.defn(self, '$each_key', TMP_Hash_each_key_30 = function $$each_key() {
      var TMP_31, self = this, $iter = TMP_Hash_each_key_30.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_each_key_30.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["each_key"], (TMP_31 = function(){var self = TMP_31.$$s || this;

        return self.$size()}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    ;
    }, TMP_Hash_each_key_30.$$arity = 0);
    Opal.alias(self, "each_pair", "each");
    
    Opal.defn(self, '$each_value', TMP_Hash_each_value_32 = function $$each_value() {
      var TMP_33, self = this, $iter = TMP_Hash_each_value_32.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_each_value_32.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["each_value"], (TMP_33 = function(){var self = TMP_33.$$s || this;

        return self.$size()}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    ;
    }, TMP_Hash_each_value_32.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Hash_empty$q_34 = function() {
      var self = this;

      return self.$$keys.length === 0
    }, TMP_Hash_empty$q_34.$$arity = 0);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$fetch', TMP_Hash_fetch_35 = function $$fetch(key, defaults) {
      var self = this, $iter = TMP_Hash_fetch_35.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_fetch_35.$$p = null;
      
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    ;
      return self.$raise(Opal.const_get_relative($nesting, 'KeyError'), "" + "key not found: " + (key.$inspect()));
    }, TMP_Hash_fetch_35.$$arity = -2);
    
    Opal.defn(self, '$fetch_values', TMP_Hash_fetch_values_36 = function $$fetch_values($a_rest) {
      var TMP_37, self = this, keys, $iter = TMP_Hash_fetch_values_36.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      keys = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        keys[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Hash_fetch_values_36.$$p = null;
      return $send(keys, 'map', [], (TMP_37 = function(key){var self = TMP_37.$$s || this;
if (key == null) key = nil;
      return $send(self, 'fetch', [key], block.$to_proc())}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37))
    }, TMP_Hash_fetch_values_36.$$arity = -1);
    
    Opal.defn(self, '$flatten', TMP_Hash_flatten_38 = function $$flatten(level) {
      var self = this;

      if (level == null) {
        level = 1;
      }
      
      level = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](level, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, TMP_Hash_flatten_38.$$arity = -1);
    
    Opal.defn(self, '$has_key?', TMP_Hash_has_key$q_39 = function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined
    }, TMP_Hash_has_key$q_39.$$arity = 1);
    
    Opal.defn(self, '$has_value?', TMP_Hash_has_value$q_40 = function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, TMP_Hash_has_value$q_40.$$arity = 1);
    
    Opal.defn(self, '$hash', TMP_Hash_hash_41 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        if (Opal[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, TMP_Hash_hash_41.$$arity = 0);
    Opal.alias(self, "include?", "has_key?");
    
    Opal.defn(self, '$index', TMP_Hash_index_42 = function $$index(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, TMP_Hash_index_42.$$arity = 1);
    
    Opal.defn(self, '$indexes', TMP_Hash_indexes_43 = function $$indexes($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    
    }, TMP_Hash_indexes_43.$$arity = -1);
    Opal.alias(self, "indices", "indexes");
    var inspect_ids;;
    
    Opal.defn(self, '$inspect', TMP_Hash_inspect_44 = function $$inspect() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    }, TMP_Hash_inspect_44.$$arity = 0);
    
    Opal.defn(self, '$invert', TMP_Hash_invert_45 = function $$invert() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    }, TMP_Hash_invert_45.$$arity = 0);
    
    Opal.defn(self, '$keep_if', TMP_Hash_keep_if_46 = function $$keep_if() {
      var TMP_47, self = this, $iter = TMP_Hash_keep_if_46.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_keep_if_46.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["keep_if"], (TMP_47 = function(){var self = TMP_47.$$s || this;

        return self.$size()}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, TMP_Hash_keep_if_46.$$arity = 0);
    Opal.alias(self, "key", "index");
    Opal.alias(self, "key?", "has_key?");
    
    Opal.defn(self, '$keys', TMP_Hash_keys_48 = function $$keys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, TMP_Hash_keys_48.$$arity = 0);
    
    Opal.defn(self, '$length', TMP_Hash_length_49 = function $$length() {
      var self = this;

      return self.$$keys.length
    }, TMP_Hash_length_49.$$arity = 0);
    Opal.alias(self, "member?", "has_key?");
    
    Opal.defn(self, '$merge', TMP_Hash_merge_50 = function $$merge(other) {
      var self = this, $iter = TMP_Hash_merge_50.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_merge_50.$$p = null;
      return $send(self.$dup(), 'merge!', [other], block.$to_proc())
    }, TMP_Hash_merge_50.$$arity = 1);
    
    Opal.defn(self, '$merge!', TMP_Hash_merge$B_51 = function(other) {
      var self = this, $iter = TMP_Hash_merge$B_51.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_merge$B_51.$$p = null;
      
      if (!other.$$is_hash) {
        other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    
    }, TMP_Hash_merge$B_51.$$arity = 1);
    
    Opal.defn(self, '$rassoc', TMP_Hash_rassoc_52 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, TMP_Hash_rassoc_52.$$arity = 1);
    
    Opal.defn(self, '$rehash', TMP_Hash_rehash_53 = function $$rehash() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    }, TMP_Hash_rehash_53.$$arity = 0);
    
    Opal.defn(self, '$reject', TMP_Hash_reject_54 = function $$reject() {
      var TMP_55, self = this, $iter = TMP_Hash_reject_54.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_reject_54.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["reject"], (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self.$size()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, TMP_Hash_reject_54.$$arity = 0);
    
    Opal.defn(self, '$reject!', TMP_Hash_reject$B_56 = function() {
      var TMP_57, self = this, $iter = TMP_Hash_reject$B_56.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_reject$B_56.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["reject!"], (TMP_57 = function(){var self = TMP_57.$$s || this;

        return self.$size()}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57))
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    ;
    }, TMP_Hash_reject$B_56.$$arity = 0);
    
    Opal.defn(self, '$replace', TMP_Hash_replace_58 = function $$replace(other) {
      var self = this, $writer = nil;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    ;
      if ($truthy(other.$default_proc())) {
        
        $writer = [other.$default_proc()];
        $send(self, 'default_proc=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        } else {
        
        $writer = [other.$default()];
        $send(self, 'default=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return self;
    }, TMP_Hash_replace_58.$$arity = 1);
    
    Opal.defn(self, '$select', TMP_Hash_select_59 = function $$select() {
      var TMP_60, self = this, $iter = TMP_Hash_select_59.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_select_59.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["select"], (TMP_60 = function(){var self = TMP_60.$$s || this;

        return self.$size()}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, TMP_Hash_select_59.$$arity = 0);
    
    Opal.defn(self, '$select!', TMP_Hash_select$B_61 = function() {
      var TMP_62, self = this, $iter = TMP_Hash_select$B_61.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_select$B_61.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["select!"], (TMP_62 = function(){var self = TMP_62.$$s || this;

        return self.$size()}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62))
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    ;
    }, TMP_Hash_select$B_61.$$arity = 0);
    
    Opal.defn(self, '$shift', TMP_Hash_shift_63 = function $$shift() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, TMP_Hash_shift_63.$$arity = 0);
    Opal.alias(self, "size", "length");
    self.$alias_method("store", "[]=");
    
    Opal.defn(self, '$to_a', TMP_Hash_to_a_64 = function $$to_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, TMP_Hash_to_a_64.$$arity = 0);
    
    Opal.defn(self, '$to_h', TMP_Hash_to_h_65 = function $$to_h() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_Hash_to_h_65.$$arity = 0);
    
    Opal.defn(self, '$to_hash', TMP_Hash_to_hash_66 = function $$to_hash() {
      var self = this;

      return self
    }, TMP_Hash_to_hash_66.$$arity = 0);
    
    Opal.defn(self, '$to_proc', TMP_Hash_to_proc_68 = function $$to_proc() {
      var TMP_67, self = this;

      return $send(self, 'proc', [], (TMP_67 = function(key){var self = TMP_67.$$s || this;

      
        
        if (key == null) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no key given")
        }
      ;
        return self['$[]'](key);}, TMP_67.$$s = self, TMP_67.$$arity = -1, TMP_67))
    }, TMP_Hash_to_proc_68.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.defn(self, '$transform_values', TMP_Hash_transform_values_69 = function $$transform_values() {
      var TMP_70, self = this, $iter = TMP_Hash_transform_values_69.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_transform_values_69.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["transform_values"], (TMP_70 = function(){var self = TMP_70.$$s || this;

        return self.$size()}, TMP_70.$$s = self, TMP_70.$$arity = 0, TMP_70))
      };
      
      var result = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = Opal.yield1(block, value);

        Opal.hash_put(result, key, value);
      }

      return result;
    ;
    }, TMP_Hash_transform_values_69.$$arity = 0);
    
    Opal.defn(self, '$transform_values!', TMP_Hash_transform_values$B_71 = function() {
      var TMP_72, self = this, $iter = TMP_Hash_transform_values$B_71.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_transform_values$B_71.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["transform_values!"], (TMP_72 = function(){var self = TMP_72.$$s || this;

        return self.$size()}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = Opal.yield1(block, value);

        Opal.hash_put(self, key, value);
      }

      return self;
    ;
    }, TMP_Hash_transform_values$B_71.$$arity = 0);
    Opal.alias(self, "update", "merge!");
    Opal.alias(self, "value?", "has_value?");
    Opal.alias(self, "values_at", "indexes");
    return (Opal.defn(self, '$values', TMP_Hash_values_73 = function $$values() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, TMP_Hash_values_73.$$arity = 0), nil) && 'values';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/number"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$name', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$-@', '$size', '$<=', '$>=', '$<=>', '$compare', '$empty?']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Number_coerce_2, TMP_Number___id___3, TMP_Number_$_4, TMP_Number_$_5, TMP_Number_$_6, TMP_Number_$_7, TMP_Number_$_8, TMP_Number_$_9, TMP_Number_$_10, TMP_Number_$_11, TMP_Number_$lt_12, TMP_Number_$lt$eq_13, TMP_Number_$gt_14, TMP_Number_$gt$eq_15, TMP_Number_$lt$eq$gt_16, TMP_Number_$lt$lt_17, TMP_Number_$gt$gt_18, TMP_Number_$$_19, TMP_Number_$$_20, TMP_Number_$$_21, TMP_Number_$_22, TMP_Number_$$_23, TMP_Number_$eq$eq$eq_24, TMP_Number_$eq$eq_25, TMP_Number_abs_26, TMP_Number_abs2_27, TMP_Number_angle_28, TMP_Number_bit_length_29, TMP_Number_ceil_30, TMP_Number_chr_31, TMP_Number_denominator_32, TMP_Number_downto_33, TMP_Number_equal$q_35, TMP_Number_even$q_36, TMP_Number_floor_37, TMP_Number_gcd_38, TMP_Number_gcdlcm_39, TMP_Number_integer$q_40, TMP_Number_is_a$q_41, TMP_Number_instance_of$q_42, TMP_Number_lcm_43, TMP_Number_next_44, TMP_Number_nonzero$q_45, TMP_Number_numerator_46, TMP_Number_odd$q_47, TMP_Number_ord_48, TMP_Number_pred_49, TMP_Number_quo_50, TMP_Number_rationalize_51, TMP_Number_round_52, TMP_Number_step_53, TMP_Number_times_55, TMP_Number_to_f_57, TMP_Number_to_i_58, TMP_Number_to_r_59, TMP_Number_to_s_60, TMP_Number_divmod_61, TMP_Number_upto_62, TMP_Number_zero$q_64, TMP_Number_size_65, TMP_Number_nan$q_66, TMP_Number_finite$q_67, TMP_Number_infinite$q_68, TMP_Number_positive$q_69, TMP_Number_negative$q_70;

    
    Opal.const_get_relative($nesting, 'Opal').$bridge(self, Number);
    Number.prototype.$$is_number = true;
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_allocate_1;

      
      
      Opal.defn(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var self = this;

        return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.defn(self, '$coerce', TMP_Number_coerce_2 = function $$coerce(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
    
    }, TMP_Number_coerce_2.$$arity = 1);
    
    Opal.defn(self, '$__id__', TMP_Number___id___3 = function $$__id__() {
      var self = this;

      return (self * 2) + 1
    }, TMP_Number___id___3.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.defn(self, '$+', TMP_Number_$_4 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, TMP_Number_$_4.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Number_$_5 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, TMP_Number_$_5.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Number_$_6 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, TMP_Number_$_6.$$arity = 1);
    
    Opal.defn(self, '$/', TMP_Number_$_7 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, TMP_Number_$_7.$$arity = 1);
    Opal.alias(self, "fdiv", "/");
    
    Opal.defn(self, '$%', TMP_Number_$_8 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, TMP_Number_$_8.$$arity = 1);
    
    Opal.defn(self, '$&', TMP_Number_$_9 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, TMP_Number_$_9.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Number_$_10 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, TMP_Number_$_10.$$arity = 1);
    
    Opal.defn(self, '$^', TMP_Number_$_11 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, TMP_Number_$_11.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Number_$lt_12 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, TMP_Number_$lt_12.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Number_$lt$eq_13 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, TMP_Number_$lt$eq_13.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Number_$gt_14 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, TMP_Number_$gt_14.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Number_$gt$eq_15 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, TMP_Number_$gt$eq_15.$$arity = 1);
    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  ;
    
    Opal.defn(self, '$<=>', TMP_Number_$lt$eq$gt_16 = function(other) {
      var self = this;

      try {
        
      return spaceship_operator(self, other);
    
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Number_$lt$eq$gt_16.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Number_$lt$lt_17 = function(count) {
      var self = this;

      
      count = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, TMP_Number_$lt$lt_17.$$arity = 1);
    
    Opal.defn(self, '$>>', TMP_Number_$gt$gt_18 = function(count) {
      var self = this;

      
      count = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, TMP_Number_$gt$gt_18.$$arity = 1);
    
    Opal.defn(self, '$[]', TMP_Number_$$_19 = function(bit) {
      var self = this;

      
      bit = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](bit, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, TMP_Number_$$_19.$$arity = 1);
    
    Opal.defn(self, '$+@', TMP_Number_$$_20 = function() {
      var self = this;

      return +self
    }, TMP_Number_$$_20.$$arity = 0);
    
    Opal.defn(self, '$-@', TMP_Number_$$_21 = function() {
      var self = this;

      return -self
    }, TMP_Number_$$_21.$$arity = 0);
    
    Opal.defn(self, '$~', TMP_Number_$_22 = function() {
      var self = this;

      return ~self
    }, TMP_Number_$_22.$$arity = 0);
    
    Opal.defn(self, '$**', TMP_Number_$$_23 = function(other) {
      var $a, $b, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](other))) {
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Integer')['$==='](self)['$!']()) ? $a : $rb_gt(other, 0)))) {
          return Math.pow(self, other)
          } else {
          return Opal.const_get_relative($nesting, 'Rational').$new(self, 1)['$**'](other)
        }
      } else if ($truthy((($a = $rb_lt(self, 0)) ? ($truthy($b = Opal.const_get_relative($nesting, 'Float')['$==='](other)) ? $b : Opal.const_get_relative($nesting, 'Rational')['$==='](other)) : $rb_lt(self, 0)))) {
        return Opal.const_get_relative($nesting, 'Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ($truthy(other.$$is_number != null)) {
        return Math.pow(self, other)
        } else {
        return self.$__coerced__("**", other)
      }
    }, TMP_Number_$$_23.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_Number_$eq$eq$eq_24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, TMP_Number_$eq$eq$eq_24.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Number_$eq$eq_25 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, TMP_Number_$eq$eq_25.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_Number_abs_26 = function $$abs() {
      var self = this;

      return Math.abs(self)
    }, TMP_Number_abs_26.$$arity = 0);
    
    Opal.defn(self, '$abs2', TMP_Number_abs2_27 = function $$abs2() {
      var self = this;

      return Math.abs(self * self)
    }, TMP_Number_abs2_27.$$arity = 0);
    
    Opal.defn(self, '$angle', TMP_Number_angle_28 = function $$angle() {
      var self = this;

      
      if ($truthy(self['$nan?']())) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    ;
    }, TMP_Number_angle_28.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    Opal.alias(self, "phase", "angle");
    
    Opal.defn(self, '$bit_length', TMP_Number_bit_length_29 = function $$bit_length() {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'NoMethodError').$new("" + "undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    ;
    }, TMP_Number_bit_length_29.$$arity = 0);
    
    Opal.defn(self, '$ceil', TMP_Number_ceil_30 = function $$ceil() {
      var self = this;

      return Math.ceil(self)
    }, TMP_Number_ceil_30.$$arity = 0);
    
    Opal.defn(self, '$chr', TMP_Number_chr_31 = function $$chr(encoding) {
      var self = this;

      return String.fromCharCode(self)
    }, TMP_Number_chr_31.$$arity = -1);
    
    Opal.defn(self, '$denominator', TMP_Number_denominator_32 = function $$denominator() {
      var $a, self = this, $iter = TMP_Number_denominator_32.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_denominator_32.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return 1
        } else {
        return $send(self, Opal.find_super_dispatcher(self, 'denominator', TMP_Number_denominator_32, false), $zuper, $iter)
      }
    }, TMP_Number_denominator_32.$$arity = 0);
    
    Opal.defn(self, '$downto', TMP_Number_downto_33 = function $$downto(stop) {
      var TMP_34, self = this, $iter = TMP_Number_downto_33.$$p, block = $iter || nil;

      if ($iter) TMP_Number_downto_33.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["downto", stop], (TMP_34 = function(){var self = TMP_34.$$s || this;

        
          if ($truthy(Opal.const_get_relative($nesting, 'Numeric')['$==='](stop))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_gt(stop, self))) {
            return 0
            } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))
      };
      
      if (!stop.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_downto_33.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$equal?', TMP_Number_equal$q_35 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$=='](other)) ? $a : isNaN(self) && isNaN(other))
    }, TMP_Number_equal$q_35.$$arity = 1);
    
    Opal.defn(self, '$even?', TMP_Number_even$q_36 = function() {
      var self = this;

      return self % 2 === 0
    }, TMP_Number_even$q_36.$$arity = 0);
    
    Opal.defn(self, '$floor', TMP_Number_floor_37 = function $$floor() {
      var self = this;

      return Math.floor(self)
    }, TMP_Number_floor_37.$$arity = 0);
    
    Opal.defn(self, '$gcd', TMP_Number_gcd_38 = function $$gcd(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    ;
    }, TMP_Number_gcd_38.$$arity = 1);
    
    Opal.defn(self, '$gcdlcm', TMP_Number_gcdlcm_39 = function $$gcdlcm(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()]
    }, TMP_Number_gcdlcm_39.$$arity = 1);
    
    Opal.defn(self, '$integer?', TMP_Number_integer$q_40 = function() {
      var self = this;

      return self % 1 === 0
    }, TMP_Number_integer$q_40.$$arity = 0);
    
    Opal.defn(self, '$is_a?', TMP_Number_is_a$q_41 = function(klass) {
      var $a, self = this, $iter = TMP_Number_is_a$q_41.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_is_a$q_41.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Fixnum'))) ? Opal.const_get_relative($nesting, 'Integer')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Fixnum'))))) {
        return true};
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Integer'))) ? Opal.const_get_relative($nesting, 'Integer')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Float'))) ? Opal.const_get_relative($nesting, 'Float')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Float'))))) {
        return true};
      return $send(self, Opal.find_super_dispatcher(self, 'is_a?', TMP_Number_is_a$q_41, false), $zuper, $iter);
    }, TMP_Number_is_a$q_41.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$instance_of?', TMP_Number_instance_of$q_42 = function(klass) {
      var $a, self = this, $iter = TMP_Number_instance_of$q_42.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_instance_of$q_42.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Fixnum'))) ? Opal.const_get_relative($nesting, 'Integer')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Fixnum'))))) {
        return true};
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Integer'))) ? Opal.const_get_relative($nesting, 'Integer')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Float'))) ? Opal.const_get_relative($nesting, 'Float')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Float'))))) {
        return true};
      return $send(self, Opal.find_super_dispatcher(self, 'instance_of?', TMP_Number_instance_of$q_42, false), $zuper, $iter);
    }, TMP_Number_instance_of$q_42.$$arity = 1);
    
    Opal.defn(self, '$lcm', TMP_Number_lcm_43 = function $$lcm(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    ;
    }, TMP_Number_lcm_43.$$arity = 1);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.defn(self, '$next', TMP_Number_next_44 = function $$next() {
      var self = this;

      return self + 1
    }, TMP_Number_next_44.$$arity = 0);
    
    Opal.defn(self, '$nonzero?', TMP_Number_nonzero$q_45 = function() {
      var self = this;

      return self == 0 ? nil : self
    }, TMP_Number_nonzero$q_45.$$arity = 0);
    
    Opal.defn(self, '$numerator', TMP_Number_numerator_46 = function $$numerator() {
      var $a, self = this, $iter = TMP_Number_numerator_46.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_numerator_46.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return self
        } else {
        return $send(self, Opal.find_super_dispatcher(self, 'numerator', TMP_Number_numerator_46, false), $zuper, $iter)
      }
    }, TMP_Number_numerator_46.$$arity = 0);
    
    Opal.defn(self, '$odd?', TMP_Number_odd$q_47 = function() {
      var self = this;

      return self % 2 !== 0
    }, TMP_Number_odd$q_47.$$arity = 0);
    
    Opal.defn(self, '$ord', TMP_Number_ord_48 = function $$ord() {
      var self = this;

      return self
    }, TMP_Number_ord_48.$$arity = 0);
    
    Opal.defn(self, '$pred', TMP_Number_pred_49 = function $$pred() {
      var self = this;

      return self - 1
    }, TMP_Number_pred_49.$$arity = 0);
    
    Opal.defn(self, '$quo', TMP_Number_quo_50 = function $$quo(other) {
      var self = this, $iter = TMP_Number_quo_50.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_quo_50.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        return $send(self, Opal.find_super_dispatcher(self, 'quo', TMP_Number_quo_50, false), $zuper, $iter)
        } else {
        return $rb_divide(self, other)
      }
    }, TMP_Number_quo_50.$$arity = 1);
    
    Opal.defn(self, '$rationalize', TMP_Number_rationalize_51 = function $$rationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      
      if (arguments.length > 1) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        return Opal.const_get_relative($nesting, 'Rational').$new(self, 1)
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Infinity")
      } else if ($truthy(self['$nan?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(eps == null)) {
        
        $b = Opal.const_get_relative($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;
        f = Opal.const_get_relative($nesting, 'Math').$ldexp(f, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'MANT_DIG')).$to_i();
        n = $rb_minus(n, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'MANT_DIG'));
        return Opal.const_get_relative($nesting, 'Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize(Opal.const_get_relative($nesting, 'Rational').$new(1, (1)['$<<']($rb_minus(1, n))));
        } else {
        return self.$to_r().$rationalize(eps)
      };
    }, TMP_Number_rationalize_51.$$arity = -1);
    
    Opal.defn(self, '$round', TMP_Number_round_52 = function $$round(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        
        if ($truthy(ndigits == null)) {
          return self};
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Float')['$==='](ndigits)) ? ndigits['$infinite?']() : $a))) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "Infinity")};
        ndigits = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](ndigits, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(ndigits, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Integer'), 'MIN')))) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "out of bounds")};
        if ($truthy(ndigits >= 0)) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(x) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
        } else {
        
        if ($truthy(($truthy($a = self['$nan?']()) ? ndigits == null : $a))) {
          self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "NaN")};
        ndigits = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](ndigits || 0, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy($rb_le(ndigits, 0))) {
          if ($truthy(self['$nan?']())) {
            self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "NaN")
          } else if ($truthy(self['$infinite?']())) {
            self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
          return self};
        $b = Opal.const_get_relative($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'DIG'), 2), (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_divide(exp, 4)
          } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) {
          return self};
        if ($truthy($rb_lt(ndigits, (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_plus($rb_divide(exp, 3), 1)
          } else {
          return $rb_divide(exp, 4)
        }; return nil; })()['$-@']()))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);
      }
    }, TMP_Number_round_52.$$arity = -1);
    
    Opal.defn(self, '$step', TMP_Number_step_53 = function $$step($limit, $step, $kwargs) {
      var TMP_54, self = this, $post_args, to, by, limit, step, $iter = TMP_Number_step_53.$$p, block = $iter || nil, positional_args = nil, keyword_args = nil;

      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      $kwargs = Opal.extract_kwargs($post_args);
      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      to = $kwargs.$$smap["to"];
      by = $kwargs.$$smap["by"];
      if (0 < $post_args.length) {
        limit = $post_args.splice(0,1)[0];
      }
      if (0 < $post_args.length) {
        step = $post_args.splice(0,1)[0];
      }
      if ($iter) TMP_Number_step_53.$$p = null;
      
      
      if (limit !== undefined && to !== undefined) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "to is given twice")
      }

      if (step !== undefined && by !== undefined) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step is given twice")
      }

      function validateParameters() {
        if (to !== undefined) {
          limit = to;
        }

        if (limit === undefined) {
          limit = nil;
        }

        if (step === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "step must be numeric")
        }

        if (step === 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step can't be 0")
        }

        if (by !== undefined) {
          step = by;
        }

        if (step === nil || step == null) {
          step = 1;
        }

        var sign = step['$<=>'](0);

        if (sign === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "0 can't be coerced into " + (step.$class()))
        }

        if (limit === nil || limit == null) {
          limit = sign > 0 ? Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY') : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')['$-@']();
        }

        Opal.const_get_relative($nesting, 'Opal').$compare(self, limit)
      }

      function stepFloatSize() {
        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else if (step === Infinity || step === -Infinity) {
          return 1;
        } else {
          var abs = Math.abs, floor = Math.floor,
              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'EPSILON');

          if (err === Infinity || err === -Infinity) {
            return 0;
          } else {
            if (err > 0.5) {
              err = 0.5;
            }

            return floor((limit - self) / step + err) + 1
          }
        }
      }

      function stepSize() {
        validateParameters();

        if (step === 0) {
          return Infinity;
        }

        if (step % 1 !== 0) {
          return stepFloatSize();
        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else {
          var ceil = Math.ceil, abs = Math.abs,
              lhs = abs(self - limit) + 1,
              rhs = abs(step);

          return ceil(lhs / rhs);
        }
      }
    ;
      if ((block !== nil)) {
        } else {
        
        positional_args = [];
        keyword_args = $hash2([], {});
        
        if (limit !== undefined) {
          positional_args.push(limit);
        }

        if (step !== undefined) {
          positional_args.push(step);
        }

        if (to !== undefined) {
          Opal.hash_put(keyword_args, "to", to);
        }

        if (by !== undefined) {
          Opal.hash_put(keyword_args, "by", by);
        }

        if (!keyword_args['$empty?']()) {
          positional_args.push(keyword_args);
        }
      ;
        return $send(self, 'enum_for', ["step"].concat(Opal.to_a(positional_args)), (TMP_54 = function(){var self = TMP_54.$$s || this;

        return stepSize()}, TMP_54.$$s = self, TMP_54.$$arity = 0, TMP_54));
      };
      
      validateParameters();

      if (step === 0) {
        while (true) {
          block(self);
        }
      }

      if (self % 1 !== 0 || limit % 1 !== 0 || step % 1 !== 0) {
        var n = stepFloatSize();

        if (n > 0) {
          if (step === Infinity || step === -Infinity) {
            block(self);
          } else {
            var i = 0, d;

            if (step > 0) {
              while (i < n) {
                d = i * step + self;
                if (limit < d) {
                  d = limit;
                }
                block(d);
                i += 1;
              }
            } else {
              while (i < n) {
                d = i * step + self;
                if (limit > d) {
                  d = limit;
                }
                block(d);
                i += 1
              }
            }
          }
        }
      } else {
        var value = self;

        if (step > 0) {
          while (value <= limit) {
            block(value);
            value += step;
          }
        } else {
          while (value >= limit) {
            block(value);
            value += step
          }
        }
      }

      return self;
    ;
    }, TMP_Number_step_53.$$arity = -1);
    Opal.alias(self, "succ", "next");
    
    Opal.defn(self, '$times', TMP_Number_times_55 = function $$times() {
      var TMP_56, self = this, $iter = TMP_Number_times_55.$$p, block = $iter || nil;

      if ($iter) TMP_Number_times_55.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["times"], (TMP_56 = function(){var self = TMP_56.$$s || this;

        return self}, TMP_56.$$s = self, TMP_56.$$arity = 0, TMP_56))
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_times_55.$$arity = 0);
    
    Opal.defn(self, '$to_f', TMP_Number_to_f_57 = function $$to_f() {
      var self = this;

      return self
    }, TMP_Number_to_f_57.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_Number_to_i_58 = function $$to_i() {
      var self = this;

      return parseInt(self, 10)
    }, TMP_Number_to_i_58.$$arity = 0);
    Opal.alias(self, "to_int", "to_i");
    
    Opal.defn(self, '$to_r', TMP_Number_to_r_59 = function $$to_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        return Opal.const_get_relative($nesting, 'Rational').$new(self, 1)
        } else {
        
        $b = Opal.const_get_relative($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;
        f = Opal.const_get_relative($nesting, 'Math').$ldexp(f, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'MANT_DIG')).$to_i();
        e = $rb_minus(e, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'MANT_DIG'));
        return $rb_times(f, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'RADIX')['$**'](e)).$to_r();
      }
    }, TMP_Number_to_r_59.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Number_to_s_60 = function $$to_s(base) {
      var $a, self = this;

      if (base == null) {
        base = 10;
      }
      
      if ($truthy(($truthy($a = $rb_lt(base, 2)) ? $a : $rb_gt(base, 36)))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "base must be between 2 and 36")};
      return self.toString(base);
    }, TMP_Number_to_s_60.$$arity = -1);
    Opal.alias(self, "truncate", "to_i");
    Opal.alias(self, "inspect", "to_s");
    
    Opal.defn(self, '$divmod', TMP_Number_divmod_61 = function $$divmod(other) {
      var $a, self = this, $iter = TMP_Number_divmod_61.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_divmod_61.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : other['$nan?']()))) {
        return self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Infinity")
        } else {
        return $send(self, Opal.find_super_dispatcher(self, 'divmod', TMP_Number_divmod_61, false), $zuper, $iter)
      }
    }, TMP_Number_divmod_61.$$arity = 1);
    
    Opal.defn(self, '$upto', TMP_Number_upto_62 = function $$upto(stop) {
      var TMP_63, self = this, $iter = TMP_Number_upto_62.$$p, block = $iter || nil;

      if ($iter) TMP_Number_upto_62.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["upto", stop], (TMP_63 = function(){var self = TMP_63.$$s || this;

        
          if ($truthy(Opal.const_get_relative($nesting, 'Numeric')['$==='](stop))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_lt(stop, self))) {
            return 0
            } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63))
      };
      
      if (!stop.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_upto_62.$$arity = 1);
    
    Opal.defn(self, '$zero?', TMP_Number_zero$q_64 = function() {
      var self = this;

      return self == 0
    }, TMP_Number_zero$q_64.$$arity = 0);
    
    Opal.defn(self, '$size', TMP_Number_size_65 = function $$size() {
      var self = this;

      return 4
    }, TMP_Number_size_65.$$arity = 0);
    
    Opal.defn(self, '$nan?', TMP_Number_nan$q_66 = function() {
      var self = this;

      return isNaN(self)
    }, TMP_Number_nan$q_66.$$arity = 0);
    
    Opal.defn(self, '$finite?', TMP_Number_finite$q_67 = function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self)
    }, TMP_Number_finite$q_67.$$arity = 0);
    
    Opal.defn(self, '$infinite?', TMP_Number_infinite$q_68 = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, TMP_Number_infinite$q_68.$$arity = 0);
    
    Opal.defn(self, '$positive?', TMP_Number_positive$q_69 = function() {
      var self = this;

      return self != 0 && (self == Infinity || 1 / self > 0)
    }, TMP_Number_positive$q_69.$$arity = 0);
    return (Opal.defn(self, '$negative?', TMP_Number_negative$q_70 = function() {
      var self = this;

      return self == -Infinity || 1 / self < 0
    }, TMP_Number_negative$q_70.$$arity = 0), nil) && 'negative?';
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  Opal.const_set($nesting[0], 'Fixnum', Opal.const_get_relative($nesting, 'Number'));
  (function($base, $super, $parent_nesting) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_allocate_71, TMP_$eq$eq$eq_72;

      
      
      Opal.defn(self, '$allocate', TMP_allocate_71 = function $$allocate() {
        var self = this;

        return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_71.$$arity = 0);
      
      Opal.udef(self, '$' + "new");;
      return (Opal.defn(self, '$===', TMP_$eq$eq$eq_72 = function(other) {
        var self = this;

        
        if (!other.$$is_number) {
          return false;
        }

        return (other % 1) === 0;
      
      }, TMP_$eq$eq$eq_72.$$arity = 1), nil) && '===';
    })(Opal.get_singleton_class(self), $nesting);
    Opal.const_set($nesting[0], 'MAX', Math.pow(2, 30) - 1);
    return Opal.const_set($nesting[0], 'MIN', -Math.pow(2, 30));
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_allocate_73, TMP_$eq$eq$eq_74;

      
      
      Opal.defn(self, '$allocate', TMP_allocate_73 = function $$allocate() {
        var self = this;

        return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_73.$$arity = 0);
      
      Opal.udef(self, '$' + "new");;
      return (Opal.defn(self, '$===', TMP_$eq$eq$eq_74 = function(other) {
        var self = this;

        return !!other.$$is_number
      }, TMP_$eq$eq$eq_74.$$arity = 1), nil) && '===';
    })(Opal.get_singleton_class(self), $nesting);
    Opal.const_set($nesting[0], 'INFINITY', Infinity);
    Opal.const_set($nesting[0], 'MAX', Number.MAX_VALUE);
    Opal.const_set($nesting[0], 'MIN', Number.MIN_VALUE);
    Opal.const_set($nesting[0], 'NAN', NaN);
    Opal.const_set($nesting[0], 'DIG', 15);
    Opal.const_set($nesting[0], 'MANT_DIG', 53);
    Opal.const_set($nesting[0], 'RADIX', 2);
    return Opal.const_set($nesting[0], 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/range"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$raise', '$<=>', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$respond_to?', '$class', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$last', '$to_a', '$>', '$-', '$abs', '$to_i', '$coerce_to!', '$ceil', '$/', '$size', '$loop', '$+', '$*', '$>=', '$each_with_index', '$%', '$bsearch', '$inspect', '$[]', '$hash']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Range_initialize_1, TMP_Range_$eq$eq_2, TMP_Range_$eq$eq$eq_3, TMP_Range_cover$q_4, TMP_Range_each_5, TMP_Range_eql$q_6, TMP_Range_exclude_end$q_7, TMP_Range_first_8, TMP_Range_last_9, TMP_Range_max_10, TMP_Range_min_11, TMP_Range_size_12, TMP_Range_step_13, TMP_Range_bsearch_17, TMP_Range_to_s_18, TMP_Range_inspect_19, TMP_Range_marshal_load_20, TMP_Range_hash_21;

    def.begin = def.end = def.excl = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    def.$$is_range = true;;
    self.$attr_reader("begin", "end");
    
    Opal.defn(self, '$initialize', TMP_Range_initialize_1 = function $$initialize(first, last, exclude) {
      var self = this;

      if (exclude == null) {
        exclude = false;
      }
      
      if ($truthy(self.begin)) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError'), "'initialize' called twice")};
      if ($truthy(first['$<=>'](last))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "bad value for range")
      };
      self.begin = first;
      self.end = last;
      return (self.excl = exclude);
    }, TMP_Range_initialize_1.$$arity = -3);
    
    Opal.defn(self, '$==', TMP_Range_$eq$eq_2 = function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.excl  === other.excl &&
             self.begin ==  other.begin &&
             self.end   ==  other.end;
    
    }, TMP_Range_$eq$eq_2.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_Range_$eq$eq$eq_3 = function(value) {
      var self = this;

      return self['$include?'](value)
    }, TMP_Range_$eq$eq$eq_3.$$arity = 1);
    
    Opal.defn(self, '$cover?', TMP_Range_cover$q_4 = function(value) {
      var $a, self = this, beg_cmp = nil, end_cmp = nil;

      
      beg_cmp = self.begin['$<=>'](value);
      if ($truthy(($truthy($a = beg_cmp) ? $rb_le(beg_cmp, 0) : $a))) {
        } else {
        return false
      };
      end_cmp = value['$<=>'](self.end);
      if ($truthy(self.excl)) {
        return ($truthy($a = end_cmp) ? $rb_lt(end_cmp, 0) : $a)
        } else {
        return ($truthy($a = end_cmp) ? $rb_le(end_cmp, 0) : $a)
      };
    }, TMP_Range_cover$q_4.$$arity = 1);
    
    Opal.defn(self, '$each', TMP_Range_each_5 = function $$each() {
      var $a, self = this, $iter = TMP_Range_each_5.$$p, block = $iter || nil, current = nil, last = nil;

      if ($iter) TMP_Range_each_5.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ($truthy(self.excl)) {
        return 0
        } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      if ($truthy(current['$respond_to?']("succ"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't iterate from " + (current.$class()))
      };
      while ($truthy($rb_lt(current['$<=>'](last), 0))) {
        
        Opal.yield1(block, current);
        current = current.$succ();
      };
      if ($truthy(($truthy($a = self.excl['$!']()) ? current['$=='](last) : $a))) {
        Opal.yield1(block, current)};
      return self;
    }, TMP_Range_each_5.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Range_eql$q_6 = function(other) {
      var $a, $b, self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Range')['$==='](other))) {
        } else {
        return false
      };
      return ($truthy($a = ($truthy($b = self.excl['$==='](other['$exclude_end?']())) ? self.begin['$eql?'](other.$begin()) : $b)) ? self.end['$eql?'](other.$end()) : $a);
    }, TMP_Range_eql$q_6.$$arity = 1);
    
    Opal.defn(self, '$exclude_end?', TMP_Range_exclude_end$q_7 = function() {
      var self = this;

      return self.excl
    }, TMP_Range_exclude_end$q_7.$$arity = 0);
    
    Opal.defn(self, '$first', TMP_Range_first_8 = function $$first(n) {
      var self = this, $iter = TMP_Range_first_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_first_8.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy(n == null)) {
        return self.begin};
      return $send(self, Opal.find_super_dispatcher(self, 'first', TMP_Range_first_8, false), $zuper, $iter);
    }, TMP_Range_first_8.$$arity = -1);
    Opal.alias(self, "include?", "cover?");
    
    Opal.defn(self, '$last', TMP_Range_last_9 = function $$last(n) {
      var self = this;

      
      if ($truthy(n == null)) {
        return self.end};
      return self.$to_a().$last(n);
    }, TMP_Range_last_9.$$arity = -1);
    
    Opal.defn(self, '$max', TMP_Range_max_10 = function $$max() {
      var $a, self = this, $iter = TMP_Range_max_10.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_max_10.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send(self, Opal.find_super_dispatcher(self, 'max', TMP_Range_max_10, false), $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
        } else {
        return self.excl ? self.end - 1 : self.end
      }
    }, TMP_Range_max_10.$$arity = 0);
    Opal.alias(self, "member?", "cover?");
    
    Opal.defn(self, '$min', TMP_Range_min_11 = function $$min() {
      var $a, self = this, $iter = TMP_Range_min_11.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_min_11.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send(self, Opal.find_super_dispatcher(self, 'min', TMP_Range_min_11, false), $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
        } else {
        return self.begin
      }
    }, TMP_Range_min_11.$$arity = 0);
    
    Opal.defn(self, '$size', TMP_Range_size_12 = function $$size() {
      var $a, self = this, _begin = nil, _end = nil, infinity = nil;

      
      _begin = self.begin;
      _end = self.end;
      if ($truthy(self.excl)) {
        _end = $rb_minus(_end, 1)};
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](_begin)) ? Opal.const_get_relative($nesting, 'Numeric')['$==='](_end) : $a))) {
        } else {
        return nil
      };
      if ($truthy($rb_lt(_end, _begin))) {
        return 0};
      infinity = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY');
      if ($truthy(($truthy($a = infinity['$=='](_begin.$abs())) ? $a : _end.$abs()['$=='](infinity)))) {
        return infinity};
      return (Math.abs(_end - _begin) + 1).$to_i();
    }, TMP_Range_size_12.$$arity = 0);
    
    Opal.defn(self, '$step', TMP_Range_step_13 = function $$step(n) {
      var TMP_14, TMP_15, TMP_16, self = this, $iter = TMP_Range_step_13.$$p, $yield = $iter || nil, i = nil;

      if (n == null) {
        n = 1;
      }
      if ($iter) TMP_Range_step_13.$$p = null;
      
      
      function coerceStepSize() {
        if (!n.$$is_number) {
          n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int")
        }

        if (n < 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step can't be negative")
        } else if (n === 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step can't be 0")
        }
      }

      function enumeratorSize() {
        if (!self.begin['$respond_to?']("succ")) {
          return nil;
        }

        if (self.begin.$$is_string && self.end.$$is_string) {
          return nil;
        }

        if (n % 1 === 0) {
          return $rb_divide(self.$size(), n).$ceil();
        } else {
          // n is a float
          var begin = self.begin, end = self.end,
              abs = Math.abs, floor = Math.floor,
              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'EPSILON'),
              size;

          if (err > 0.5) {
            err = 0.5;
          }

          if (self.excl) {
            size = floor((end - begin) / n - err);
            if (size * n + begin < end) {
              size++;
            }
          } else {
            size = floor((end - begin) / n + err) + 1
          }

          return size;
        }
      }
    ;
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["step", n], (TMP_14 = function(){var self = TMP_14.$$s || this;

        
          coerceStepSize();
          return enumeratorSize();
        }, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14))
      };
      coerceStepSize();
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
        
        i = 0;
        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], (TMP_15 = function(){var self = TMP_15.$$s || this, current = nil;
          if (self.begin == null) self.begin = nil;
          if (self.excl == null) self.excl = nil;
          if (self.end == null) self.end = nil;

        
          current = $rb_plus(self.begin, $rb_times(i, n));
          if ($truthy(self.excl)) {
            if ($truthy($rb_ge(current, self.end))) {
              
              Opal.brk(nil, $brk)}
          } else if ($truthy($rb_gt(current, self.end))) {
            
            Opal.brk(nil, $brk)};
          Opal.yield1($yield, current);
          return (i = $rb_plus(i, 1));}, TMP_15.$$s = self, TMP_15.$$brk = $brk, TMP_15.$$arity = 0, TMP_15))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        } else {
        
        
        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "no implicit conversion to float from string")
        }
      ;
        $send(self, 'each_with_index', [], (TMP_16 = function(value, idx){var self = TMP_16.$$s || this;
if (value == null) value = nil;if (idx == null) idx = nil;
        if (idx['$%'](n)['$=='](0)) {
            return Opal.yield1($yield, value);
            } else {
            return nil
          }}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16));
      };
      return self;
    }, TMP_Range_step_13.$$arity = -1);
    
    Opal.defn(self, '$bsearch', TMP_Range_bsearch_17 = function $$bsearch() {
      var self = this, $iter = TMP_Range_bsearch_17.$$p, block = $iter || nil;

      if ($iter) TMP_Range_bsearch_17.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch")
      };
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't do binary search for " + (self.begin.$class()))
      };
      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());
    }, TMP_Range_bsearch_17.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Range_to_s_18 = function $$to_s() {
      var self = this;

      return "" + (self.begin) + ((function() {if ($truthy(self.excl)) {
        return "..."
        } else {
        return ".."
      }; return nil; })()) + (self.end)
    }, TMP_Range_to_s_18.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Range_inspect_19 = function $$inspect() {
      var self = this;

      return "" + (self.begin.$inspect()) + ((function() {if ($truthy(self.excl)) {
        return "..."
        } else {
        return ".."
      }; return nil; })()) + (self.end.$inspect())
    }, TMP_Range_inspect_19.$$arity = 0);
    
    Opal.defn(self, '$marshal_load', TMP_Range_marshal_load_20 = function $$marshal_load(args) {
      var self = this;

      
      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return (self.excl = args['$[]']("excl"));
    }, TMP_Range_marshal_load_20.$$arity = 1);
    return (Opal.defn(self, '$hash', TMP_Range_hash_21 = function $$hash() {
      var self = this;

      return [self.begin, self.end, self.excl].$hash()
    }, TMP_Range_hash_21.$$arity = 0), nil) && 'hash';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/proc"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_new_1, TMP_Proc_call_2, TMP_Proc_to_proc_3, TMP_Proc_lambda$q_4, TMP_Proc_arity_5, TMP_Proc_source_location_6, TMP_Proc_binding_7, TMP_Proc_parameters_8, TMP_Proc_curry_9, TMP_Proc_dup_10;

    
    def.$$is_proc = true;
    def.$$is_lambda = false;
    Opal.defs(self, '$new', TMP_Proc_new_1 = function() {
      var self = this, $iter = TMP_Proc_new_1.$$p, block = $iter || nil;

      if ($iter) TMP_Proc_new_1.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, TMP_Proc_new_1.$$arity = 0);
    
    Opal.defn(self, '$call', TMP_Proc_call_2 = function $$call($a_rest) {
      var self = this, args, $iter = TMP_Proc_call_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Proc_call_2.$$p = null;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk;

      if ($brk) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return $brk.$v
          }
          else {
            throw err
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    
    }, TMP_Proc_call_2.$$arity = -1);
    Opal.alias(self, "[]", "call");
    Opal.alias(self, "===", "call");
    Opal.alias(self, "yield", "call");
    
    Opal.defn(self, '$to_proc', TMP_Proc_to_proc_3 = function $$to_proc() {
      var self = this;

      return self
    }, TMP_Proc_to_proc_3.$$arity = 0);
    
    Opal.defn(self, '$lambda?', TMP_Proc_lambda$q_4 = function() {
      var self = this;

      return !!self.$$is_lambda
    }, TMP_Proc_lambda$q_4.$$arity = 0);
    
    Opal.defn(self, '$arity', TMP_Proc_arity_5 = function $$arity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, TMP_Proc_arity_5.$$arity = 0);
    
    Opal.defn(self, '$source_location', TMP_Proc_source_location_6 = function $$source_location() {
      var self = this;

      
      if (self.$$is_curried) { return nil; };
      return nil;
    }, TMP_Proc_source_location_6.$$arity = 0);
    
    Opal.defn(self, '$binding', TMP_Proc_binding_7 = function $$binding() {
      var self = this;

      
      if (self.$$is_curried) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Can't create Binding") };
      return nil;
    }, TMP_Proc_binding_7.$$arity = 0);
    
    Opal.defn(self, '$parameters', TMP_Proc_parameters_8 = function $$parameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    
    }, TMP_Proc_parameters_8.$$arity = 0);
    
    Opal.defn(self, '$curry', TMP_Proc_curry_9 = function $$curry(arity) {
      var self = this;

      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](arity, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    
    }, TMP_Proc_curry_9.$$arity = -1);
    
    Opal.defn(self, '$dup', TMP_Proc_dup_10 = function $$dup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, TMP_Proc_dup_10.$$arity = 0);
    return Opal.alias(self, "clone", "dup");
  })($nesting[0], Function, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/method"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$arity', '$new', '$class', '$join', '$source_location', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Method_initialize_1, TMP_Method_arity_2, TMP_Method_parameters_3, TMP_Method_source_location_4, TMP_Method_comments_5, TMP_Method_call_6, TMP_Method_unbind_7, TMP_Method_to_proc_8, TMP_Method_inspect_9;

    def.method = def.receiver = def.owner = def.name = nil;
    
    self.$attr_reader("owner", "receiver", "name");
    
    Opal.defn(self, '$initialize', TMP_Method_initialize_1 = function $$initialize(receiver, owner, method, name) {
      var self = this;

      
      self.receiver = receiver;
      self.owner = owner;
      self.name = name;
      return (self.method = method);
    }, TMP_Method_initialize_1.$$arity = 4);
    
    Opal.defn(self, '$arity', TMP_Method_arity_2 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, TMP_Method_arity_2.$$arity = 0);
    
    Opal.defn(self, '$parameters', TMP_Method_parameters_3 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, TMP_Method_parameters_3.$$arity = 0);
    
    Opal.defn(self, '$source_location', TMP_Method_source_location_4 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, TMP_Method_source_location_4.$$arity = 0);
    
    Opal.defn(self, '$comments', TMP_Method_comments_5 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, TMP_Method_comments_5.$$arity = 0);
    
    Opal.defn(self, '$call', TMP_Method_call_6 = function $$call($a_rest) {
      var self = this, args, $iter = TMP_Method_call_6.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Method_call_6.$$p = null;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    
    }, TMP_Method_call_6.$$arity = -1);
    Opal.alias(self, "[]", "call");
    
    Opal.defn(self, '$unbind', TMP_Method_unbind_7 = function $$unbind() {
      var self = this;

      return Opal.const_get_relative($nesting, 'UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)
    }, TMP_Method_unbind_7.$$arity = 0);
    
    Opal.defn(self, '$to_proc', TMP_Method_to_proc_8 = function $$to_proc() {
      var self = this;

      
      var proc = self.$call.bind(self);
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      return proc;
    
    }, TMP_Method_to_proc_8.$$arity = 0);
    return (Opal.defn(self, '$inspect', TMP_Method_inspect_9 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.receiver.$class()) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, TMP_Method_inspect_9.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_UnboundMethod_initialize_10, TMP_UnboundMethod_arity_11, TMP_UnboundMethod_parameters_12, TMP_UnboundMethod_source_location_13, TMP_UnboundMethod_comments_14, TMP_UnboundMethod_bind_15, TMP_UnboundMethod_inspect_16;

    def.method = def.owner = def.name = def.source = nil;
    
    self.$attr_reader("source", "owner", "name");
    
    Opal.defn(self, '$initialize', TMP_UnboundMethod_initialize_10 = function $$initialize(source, owner, method, name) {
      var self = this;

      
      self.source = source;
      self.owner = owner;
      self.method = method;
      return (self.name = name);
    }, TMP_UnboundMethod_initialize_10.$$arity = 4);
    
    Opal.defn(self, '$arity', TMP_UnboundMethod_arity_11 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, TMP_UnboundMethod_arity_11.$$arity = 0);
    
    Opal.defn(self, '$parameters', TMP_UnboundMethod_parameters_12 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, TMP_UnboundMethod_parameters_12.$$arity = 0);
    
    Opal.defn(self, '$source_location', TMP_UnboundMethod_source_location_13 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, TMP_UnboundMethod_source_location_13.$$arity = 0);
    
    Opal.defn(self, '$comments', TMP_UnboundMethod_comments_14 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, TMP_UnboundMethod_comments_14.$$arity = 0);
    
    Opal.defn(self, '$bind', TMP_UnboundMethod_bind_15 = function $$bind(object) {
      var self = this;

      
      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {
        return Opal.const_get_relative($nesting, 'Method').$new(object, self.owner, self.method, self.name);
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't bind singleton method to a different class (expected " + (object) + ".kind_of?(" + (self.owner) + " to be true)");
      }
    
    }, TMP_UnboundMethod_bind_15.$$arity = 1);
    return (Opal.defn(self, '$inspect', TMP_UnboundMethod_inspect_16 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.source) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, TMP_UnboundMethod_inspect_16.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/variables"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  
  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = ($gvars["\""] = Opal.loaded_features);
  $gvars.LOAD_PATH = ($gvars[":"] = []);
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.const_set($nesting[0], 'ARGV', []);
  Opal.const_set($nesting[0], 'ARGF', Opal.const_get_relative($nesting, 'Object').$new());
  Opal.const_set($nesting[0], 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return ($gvars.SAFE = 0);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base, $parent_nesting) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'REGEXP_START', (function() {if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "^"
      } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'REGEXP_END', (function() {if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "$"
      } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', Opal.const_get_relative($nesting, 'Regexp').$new("" + "[^" + (Opal.const_get_relative($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + (Opal.const_get_relative($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', Opal.const_get_relative($nesting, 'Regexp').$new("" + (Opal.const_get_relative($nesting, 'REGEXP_START')) + "(::)?[A-Z][^" + (Opal.const_get_relative($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + (Opal.const_get_relative($nesting, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal/mini"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  self.$require("corelib/variables");
  return self.$require("opal/regexp_anchors");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/string/inheritance"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$to_s', '$inspect', '$+', '$*', '$map', '$split', '$enum_for', '$each_line', '$to_a', '$%', '$-']);
  
  self.$require("corelib/string");
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_inherited_1;

    return Opal.defs(self, '$inherited', TMP_String_inherited_1 = function $$inherited(klass) {
      var self = this, replace = nil;

      
      replace = Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'String'), 'Wrapper'));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'String'), 'Wrapper');

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    ;
    }, TMP_String_inherited_1.$$arity = 1)
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Wrapper_allocate_2, TMP_Wrapper_new_3, TMP_Wrapper_$$_4, TMP_Wrapper_initialize_5, TMP_Wrapper_method_missing_6, TMP_Wrapper_initialize_copy_7, TMP_Wrapper_respond_to$q_8, TMP_Wrapper_$eq$eq_9, TMP_Wrapper_to_s_10, TMP_Wrapper_inspect_11, TMP_Wrapper_$_12, TMP_Wrapper_$_13, TMP_Wrapper_split_15, TMP_Wrapper_replace_16, TMP_Wrapper_each_line_17, TMP_Wrapper_lines_19, TMP_Wrapper_$_20, TMP_Wrapper_instance_variables_21;

    def.literal = nil;
    
    def.$$is_string = true;
    Opal.defs(self, '$allocate', TMP_Wrapper_allocate_2 = function $$allocate(string) {
      var self = this, $iter = TMP_Wrapper_allocate_2.$$p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = "";
      }
      if ($iter) TMP_Wrapper_allocate_2.$$p = null;
      
      obj = $send(self, Opal.find_super_dispatcher(self, 'allocate', TMP_Wrapper_allocate_2, false, $Wrapper), [], null);
      obj.literal = string;
      return obj;
    }, TMP_Wrapper_allocate_2.$$arity = -1);
    Opal.defs(self, '$new', TMP_Wrapper_new_3 = function($a_rest) {
      var self = this, args, $iter = TMP_Wrapper_new_3.$$p, block = $iter || nil, obj = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Wrapper_new_3.$$p = null;
      
      obj = self.$allocate();
      $send(obj, 'initialize', Opal.to_a(args), block.$to_proc());
      return obj;
    }, TMP_Wrapper_new_3.$$arity = -1);
    Opal.defs(self, '$[]', TMP_Wrapper_$$_4 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$allocate(objects)
    }, TMP_Wrapper_$$_4.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Wrapper_initialize_5 = function $$initialize(string) {
      var self = this;

      if (string == null) {
        string = "";
      }
      return (self.literal = string)
    }, TMP_Wrapper_initialize_5.$$arity = -1);
    
    Opal.defn(self, '$method_missing', TMP_Wrapper_method_missing_6 = function $$method_missing($a_rest) {
      var self = this, args, $iter = TMP_Wrapper_method_missing_6.$$p, block = $iter || nil, result = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Wrapper_method_missing_6.$$p = null;
      
      result = $send(self.literal, '__send__', Opal.to_a(args), block.$to_proc());
      if ($truthy(result.$$is_string != null)) {
        if ($truthy(result == self.literal)) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    }, TMP_Wrapper_method_missing_6.$$arity = -1);
    
    Opal.defn(self, '$initialize_copy', TMP_Wrapper_initialize_copy_7 = function $$initialize_copy(other) {
      var self = this;

      return (self.literal = (other.literal).$clone())
    }, TMP_Wrapper_initialize_copy_7.$$arity = 1);
    
    Opal.defn(self, '$respond_to?', TMP_Wrapper_respond_to$q_8 = function(name, $a_rest) {
      var $b, self = this, $iter = TMP_Wrapper_respond_to$q_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Wrapper_respond_to$q_8.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return ($truthy($b = $send(self, Opal.find_super_dispatcher(self, 'respond_to?', TMP_Wrapper_respond_to$q_8, false), $zuper, $iter)) ? $b : self.literal['$respond_to?'](name))
    }, TMP_Wrapper_respond_to$q_8.$$arity = -2);
    
    Opal.defn(self, '$==', TMP_Wrapper_$eq$eq_9 = function(other) {
      var self = this;

      return self.literal['$=='](other)
    }, TMP_Wrapper_$eq$eq_9.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    
    Opal.defn(self, '$to_s', TMP_Wrapper_to_s_10 = function $$to_s() {
      var self = this;

      return self.literal.$to_s()
    }, TMP_Wrapper_to_s_10.$$arity = 0);
    Opal.alias(self, "to_str", "to_s");
    
    Opal.defn(self, '$inspect', TMP_Wrapper_inspect_11 = function $$inspect() {
      var self = this;

      return self.literal.$inspect()
    }, TMP_Wrapper_inspect_11.$$arity = 0);
    
    Opal.defn(self, '$+', TMP_Wrapper_$_12 = function(other) {
      var self = this;

      return $rb_plus(self.literal, other)
    }, TMP_Wrapper_$_12.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Wrapper_$_13 = function(other) {
      var self = this;

      
      var result = $rb_times(self.literal, other);

      if (result.$$is_string) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    
    }, TMP_Wrapper_$_13.$$arity = 1);
    
    Opal.defn(self, '$split', TMP_Wrapper_split_15 = function $$split(pattern, limit) {
      var TMP_14, self = this;

      return $send(self.literal.$split(pattern, limit), 'map', [], (TMP_14 = function(str){var self = TMP_14.$$s || this;
if (str == null) str = nil;
      return self.$class().$allocate(str)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))
    }, TMP_Wrapper_split_15.$$arity = -1);
    
    Opal.defn(self, '$replace', TMP_Wrapper_replace_16 = function $$replace(string) {
      var self = this;

      return (self.literal = string)
    }, TMP_Wrapper_replace_16.$$arity = 1);
    
    Opal.defn(self, '$each_line', TMP_Wrapper_each_line_17 = function $$each_line(separator) {
      var TMP_18, self = this, $iter = TMP_Wrapper_each_line_17.$$p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_Wrapper_each_line_17.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      return $send(self.literal, 'each_line', [separator], (TMP_18 = function(str){var self = TMP_18.$$s || this;
if (str == null) str = nil;
      return Opal.yield1($yield, self.$class().$allocate(str));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18));
    }, TMP_Wrapper_each_line_17.$$arity = -1);
    
    Opal.defn(self, '$lines', TMP_Wrapper_lines_19 = function $$lines(separator) {
      var self = this, $iter = TMP_Wrapper_lines_19.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_Wrapper_lines_19.$$p = null;
      
      e = $send(self, 'each_line', [separator], block.$to_proc());
      if ($truthy(block)) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_Wrapper_lines_19.$$arity = -1);
    
    Opal.defn(self, '$%', TMP_Wrapper_$_20 = function(data) {
      var self = this;

      return self.literal['$%'](data)
    }, TMP_Wrapper_$_20.$$arity = 1);
    return (Opal.defn(self, '$instance_variables', TMP_Wrapper_instance_variables_21 = function $$instance_variables() {
      var self = this, $iter = TMP_Wrapper_instance_variables_21.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Wrapper_instance_variables_21.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $rb_minus($send(self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_Wrapper_instance_variables_21, false), $zuper, $iter), ["@literal"])
    }, TMP_Wrapper_instance_variables_21.$$arity = 0), nil) && 'instance_variables';
  })(Opal.const_get_relative($nesting, 'String'), null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var TMP_12, TMP_15, TMP_18, TMP_21, TMP_24, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$==', '$default_external', '$upcase', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$force_encoding', '$dup', '$coerce_to!', '$find', '$getbyte']);
  
  self.$require("corelib/string");
  (function($base, $super, $parent_nesting) {
    function $Encoding(){};
    var self = $Encoding = $klass($base, $super, 'Encoding', $Encoding);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Encoding_register_1, TMP_Encoding_find_3, TMP_Encoding_initialize_4, TMP_Encoding_ascii_compatible$q_5, TMP_Encoding_dummy$q_6, TMP_Encoding_to_s_7, TMP_Encoding_inspect_8, TMP_Encoding_each_byte_9, TMP_Encoding_getbyte_10, TMP_Encoding_bytesize_11;

    def.ascii = def.dummy = def.name = nil;
    
    self["$$register"] = {};
    Opal.defs(self, '$register', TMP_Encoding_register_1 = function $$register(name, options) {
      var $a, TMP_2, self = this, $iter = TMP_Encoding_register_1.$$p, block = $iter || nil, names = nil, encoding = nil, register = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Encoding_register_1.$$p = null;
      
      names = $rb_plus([name], ($truthy($a = options['$[]']("aliases")) ? $a : []));
      encoding = $send(Opal.const_get_relative($nesting, 'Class'), 'new', [self], block.$to_proc()).$new(name, names, ($truthy($a = options['$[]']("ascii")) ? $a : false), ($truthy($a = options['$[]']("dummy")) ? $a : false));
      register = self["$$register"];
      return $send(names, 'each', [], (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
      
        self.$const_set(name.$sub("-", "_"), encoding);
        return register["" + "$$" + (name)] = encoding;}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
    }, TMP_Encoding_register_1.$$arity = -2);
    Opal.defs(self, '$find', TMP_Encoding_find_3 = function $$find(name) {
      var $a, self = this, register = nil, encoding = nil;

      
      if (name['$==']("default_external")) {
        return self.$default_external()};
      register = self["$$register"];
      encoding = ($truthy($a = register["" + "$$" + (name)]) ? $a : register["" + "$$" + (name.$upcase())]);
      if ($truthy(encoding)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unknown encoding name - " + (name))
      };
      return encoding;
    }, TMP_Encoding_find_3.$$arity = 1);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("default_external")
    })(Opal.get_singleton_class(self), $nesting);
    self.$attr_reader("name", "names");
    
    Opal.defn(self, '$initialize', TMP_Encoding_initialize_4 = function $$initialize(name, names, ascii, dummy) {
      var self = this;

      
      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return (self.dummy = dummy);
    }, TMP_Encoding_initialize_4.$$arity = 4);
    
    Opal.defn(self, '$ascii_compatible?', TMP_Encoding_ascii_compatible$q_5 = function() {
      var self = this;

      return self.ascii
    }, TMP_Encoding_ascii_compatible$q_5.$$arity = 0);
    
    Opal.defn(self, '$dummy?', TMP_Encoding_dummy$q_6 = function() {
      var self = this;

      return self.dummy
    }, TMP_Encoding_dummy$q_6.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Encoding_to_s_7 = function $$to_s() {
      var self = this;

      return self.name
    }, TMP_Encoding_to_s_7.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Encoding_inspect_8 = function $$inspect() {
      var self = this;

      return "" + "#<Encoding:" + (self.name) + ((function() {if ($truthy(self.dummy)) {
        return " (dummy)"
        } else {
        return nil
      }; return nil; })()) + ">"
    }, TMP_Encoding_inspect_8.$$arity = 0);
    
    Opal.defn(self, '$each_byte', TMP_Encoding_each_byte_9 = function $$each_byte($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
    }, TMP_Encoding_each_byte_9.$$arity = -1);
    
    Opal.defn(self, '$getbyte', TMP_Encoding_getbyte_10 = function $$getbyte($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
    }, TMP_Encoding_getbyte_10.$$arity = -1);
    
    Opal.defn(self, '$bytesize', TMP_Encoding_bytesize_11 = function $$bytesize($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
    }, TMP_Encoding_bytesize_11.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      function $EncodingError(){};
      var self = $EncodingError = $klass($base, $super, 'EncodingError', $EncodingError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    return (function($base, $super, $parent_nesting) {
      function $CompatibilityError(){};
      var self = $CompatibilityError = $klass($base, $super, 'CompatibilityError', $CompatibilityError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'EncodingError'), $nesting);
  })($nesting[0], null, $nesting);
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true})], (TMP_12 = function(){var self = TMP_12.$$s || this, TMP_each_byte_13, TMP_bytesize_14;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_13 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_13.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_13.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          Opal.yield1(block, code);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            Opal.yield1(block, parseInt(encoded[j], 16));
          }
        }
      }
    
    }, TMP_each_byte_13.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_14 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_14.$$arity = 1), nil) && 'bytesize';}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12));
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["UTF-16LE"], (TMP_15 = function(){var self = TMP_15.$$s || this, TMP_each_byte_16, TMP_bytesize_17;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_16 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_16.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_16.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    
    }, TMP_each_byte_16.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_17 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_17.$$arity = 1), nil) && 'bytesize';}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["UTF-16BE"], (TMP_18 = function(){var self = TMP_18.$$s || this, TMP_each_byte_19, TMP_bytesize_20;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_19 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_19.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_19.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code >> 8);
        Opal.yield1(block, code & 0xff);
      }
    
    }, TMP_each_byte_19.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_20 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_20.$$arity = 1), nil) && 'bytesize';}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18));
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["UTF-32LE"], (TMP_21 = function(){var self = TMP_21.$$s || this, TMP_each_byte_22, TMP_bytesize_23;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_22 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_22.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_22.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    
    }, TMP_each_byte_22.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_23 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_23.$$arity = 1), nil) && 'bytesize';}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21));
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["ASCII-8BIT", $hash2(["aliases", "ascii", "dummy"], {"aliases": ["BINARY", "US-ASCII", "ASCII"], "ascii": true, "dummy": true})], (TMP_24 = function(){var self = TMP_24.$$s || this, TMP_each_byte_25, TMP_bytesize_26;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_25 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_25.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_25.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);
        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    
    }, TMP_each_byte_25.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_26 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_26.$$arity = 1), nil) && 'bytesize';}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24));
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_bytes_27, TMP_String_bytesize_28, TMP_String_each_byte_29, TMP_String_encode_30, TMP_String_encoding_31, TMP_String_force_encoding_32, TMP_String_getbyte_33, TMP_String_valid_encoding$q_34;

    def.encoding = nil;
    
    String.prototype.encoding = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Encoding'), 'UTF_16LE');
    
    Opal.defn(self, '$bytes', TMP_String_bytes_27 = function $$bytes() {
      var self = this;

      return self.$each_byte().$to_a()
    }, TMP_String_bytes_27.$$arity = 0);
    
    Opal.defn(self, '$bytesize', TMP_String_bytesize_28 = function $$bytesize() {
      var self = this;

      return self.encoding.$bytesize(self)
    }, TMP_String_bytesize_28.$$arity = 0);
    
    Opal.defn(self, '$each_byte', TMP_String_each_byte_29 = function $$each_byte() {
      var self = this, $iter = TMP_String_each_byte_29.$$p, block = $iter || nil;

      if ($iter) TMP_String_each_byte_29.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_byte")
      };
      $send(self.encoding, 'each_byte', [self], block.$to_proc());
      return self;
    }, TMP_String_each_byte_29.$$arity = 0);
    
    Opal.defn(self, '$encode', TMP_String_encode_30 = function $$encode(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding)
    }, TMP_String_encode_30.$$arity = 1);
    
    Opal.defn(self, '$encoding', TMP_String_encoding_31 = function $$encoding() {
      var self = this;

      return self.encoding
    }, TMP_String_encoding_31.$$arity = 0);
    
    Opal.defn(self, '$force_encoding', TMP_String_force_encoding_32 = function $$force_encoding(encoding) {
      var self = this;

      
      if (encoding === self.encoding) { return self; }

      encoding = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](encoding, Opal.const_get_relative($nesting, 'String'), "to_s");
      encoding = Opal.const_get_relative($nesting, 'Encoding').$find(encoding);

      if (encoding === self.encoding) { return self; }

      self.encoding = encoding;
      return self;
    
    }, TMP_String_force_encoding_32.$$arity = 1);
    
    Opal.defn(self, '$getbyte', TMP_String_getbyte_33 = function $$getbyte(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx)
    }, TMP_String_getbyte_33.$$arity = 1);
    return (Opal.defn(self, '$valid_encoding?', TMP_String_valid_encoding$q_34 = function() {
      var self = this;

      return true
    }, TMP_String_valid_encoding$q_34.$$arity = 0), nil) && 'valid_encoding?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/math"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$raise', '$Float', '$type_error', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base, $parent_nesting) {
    var $Math, self = $Math = $module($base, 'Math');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Math_checked_1, TMP_Math_float$B_2, TMP_Math_integer$B_3, TMP_Math_acos_4, TMP_Math_acosh_5, TMP_Math_asin_6, TMP_Math_asinh_7, TMP_Math_atan_8, TMP_Math_atan2_9, TMP_Math_atanh_10, TMP_Math_cbrt_11, TMP_Math_cos_12, TMP_Math_cosh_13, TMP_Math_erf_14, TMP_Math_erfc_15, TMP_Math_exp_16, TMP_Math_frexp_17, TMP_Math_gamma_18, TMP_Math_hypot_19, TMP_Math_ldexp_20, TMP_Math_lgamma_21, TMP_Math_log_22, TMP_Math_log10_23, TMP_Math_log2_24, TMP_Math_sin_25, TMP_Math_sinh_26, TMP_Math_sqrt_27, TMP_Math_tan_28, TMP_Math_tanh_29;

    
    Opal.const_set($nesting[0], 'E', Math.E);
    Opal.const_set($nesting[0], 'PI', Math.PI);
    Opal.const_set($nesting[0], 'DomainError', Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'StandardError')));
    Opal.defs(self, '$checked', TMP_Math_checked_1 = function $$checked(method, $a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise(Opal.const_get_relative($nesting, 'DomainError'), "" + "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    
    }, TMP_Math_checked_1.$$arity = -2);
    Opal.defs(self, '$float!', TMP_Math_float$B_2 = function(value) {
      var self = this;

      
      try {
        return self.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {
          try {
            return self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(value, Opal.const_get_relative($nesting, 'Float')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_Math_float$B_2.$$arity = 1);
    Opal.defs(self, '$integer!', TMP_Math_integer$B_3 = function(value) {
      var self = this;

      
      try {
        return self.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {
          try {
            return self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(value, Opal.const_get_relative($nesting, 'Integer')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_Math_integer$B_3.$$arity = 1);
    self.$module_function();
    
    Opal.defn(self, '$acos', TMP_Math_acos_4 = function $$acos(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("acos", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_acos_4.$$arity = 1);
    if ($truthy((typeof(Math.acosh) !== "undefined"))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };
    
    Opal.defn(self, '$acosh', TMP_Math_acosh_5 = function $$acosh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("acosh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_acosh_5.$$arity = 1);
    
    Opal.defn(self, '$asin', TMP_Math_asin_6 = function $$asin(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("asin", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_asin_6.$$arity = 1);
    if ($truthy((typeof(Math.asinh) !== "undefined"))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    
    };
    
    Opal.defn(self, '$asinh', TMP_Math_asinh_7 = function $$asinh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("asinh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_asinh_7.$$arity = 1);
    
    Opal.defn(self, '$atan', TMP_Math_atan_8 = function $$atan(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("atan", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atan_8.$$arity = 1);
    
    Opal.defn(self, '$atan2', TMP_Math_atan2_9 = function $$atan2(y, x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("atan2", Opal.const_get_relative($nesting, 'Math')['$float!'](y), Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atan2_9.$$arity = 2);
    if ($truthy((typeof(Math.atanh) !== "undefined"))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };
    
    Opal.defn(self, '$atanh', TMP_Math_atanh_10 = function $$atanh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("atanh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atanh_10.$$arity = 1);
    if ($truthy((typeof(Math.cbrt) !== "undefined"))) {
      } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };
    
    Opal.defn(self, '$cbrt', TMP_Math_cbrt_11 = function $$cbrt(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("cbrt", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cbrt_11.$$arity = 1);
    
    Opal.defn(self, '$cos', TMP_Math_cos_12 = function $$cos(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("cos", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cos_12.$$arity = 1);
    if ($truthy((typeof(Math.cosh) !== "undefined"))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.defn(self, '$cosh', TMP_Math_cosh_13 = function $$cosh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("cosh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cosh_13.$$arity = 1);
    if ($truthy((typeof(Math.erf) !== "undefined"))) {
      } else {
      
      Math.erf = function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      }
    
    };
    
    Opal.defn(self, '$erf', TMP_Math_erf_14 = function $$erf(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("erf", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_erf_14.$$arity = 1);
    if ($truthy((typeof(Math.erfc) !== "undefined"))) {
      } else {
      
      Math.erfc = function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      }
    
    };
    
    Opal.defn(self, '$erfc', TMP_Math_erfc_15 = function $$erfc(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("erfc", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_erfc_15.$$arity = 1);
    
    Opal.defn(self, '$exp', TMP_Math_exp_16 = function $$exp(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("exp", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_exp_16.$$arity = 1);
    
    Opal.defn(self, '$frexp', TMP_Math_frexp_17 = function $$frexp(x) {
      var self = this;

      
      x = Opal.const_get_relative($nesting, 'Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    ;
    }, TMP_Math_frexp_17.$$arity = 1);
    
    Opal.defn(self, '$gamma', TMP_Math_gamma_18 = function $$gamma(n) {
      var self = this;

      
      n = Opal.const_get_relative($nesting, 'Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise(Opal.const_get_relative($nesting, 'DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if (Opal.const_get_relative($nesting, 'Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * Opal.const_get_relative($nesting, 'Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    ;
    }, TMP_Math_gamma_18.$$arity = 1);
    if ($truthy((typeof(Math.hypot) !== "undefined"))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    
    };
    
    Opal.defn(self, '$hypot', TMP_Math_hypot_19 = function $$hypot(x, y) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("hypot", Opal.const_get_relative($nesting, 'Math')['$float!'](x), Opal.const_get_relative($nesting, 'Math')['$float!'](y))
    }, TMP_Math_hypot_19.$$arity = 2);
    
    Opal.defn(self, '$ldexp', TMP_Math_ldexp_20 = function $$ldexp(mantissa, exponent) {
      var self = this;

      
      mantissa = Opal.const_get_relative($nesting, 'Math')['$float!'](mantissa);
      exponent = Opal.const_get_relative($nesting, 'Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, TMP_Math_ldexp_20.$$arity = 2);
    
    Opal.defn(self, '$lgamma', TMP_Math_lgamma_21 = function $$lgamma(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs(Opal.const_get_relative($nesting, 'Math').$gamma(n))), Opal.const_get_relative($nesting, 'Math').$gamma(n) < 0 ? -1 : 1];
      }
    
    }, TMP_Math_lgamma_21.$$arity = 1);
    
    Opal.defn(self, '$log', TMP_Math_log_22 = function $$log(x, base) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](x))) {
        self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(x, Opal.const_get_relative($nesting, 'Float')))};
      if ($truthy(base == null)) {
        return Opal.const_get_relative($nesting, 'Math').$checked("log", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
        } else {
        
        if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](base))) {
          self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(base, Opal.const_get_relative($nesting, 'Float')))};
        return $rb_divide(Opal.const_get_relative($nesting, 'Math').$checked("log", Opal.const_get_relative($nesting, 'Math')['$float!'](x)), Opal.const_get_relative($nesting, 'Math').$checked("log", Opal.const_get_relative($nesting, 'Math')['$float!'](base)));
      };
    }, TMP_Math_log_22.$$arity = -2);
    if ($truthy((typeof(Math.log10) !== "undefined"))) {
      } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };
    
    Opal.defn(self, '$log10', TMP_Math_log10_23 = function $$log10(x) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](x))) {
        self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(x, Opal.const_get_relative($nesting, 'Float')))};
      return Opal.const_get_relative($nesting, 'Math').$checked("log10", Opal.const_get_relative($nesting, 'Math')['$float!'](x));
    }, TMP_Math_log10_23.$$arity = 1);
    if ($truthy((typeof(Math.log2) !== "undefined"))) {
      } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };
    
    Opal.defn(self, '$log2', TMP_Math_log2_24 = function $$log2(x) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](x))) {
        self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(x, Opal.const_get_relative($nesting, 'Float')))};
      return Opal.const_get_relative($nesting, 'Math').$checked("log2", Opal.const_get_relative($nesting, 'Math')['$float!'](x));
    }, TMP_Math_log2_24.$$arity = 1);
    
    Opal.defn(self, '$sin', TMP_Math_sin_25 = function $$sin(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("sin", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sin_25.$$arity = 1);
    if ($truthy((typeof(Math.sinh) !== "undefined"))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.defn(self, '$sinh', TMP_Math_sinh_26 = function $$sinh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("sinh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sinh_26.$$arity = 1);
    
    Opal.defn(self, '$sqrt', TMP_Math_sqrt_27 = function $$sqrt(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("sqrt", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sqrt_27.$$arity = 1);
    
    Opal.defn(self, '$tan', TMP_Math_tan_28 = function $$tan(x) {
      var self = this;

      
      x = Opal.const_get_relative($nesting, 'Math')['$float!'](x);
      if ($truthy(x['$infinite?']())) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'NAN')};
      return Opal.const_get_relative($nesting, 'Math').$checked("tan", Opal.const_get_relative($nesting, 'Math')['$float!'](x));
    }, TMP_Math_tan_28.$$arity = 1);
    if ($truthy((typeof(Math.tanh) !== "undefined"))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };
    
    Opal.defn(self, '$tanh', TMP_Math_tanh_29 = function $$tanh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("tanh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_tanh_29.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/complex"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$to_s', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$zero?', '$infinite?']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Complex_rect_1, TMP_Complex_polar_2, TMP_Complex_initialize_3, TMP_Complex_coerce_4, TMP_Complex_$eq$eq_5, TMP_Complex_$$_6, TMP_Complex_$_7, TMP_Complex_$_8, TMP_Complex_$_9, TMP_Complex_$_10, TMP_Complex_$$_11, TMP_Complex_abs_12, TMP_Complex_abs2_13, TMP_Complex_angle_14, TMP_Complex_conj_15, TMP_Complex_denominator_16, TMP_Complex_eql$q_17, TMP_Complex_fdiv_18, TMP_Complex_hash_19, TMP_Complex_inspect_20, TMP_Complex_numerator_21, TMP_Complex_polar_22, TMP_Complex_rationalize_23, TMP_Complex_real$q_24, TMP_Complex_rect_25, TMP_Complex_to_f_26, TMP_Complex_to_i_27, TMP_Complex_to_r_28, TMP_Complex_to_s_29;

    def.real = def.imag = nil;
    
    Opal.defs(self, '$rect', TMP_Complex_rect_1 = function $$rect(real, imag) {
      var $a, $b, $c, self = this;

      if (imag == null) {
        imag = 0;
      }
      
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = Opal.const_get_relative($nesting, 'Numeric')['$==='](real)) ? real['$real?']() : $c)) ? Opal.const_get_relative($nesting, 'Numeric')['$==='](imag) : $b)) ? imag['$real?']() : $a))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, TMP_Complex_rect_1.$$arity = -2);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return Opal.alias(self, "rectangular", "rect")
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$polar', TMP_Complex_polar_2 = function $$polar(r, theta) {
      var $a, $b, $c, self = this;

      if (theta == null) {
        theta = 0;
      }
      
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = Opal.const_get_relative($nesting, 'Numeric')['$==='](r)) ? r['$real?']() : $c)) ? Opal.const_get_relative($nesting, 'Numeric')['$==='](theta) : $b)) ? theta['$real?']() : $a))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not a real")
      };
      return self.$new($rb_times(r, Opal.const_get_relative($nesting, 'Math').$cos(theta)), $rb_times(r, Opal.const_get_relative($nesting, 'Math').$sin(theta)));
    }, TMP_Complex_polar_2.$$arity = -2);
    self.$attr_reader("real", "imag");
    
    Opal.defn(self, '$initialize', TMP_Complex_initialize_3 = function $$initialize(real, imag) {
      var self = this;

      if (imag == null) {
        imag = 0;
      }
      
      self.real = real;
      return (self.imag = imag);
    }, TMP_Complex_initialize_3.$$arity = -2);
    
    Opal.defn(self, '$coerce', TMP_Complex_coerce_4 = function $$coerce(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return [other, self]
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return [Opal.const_get_relative($nesting, 'Complex').$new(other, 0), self]
        } else {
        return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      }
    }, TMP_Complex_coerce_4.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Complex_$eq$eq_5 = function(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
        } else {
        return other['$=='](self)
      }
    }, TMP_Complex_$eq$eq_5.$$arity = 1);
    
    Opal.defn(self, '$-@', TMP_Complex_$$_6 = function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']())
    }, TMP_Complex_$$_6.$$arity = 0);
    
    Opal.defn(self, '$+', TMP_Complex_$_7 = function(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("+", other)
      }
    }, TMP_Complex_$_7.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Complex_$_8 = function(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("-", other)
      }
    }, TMP_Complex_$_8.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Complex_$_9 = function(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
        } else {
        return self.$__coerced__("*", other)
      }
    }, TMP_Complex_$_9.$$arity = 1);
    
    Opal.defn(self, '$/', TMP_Complex_$_10 = function(other) {
      var $a, $b, $c, $d, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = Opal.const_get_relative($nesting, 'Number')['$==='](self.real)) ? self.real['$nan?']() : $d)) ? $c : ($truthy($d = Opal.const_get_relative($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $d))) ? $b : ($truthy($c = Opal.const_get_relative($nesting, 'Number')['$==='](other.$real())) ? other.$real()['$nan?']() : $c))) ? $a : ($truthy($b = Opal.const_get_relative($nesting, 'Number')['$==='](other.$imag())) ? other.$imag()['$nan?']() : $b)))) {
          return Opal.const_get_relative($nesting, 'Complex').$new(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'NAN'), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'NAN'))
          } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
        } else {
        return self.$__coerced__("/", other)
      }
    }, TMP_Complex_$_10.$$arity = 1);
    
    Opal.defn(self, '$**', TMP_Complex_$$_11 = function(other) {
      var $a, $b, $c, $d, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      
      if (other['$=='](0)) {
        return Opal.const_get_relative($nesting, 'Complex').$new(1, 0)};
      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = Opal.const_get_relative($nesting, 'Math').$exp($rb_minus($rb_times(ore, Opal.const_get_relative($nesting, 'Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, Opal.const_get_relative($nesting, 'Math').$log(r)));
        return Opal.const_get_relative($nesting, 'Complex').$polar(nr, ntheta);
      } else if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](other))) {
        if ($truthy($rb_gt(other, 0))) {
          
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ($truthy(n['$!='](0))) {
            
            while ($truthy(($d = n.$divmod(2), $c = Opal.to_ary($d), (div = ($c[0] == null ? nil : $c[0])), (mod = ($c[1] == null ? nil : $c[1])), $d, mod['$=='](0)))) {
              
              x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
              n = div;
            };
            z = $rb_times(z, x);
            n = $rb_minus(n, 1);
          };
          return z;
          } else {
          return $rb_divide(Opal.const_get_relative($nesting, 'Rational').$new(1, 1), self)['$**'](other['$-@']())
        }
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Float')['$==='](other)) ? $a : Opal.const_get_relative($nesting, 'Rational')['$==='](other)))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        return Opal.const_get_relative($nesting, 'Complex').$polar(r['$**'](other), $rb_times(theta, other));
        } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_Complex_$$_11.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_Complex_abs_12 = function $$abs() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$hypot(self.real, self.imag)
    }, TMP_Complex_abs_12.$$arity = 0);
    
    Opal.defn(self, '$abs2', TMP_Complex_abs2_13 = function $$abs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag))
    }, TMP_Complex_abs2_13.$$arity = 0);
    
    Opal.defn(self, '$angle', TMP_Complex_angle_14 = function $$angle() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$atan2(self.imag, self.real)
    }, TMP_Complex_angle_14.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.defn(self, '$conj', TMP_Complex_conj_15 = function $$conj() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']())
    }, TMP_Complex_conj_15.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.defn(self, '$denominator', TMP_Complex_denominator_16 = function $$denominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator())
    }, TMP_Complex_denominator_16.$$arity = 0);
    Opal.alias(self, "divide", "/");
    
    Opal.defn(self, '$eql?', TMP_Complex_eql$q_17 = function(other) {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = Opal.const_get_relative($nesting, 'Complex')['$==='](other)) ? self.real.$class()['$=='](self.imag.$class()) : $b)) ? self['$=='](other) : $a)
    }, TMP_Complex_eql$q_17.$$arity = 1);
    
    Opal.defn(self, '$fdiv', TMP_Complex_fdiv_18 = function $$fdiv(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Numeric')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, TMP_Complex_fdiv_18.$$arity = 1);
    
    Opal.defn(self, '$hash', TMP_Complex_hash_19 = function $$hash() {
      var self = this;

      return "" + "Complex:" + (self.real) + ":" + (self.imag)
    }, TMP_Complex_hash_19.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.defn(self, '$inspect', TMP_Complex_inspect_20 = function $$inspect() {
      var self = this;

      return "" + "(" + (self.$to_s()) + ")"
    }, TMP_Complex_inspect_20.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    
    Opal.udef(self, '$' + "negative?");;
    
    Opal.defn(self, '$numerator', TMP_Complex_numerator_21 = function $$numerator() {
      var self = this, d = nil;

      
      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), $rb_divide(d, self.real.$denominator())), $rb_times(self.imag.$numerator(), $rb_divide(d, self.imag.$denominator())));
    }, TMP_Complex_numerator_21.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.defn(self, '$polar', TMP_Complex_polar_22 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, TMP_Complex_polar_22.$$arity = 0);
    
    Opal.udef(self, '$' + "positive?");;
    Opal.alias(self, "quo", "/");
    
    Opal.defn(self, '$rationalize', TMP_Complex_rationalize_23 = function $$rationalize(eps) {
      var self = this;

      
      
      if (arguments.length > 1) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy(self.imag['$!='](0))) {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    }, TMP_Complex_rationalize_23.$$arity = -1);
    
    Opal.defn(self, '$real?', TMP_Complex_real$q_24 = function() {
      var self = this;

      return false
    }, TMP_Complex_real$q_24.$$arity = 0);
    
    Opal.defn(self, '$rect', TMP_Complex_rect_25 = function $$rect() {
      var self = this;

      return [self.real, self.imag]
    }, TMP_Complex_rect_25.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.defn(self, '$to_f', TMP_Complex_to_f_26 = function $$to_f() {
      var self = this;

      
      if (self.imag['$=='](0)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, TMP_Complex_to_f_26.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_Complex_to_i_27 = function $$to_i() {
      var self = this;

      
      if (self.imag['$=='](0)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, TMP_Complex_to_i_27.$$arity = 0);
    
    Opal.defn(self, '$to_r', TMP_Complex_to_r_28 = function $$to_r() {
      var self = this;

      
      if (self.imag['$=='](0)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, TMP_Complex_to_r_28.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Complex_to_s_29 = function $$to_s() {
      var $a, $b, $c, self = this, result = nil;

      
      result = self.real.$inspect();
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = Opal.const_get_relative($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $c)) ? $b : self.imag['$positive?']())) ? $a : self.imag['$zero?']()))) {
        result = $rb_plus(result, "+")
        } else {
        result = $rb_plus(result, "-")
      };
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Number')['$==='](self.imag)) ? ($truthy($b = self.imag['$nan?']()) ? $b : self.imag['$infinite?']()) : $a))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    }, TMP_Complex_to_s_29.$$arity = 0);
    return Opal.const_set($nesting[0], 'I', self.$new(0, 1));
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_Complex_30;

    
    Opal.defn(self, '$Complex', TMP_Kernel_Complex_30 = function $$Complex(real, imag) {
      var self = this;

      if (imag == null) {
        imag = nil;
      }
      if ($truthy(imag)) {
        return Opal.const_get_relative($nesting, 'Complex').$new(real, imag)
        } else {
        return Opal.const_get_relative($nesting, 'Complex').$new(real, 0)
      }
    }, TMP_Kernel_Complex_30.$$arity = -2)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/rational"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$attr_reader', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$to_s', '$<=', '$truncate', '$send', '$convert']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Rational_reduce_1, TMP_Rational_convert_2, TMP_Rational_initialize_3, TMP_Rational_numerator_4, TMP_Rational_denominator_5, TMP_Rational_coerce_6, TMP_Rational_$eq$eq_7, TMP_Rational_$lt$eq$gt_8, TMP_Rational_$_9, TMP_Rational_$_10, TMP_Rational_$_11, TMP_Rational_$_12, TMP_Rational_$$_13, TMP_Rational_abs_14, TMP_Rational_ceil_15, TMP_Rational_floor_16, TMP_Rational_hash_17, TMP_Rational_inspect_18, TMP_Rational_rationalize_19, TMP_Rational_round_20, TMP_Rational_to_f_21, TMP_Rational_to_i_22, TMP_Rational_to_r_23, TMP_Rational_to_s_24, TMP_Rational_truncate_25, TMP_Rational_with_precision_26;

    def.num = def.den = nil;
    
    Opal.defs(self, '$reduce', TMP_Rational_reduce_1 = function $$reduce(num, den) {
      var self = this, gcd = nil;

      
      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by 0")
      } else if ($truthy($rb_lt(den, 0))) {
        
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, TMP_Rational_reduce_1.$$arity = 2);
    Opal.defs(self, '$convert', TMP_Rational_convert_2 = function $$convert(num, den) {
      var $a, $b, self = this;

      
      if ($truthy(($truthy($a = num['$nil?']()) ? $a : den['$nil?']()))) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "cannot convert nil into Rational")};
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Integer')['$==='](num)) ? Opal.const_get_relative($nesting, 'Integer')['$==='](den) : $a))) {
        return self.$reduce(num, den)};
      if ($truthy(($truthy($a = ($truthy($b = Opal.const_get_relative($nesting, 'Float')['$==='](num)) ? $b : Opal.const_get_relative($nesting, 'String')['$==='](num))) ? $a : Opal.const_get_relative($nesting, 'Complex')['$==='](num)))) {
        num = num.$to_r()};
      if ($truthy(($truthy($a = ($truthy($b = Opal.const_get_relative($nesting, 'Float')['$==='](den)) ? $b : Opal.const_get_relative($nesting, 'String')['$==='](den))) ? $a : Opal.const_get_relative($nesting, 'Complex')['$==='](den)))) {
        den = den.$to_r()};
      if ($truthy(($truthy($a = den['$equal?'](1)) ? Opal.const_get_relative($nesting, 'Integer')['$==='](num)['$!']() : $a))) {
        return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](num, Opal.const_get_relative($nesting, 'Rational'), "to_r")
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](num)) ? Opal.const_get_relative($nesting, 'Numeric')['$==='](den) : $a))) {
        return $rb_divide(num, den)
        } else {
        return self.$reduce(num, den)
      };
    }, TMP_Rational_convert_2.$$arity = 2);
    self.$attr_reader("numerator", "denominator");
    
    Opal.defn(self, '$initialize', TMP_Rational_initialize_3 = function $$initialize(num, den) {
      var self = this;

      
      self.num = num;
      return (self.den = den);
    }, TMP_Rational_initialize_3.$$arity = 2);
    
    Opal.defn(self, '$numerator', TMP_Rational_numerator_4 = function $$numerator() {
      var self = this;

      return self.num
    }, TMP_Rational_numerator_4.$$arity = 0);
    
    Opal.defn(self, '$denominator', TMP_Rational_denominator_5 = function $$denominator() {
      var self = this;

      return self.den
    }, TMP_Rational_denominator_5.$$arity = 0);
    
    Opal.defn(self, '$coerce', TMP_Rational_coerce_6 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {return [other, self]}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return [other.$to_r(), self]}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return [other, self.$to_f()]}
      else { return nil }})()
    }, TMP_Rational_coerce_6.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Rational_$eq$eq_7 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return self.$to_f()['$=='](other)}
      else {return other['$=='](self)}})()
    }, TMP_Rational_$eq$eq_7.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Rational_$lt$eq$gt_8 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}
      else {return self.$__coerced__("<=>", other)}})()
    }, TMP_Rational_$lt$eq$gt_8.$$arity = 1);
    
    Opal.defn(self, '$+', TMP_Rational_$_9 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {
      num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}
      else {return self.$__coerced__("+", other)}})()
    }, TMP_Rational_$_9.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Rational_$_10 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {
      num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}
      else {return self.$__coerced__("-", other)}})()
    }, TMP_Rational_$_10.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Rational_$_11 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}
      else {return self.$__coerced__("*", other)}})()
    }, TMP_Rational_$_11.$$arity = 1);
    
    Opal.defn(self, '$/', TMP_Rational_$_12 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
        } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}
      else {return self.$__coerced__("/", other)}})()
    }, TMP_Rational_$_12.$$arity = 1);
    
    Opal.defn(self, '$**', TMP_Rational_$$_13 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')
      } else if ($truthy($rb_gt(other, 0))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ($truthy($rb_lt(other, 0))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
        } else {
        return self.$Rational(1, 1)
      }}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return self.$to_f()['$**'](other)}
      else if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ($truthy($rb_lt(other, 0))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
          } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by 0")
        } else {
        return self.$to_f()['$**'](other)
      }}
      else {return self.$__coerced__("**", other)}})()
    }, TMP_Rational_$$_13.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_Rational_abs_14 = function $$abs() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs())
    }, TMP_Rational_abs_14.$$arity = 0);
    
    Opal.defn(self, '$ceil', TMP_Rational_ceil_15 = function $$ceil(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$ceil()
        } else {
        return self.$with_precision("ceil", precision)
      }
    }, TMP_Rational_ceil_15.$$arity = -1);
    Opal.alias(self, "divide", "/");
    
    Opal.defn(self, '$floor', TMP_Rational_floor_16 = function $$floor(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$floor()
        } else {
        return self.$with_precision("floor", precision)
      }
    }, TMP_Rational_floor_16.$$arity = -1);
    
    Opal.defn(self, '$hash', TMP_Rational_hash_17 = function $$hash() {
      var self = this;

      return "" + "Rational:" + (self.num) + ":" + (self.den)
    }, TMP_Rational_hash_17.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Rational_inspect_18 = function $$inspect() {
      var self = this;

      return "" + "(" + (self.$to_s()) + ")"
    }, TMP_Rational_inspect_18.$$arity = 0);
    Opal.alias(self, "quo", "/");
    
    Opal.defn(self, '$rationalize', TMP_Rational_rationalize_19 = function $$rationalize(eps) {
      var self = this;

      
      if (arguments.length > 1) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, $rb_minus(b, k));
        b  = $rb_divide(1, $rb_minus(a, k));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    
    }, TMP_Rational_rationalize_19.$$arity = -1);
    
    Opal.defn(self, '$round', TMP_Rational_round_20 = function $$round(precision) {
      var self = this, num = nil, den = nil, approx = nil;

      if (precision == null) {
        precision = 0;
      }
      
      if (precision['$=='](0)) {
        } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = $rb_divide(num, den).$truncate();
      if ($truthy($rb_lt(self.num, 0))) {
        return approx['$-@']()
        } else {
        return approx
      };
    }, TMP_Rational_round_20.$$arity = -1);
    
    Opal.defn(self, '$to_f', TMP_Rational_to_f_21 = function $$to_f() {
      var self = this;

      return $rb_divide(self.num, self.den)
    }, TMP_Rational_to_f_21.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_Rational_to_i_22 = function $$to_i() {
      var self = this;

      return self.$truncate()
    }, TMP_Rational_to_i_22.$$arity = 0);
    
    Opal.defn(self, '$to_r', TMP_Rational_to_r_23 = function $$to_r() {
      var self = this;

      return self
    }, TMP_Rational_to_r_23.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Rational_to_s_24 = function $$to_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den)
    }, TMP_Rational_to_s_24.$$arity = 0);
    
    Opal.defn(self, '$truncate', TMP_Rational_truncate_25 = function $$truncate(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        if ($truthy($rb_lt(self.num, 0))) {
          return self.$ceil()
          } else {
          return self.$floor()
        }
        } else {
        return self.$with_precision("truncate", precision)
      }
    }, TMP_Rational_truncate_25.$$arity = -1);
    return (Opal.defn(self, '$with_precision', TMP_Rational_with_precision_26 = function $$with_precision(method, precision) {
      var self = this, p = nil, s = nil;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](precision))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ($truthy($rb_lt(precision, 1))) {
        return $rb_divide(s.$send(method), p).$to_i()
        } else {
        return self.$Rational(s.$send(method), p)
      };
    }, TMP_Rational_with_precision_26.$$arity = 2), nil) && 'with_precision';
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_Rational_27;

    
    Opal.defn(self, '$Rational', TMP_Kernel_Rational_27 = function $$Rational(numerator, denominator) {
      var self = this;

      if (denominator == null) {
        denominator = 1;
      }
      return Opal.const_get_relative($nesting, 'Rational').$convert(numerator, denominator)
    }, TMP_Kernel_Rational_27.$$arity = -2)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/time"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_at_1, TMP_Time_new_2, TMP_Time_local_3, TMP_Time_gm_4, TMP_Time_now_5, TMP_Time_$_6, TMP_Time_$_7, TMP_Time_$lt$eq$gt_8, TMP_Time_$eq$eq_9, TMP_Time_asctime_10, TMP_Time_day_11, TMP_Time_yday_12, TMP_Time_isdst_13, TMP_Time_dup_14, TMP_Time_eql$q_15, TMP_Time_friday$q_16, TMP_Time_hash_17, TMP_Time_hour_18, TMP_Time_inspect_19, TMP_Time_min_20, TMP_Time_mon_21, TMP_Time_monday$q_22, TMP_Time_saturday$q_23, TMP_Time_sec_24, TMP_Time_succ_25, TMP_Time_usec_26, TMP_Time_zone_27, TMP_Time_getgm_28, TMP_Time_gmtime_29, TMP_Time_gmt$q_30, TMP_Time_gmt_offset_31, TMP_Time_strftime_32, TMP_Time_sunday$q_33, TMP_Time_thursday$q_34, TMP_Time_to_a_35, TMP_Time_to_f_36, TMP_Time_to_i_37, TMP_Time_tuesday$q_38, TMP_Time_wday_39, TMP_Time_wednesday$q_40, TMP_Time_year_41, TMP_Time_cweek_cyear_42;

    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;
    Opal.defs(self, '$at', TMP_Time_at_1 = function $$at(seconds, frac) {
      var self = this;

      
      var result;

      if (Opal.const_get_relative($nesting, 'Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](seconds, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](frac, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    
    }, TMP_Time_at_1.$$arity = -2);
    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](year, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](month, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](day, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](hour, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](min, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](sec, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;
    Opal.defs(self, '$new', TMP_Time_new_2 = function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (utc_offset == null) {
        utc_offset = nil;
      }
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_Time_new_2.$$arity = -1);
    Opal.defs(self, '$local', TMP_Time_local_3 = function $$local(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_Time_local_3.$$arity = -2);
    Opal.defs(self, '$gm', TMP_Time_gm_4 = function $$gm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    
    }, TMP_Time_gm_4.$$arity = -2);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      Opal.alias(self, "mktime", "local");
      return Opal.alias(self, "utc", "gm");
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$now', TMP_Time_now_5 = function $$now() {
      var self = this;

      return self.$new()
    }, TMP_Time_now_5.$$arity = 0);
    
    Opal.defn(self, '$+', TMP_Time_$_6 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Time')['$==='](other))) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_Time_$_6.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Time_$_7 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Time')['$==='](other))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_Time_$_7.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Time_$lt$eq$gt_8 = function(other) {
      var self = this, r = nil;

      if ($truthy(Opal.const_get_relative($nesting, 'Time')['$==='](other))) {
        return self.$to_f()['$<=>'](other.$to_f())
        } else {
        
        r = other['$<=>'](self);
        if ($truthy(r['$nil?']())) {
          return nil
        } else if ($truthy($rb_gt(r, 0))) {
          return -1
        } else if ($truthy($rb_lt(r, 0))) {
          return 1
          } else {
          return 0
        };
      }
    }, TMP_Time_$lt$eq$gt_8.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Time_$eq$eq_9 = function(other) {
      var $a, self = this;

      return ($truthy($a = Opal.const_get_relative($nesting, 'Time')['$==='](other)) ? self.$to_f() === other.$to_f() : $a)
    }, TMP_Time_$eq$eq_9.$$arity = 1);
    
    Opal.defn(self, '$asctime', TMP_Time_asctime_10 = function $$asctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y")
    }, TMP_Time_asctime_10.$$arity = 0);
    Opal.alias(self, "ctime", "asctime");
    
    Opal.defn(self, '$day', TMP_Time_day_11 = function $$day() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate()
    }, TMP_Time_day_11.$$arity = 0);
    
    Opal.defn(self, '$yday', TMP_Time_yday_12 = function $$yday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      
      start_of_year = Opal.const_get_relative($nesting, 'Time').$new(self.$year()).$to_i();
      start_of_day = Opal.const_get_relative($nesting, 'Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus($rb_divide($rb_minus(start_of_day, start_of_year), one_day).$round(), 1);
    }, TMP_Time_yday_12.$$arity = 0);
    
    Opal.defn(self, '$isdst', TMP_Time_isdst_13 = function $$isdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, TMP_Time_isdst_13.$$arity = 0);
    Opal.alias(self, "dst?", "isdst");
    
    Opal.defn(self, '$dup', TMP_Time_dup_14 = function $$dup() {
      var self = this, copy = nil;

      
      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_Time_dup_14.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Time_eql$q_15 = function(other) {
      var $a, self = this;

      return ($truthy($a = other['$is_a?'](Opal.const_get_relative($nesting, 'Time'))) ? self['$<=>'](other)['$zero?']() : $a)
    }, TMP_Time_eql$q_15.$$arity = 1);
    
    Opal.defn(self, '$friday?', TMP_Time_friday$q_16 = function() {
      var self = this;

      return self.$wday() == 5
    }, TMP_Time_friday$q_16.$$arity = 0);
    
    Opal.defn(self, '$hash', TMP_Time_hash_17 = function $$hash() {
      var self = this;

      return 'Time:' + self.getTime()
    }, TMP_Time_hash_17.$$arity = 0);
    
    Opal.defn(self, '$hour', TMP_Time_hour_18 = function $$hour() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours()
    }, TMP_Time_hour_18.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Time_inspect_19 = function $$inspect() {
      var self = this;

      if ($truthy(self['$utc?']())) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      }
    }, TMP_Time_inspect_19.$$arity = 0);
    Opal.alias(self, "mday", "day");
    
    Opal.defn(self, '$min', TMP_Time_min_20 = function $$min() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes()
    }, TMP_Time_min_20.$$arity = 0);
    
    Opal.defn(self, '$mon', TMP_Time_mon_21 = function $$mon() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1
    }, TMP_Time_mon_21.$$arity = 0);
    
    Opal.defn(self, '$monday?', TMP_Time_monday$q_22 = function() {
      var self = this;

      return self.$wday() == 1
    }, TMP_Time_monday$q_22.$$arity = 0);
    Opal.alias(self, "month", "mon");
    
    Opal.defn(self, '$saturday?', TMP_Time_saturday$q_23 = function() {
      var self = this;

      return self.$wday() == 6
    }, TMP_Time_saturday$q_23.$$arity = 0);
    
    Opal.defn(self, '$sec', TMP_Time_sec_24 = function $$sec() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds()
    }, TMP_Time_sec_24.$$arity = 0);
    
    Opal.defn(self, '$succ', TMP_Time_succ_25 = function $$succ() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    }, TMP_Time_succ_25.$$arity = 0);
    
    Opal.defn(self, '$usec', TMP_Time_usec_26 = function $$usec() {
      var self = this;

      return self.getMilliseconds() * 1000
    }, TMP_Time_usec_26.$$arity = 0);
    
    Opal.defn(self, '$zone', TMP_Time_zone_27 = function $$zone() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\((.+)\)(?:\s|$)/)[1]
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, TMP_Time_zone_27.$$arity = 0);
    
    Opal.defn(self, '$getgm', TMP_Time_getgm_28 = function $$getgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    }, TMP_Time_getgm_28.$$arity = 0);
    Opal.alias(self, "getutc", "getgm");
    
    Opal.defn(self, '$gmtime', TMP_Time_gmtime_29 = function $$gmtime() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    }, TMP_Time_gmtime_29.$$arity = 0);
    Opal.alias(self, "utc", "gmtime");
    
    Opal.defn(self, '$gmt?', TMP_Time_gmt$q_30 = function() {
      var self = this;

      return self.is_utc === true
    }, TMP_Time_gmt$q_30.$$arity = 0);
    
    Opal.defn(self, '$gmt_offset', TMP_Time_gmt_offset_31 = function $$gmt_offset() {
      var self = this;

      return -self.getTimezoneOffset() * 60
    }, TMP_Time_gmt_offset_31.$$arity = 0);
    
    Opal.defn(self, '$strftime', TMP_Time_strftime_32 = function $$strftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, TMP_Time_strftime_32.$$arity = 1);
    
    Opal.defn(self, '$sunday?', TMP_Time_sunday$q_33 = function() {
      var self = this;

      return self.$wday() == 0
    }, TMP_Time_sunday$q_33.$$arity = 0);
    
    Opal.defn(self, '$thursday?', TMP_Time_thursday$q_34 = function() {
      var self = this;

      return self.$wday() == 4
    }, TMP_Time_thursday$q_34.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Time_to_a_35 = function $$to_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()]
    }, TMP_Time_to_a_35.$$arity = 0);
    
    Opal.defn(self, '$to_f', TMP_Time_to_f_36 = function $$to_f() {
      var self = this;

      return self.getTime() / 1000
    }, TMP_Time_to_f_36.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_Time_to_i_37 = function $$to_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10)
    }, TMP_Time_to_i_37.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.defn(self, '$tuesday?', TMP_Time_tuesday$q_38 = function() {
      var self = this;

      return self.$wday() == 2
    }, TMP_Time_tuesday$q_38.$$arity = 0);
    Opal.alias(self, "tv_sec", "to_i");
    Opal.alias(self, "tv_usec", "usec");
    Opal.alias(self, "utc?", "gmt?");
    Opal.alias(self, "gmtoff", "gmt_offset");
    Opal.alias(self, "utc_offset", "gmt_offset");
    
    Opal.defn(self, '$wday', TMP_Time_wday_39 = function $$wday() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay()
    }, TMP_Time_wday_39.$$arity = 0);
    
    Opal.defn(self, '$wednesday?', TMP_Time_wednesday$q_40 = function() {
      var self = this;

      return self.$wday() == 3
    }, TMP_Time_wednesday$q_40.$$arity = 0);
    
    Opal.defn(self, '$year', TMP_Time_year_41 = function $$year() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear()
    }, TMP_Time_year_41.$$arity = 0);
    return (Opal.defn(self, '$cweek_cyear', TMP_Time_cweek_cyear_42 = function $$cweek_cyear() {
      var $a, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      
      jan01 = Opal.const_get_relative($nesting, 'Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ($truthy(($truthy($a = $rb_le(jan01_wday, 4)) ? jan01_wday['$!='](0) : $a))) {
        offset = $rb_minus(jan01_wday, 1)
        } else {
        
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = $rb_divide($rb_plus(self.$yday(), offset), 7.0).$ceil();
      if ($truthy($rb_le(week, 0))) {
        return Opal.const_get_relative($nesting, 'Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        
        dec31 = Opal.const_get_relative($nesting, 'Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ($truthy(($truthy($a = $rb_le(dec31_wday, 3)) ? dec31_wday['$!='](0) : $a))) {
          
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }, TMP_Time_cweek_cyear_42.$$arity = 0), nil) && 'cweek_cyear';
  })($nesting[0], Date, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/struct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$>', '$length', '$class', '$each_with_index', '$[]', '$[]=', '$-', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$join', '$each_pair', '$inspect', '$inject', '$flatten', '$to_a', '$respond_to?', '$dig']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Struct_new_1, TMP_Struct_define_struct_attribute_8, TMP_Struct_members_9, TMP_Struct_inherited_11, TMP_Struct_initialize_13, TMP_Struct_members_14, TMP_Struct_hash_15, TMP_Struct_$$_16, TMP_Struct_$$$eq_17, TMP_Struct_$eq$eq_18, TMP_Struct_eql$q_19, TMP_Struct_each_20, TMP_Struct_each_pair_23, TMP_Struct_length_26, TMP_Struct_to_a_28, TMP_Struct_inspect_30, TMP_Struct_to_h_32, TMP_Struct_values_at_34, TMP_Struct_dig_35;

    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    Opal.defs(self, '$new', TMP_Struct_new_1 = function(const_name, $a_rest) {
      var TMP_2, TMP_3, self = this, args, $iter = TMP_Struct_new_1.$$p, block = $iter || nil, klass = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Struct_new_1.$$p = null;
      
      if ($truthy(const_name)) {
        
        try {
          const_name = Opal.const_get_relative($nesting, 'Opal')['$const_name!'](const_name)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'TypeError'), Opal.const_get_relative($nesting, 'NameError')])) {
            try {
              
              args.$unshift(const_name);
              const_name = nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };};
      $send(args, 'map', [], (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](arg, Opal.const_get_relative($nesting, 'String'), "to_str")}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
      klass = $send(Opal.const_get_relative($nesting, 'Class'), 'new', [self], (TMP_3 = function(){var self = TMP_3.$$s || this, TMP_4;

      
        $send(args, 'each', [], (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
        return self.$define_struct_attribute(arg)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        return (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_new_5;

          
          
          Opal.defn(self, '$new', TMP_new_5 = function($a_rest) {
            var self = this, args, instance = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            instance = self.$allocate();
            instance.$$data = {};;
            $send(instance, 'initialize', Opal.to_a(args));
            return instance;
          }, TMP_new_5.$$arity = -1);
          return Opal.alias(self, "[]", "new");
        })(Opal.get_singleton_class(self), $nesting);}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));
      if ($truthy(block)) {
        $send(klass, 'module_eval', [], block.$to_proc())};
      if ($truthy(const_name)) {
        Opal.const_get_relative($nesting, 'Struct').$const_set(const_name, klass)};
      return klass;
    }, TMP_Struct_new_1.$$arity = -2);
    Opal.defs(self, '$define_struct_attribute', TMP_Struct_define_struct_attribute_8 = function $$define_struct_attribute(name) {
      var TMP_6, TMP_7, self = this;

      
      if (self['$=='](Opal.const_get_relative($nesting, 'Struct'))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      $send(self, 'define_method', [name], (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.$$data[name]}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
      return $send(self, 'define_method', ["" + (name) + "="], (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
      return self.$$data[name] = value}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
    }, TMP_Struct_define_struct_attribute_8.$$arity = 1);
    Opal.defs(self, '$members', TMP_Struct_members_9 = function $$members() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      
      if (self['$=='](Opal.const_get_relative($nesting, 'Struct'))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the Struct class has no members")};
      return (self.members = ($truthy($a = self.members) ? $a : []));
    }, TMP_Struct_members_9.$$arity = 0);
    Opal.defs(self, '$inherited', TMP_Struct_inherited_11 = function $$inherited(klass) {
      var TMP_10, self = this, members = nil;
      if (self.members == null) self.members = nil;

      
      members = self.members;
      return $send(klass, 'instance_eval', [], (TMP_10 = function(){var self = TMP_10.$$s || this;

      return (self.members = members)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10));
    }, TMP_Struct_inherited_11.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Struct_initialize_13 = function $$initialize($a_rest) {
      var TMP_12, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "struct size differs")};
      return $send(self.$class().$members(), 'each_with_index', [], (TMP_12 = function(name, index){var self = TMP_12.$$s || this, $writer = nil;
if (name == null) name = nil;if (index == null) index = nil;
      
        $writer = [name, args['$[]'](index)];
        $send(self, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12));
    }, TMP_Struct_initialize_13.$$arity = -1);
    
    Opal.defn(self, '$members', TMP_Struct_members_14 = function $$members() {
      var self = this;

      return self.$class().$members()
    }, TMP_Struct_members_14.$$arity = 0);
    
    Opal.defn(self, '$hash', TMP_Struct_hash_15 = function $$hash() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Hash').$new(self.$$data).$hash()
    }, TMP_Struct_hash_15.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Struct_$$_16 = function(name) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](name))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
      
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](name, Opal.const_get_relative($nesting, 'String'), "to_str");
      return self.$$data[name];
    }, TMP_Struct_$$_16.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Struct_$$$eq_17 = function(name, value) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](name))) {
        if ($truthy(self.$class().$members()['$include?'](name.$to_sym()))) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](name, Opal.const_get_relative($nesting, 'String'), "to_str");
      return self.$$data[name] = value;
    }, TMP_Struct_$$$eq_17.$$arity = 2);
    
    Opal.defn(self, '$==', TMP_Struct_$eq$eq_18 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if (Opal.const_get_relative($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_Struct_$eq$eq_18.$$arity = 1);
    
    Opal.defn(self, '$eql?', TMP_Struct_eql$q_19 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if (Opal.const_get_relative($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_Struct_eql$q_19.$$arity = 1);
    
    Opal.defn(self, '$each', TMP_Struct_each_20 = function $$each() {
      var TMP_21, TMP_22, self = this, $iter = TMP_Struct_each_20.$$p, $yield = $iter || nil;

      if ($iter) TMP_Struct_each_20.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each"], (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))
      };
      $send(self.$class().$members(), 'each', [], (TMP_22 = function(name){var self = TMP_22.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, self['$[]'](name));}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22));
      return self;
    }, TMP_Struct_each_20.$$arity = 0);
    
    Opal.defn(self, '$each_pair', TMP_Struct_each_pair_23 = function $$each_pair() {
      var TMP_24, TMP_25, self = this, $iter = TMP_Struct_each_pair_23.$$p, $yield = $iter || nil;

      if ($iter) TMP_Struct_each_pair_23.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_pair"], (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$size()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24))
      };
      $send(self.$class().$members(), 'each', [], (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, [name, self['$[]'](name)]);}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));
      return self;
    }, TMP_Struct_each_pair_23.$$arity = 0);
    
    Opal.defn(self, '$length', TMP_Struct_length_26 = function $$length() {
      var self = this;

      return self.$class().$members().$length()
    }, TMP_Struct_length_26.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$to_a', TMP_Struct_to_a_28 = function $$to_a() {
      var TMP_27, self = this;

      return $send(self.$class().$members(), 'map', [], (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
    }, TMP_Struct_to_a_28.$$arity = 0);
    Opal.alias(self, "values", "to_a");
    
    Opal.defn(self, '$inspect', TMP_Struct_inspect_30 = function $$inspect() {
      var $a, TMP_29, self = this, result = nil;

      
      result = "#<struct ";
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Struct')['$==='](self)) ? self.$class().$name() : $a))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], (TMP_29 = function(name, value){var self = TMP_29.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    }, TMP_Struct_inspect_30.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.defn(self, '$to_h', TMP_Struct_to_h_32 = function $$to_h() {
      var TMP_31, self = this;

      return $send(self.$class().$members(), 'inject', [$hash2([], {})], (TMP_31 = function(h, name){var self = TMP_31.$$s || this, $writer = nil;
if (h == null) h = nil;if (name == null) name = nil;
      
        
        $writer = [name, self['$[]'](name)];
        $send(h, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return h;}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31))
    }, TMP_Struct_to_h_32.$$arity = 0);
    
    Opal.defn(self, '$values_at', TMP_Struct_values_at_34 = function $$values_at($a_rest) {
      var TMP_33, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      args = $send(args, 'map', [], (TMP_33 = function(arg){var self = TMP_33.$$s || this;
if (arg == null) arg = nil;
      return arg.$$is_range ? arg.$to_a() : arg}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33)).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, TMP_Struct_values_at_34.$$arity = -1);
    return (Opal.defn(self, '$dig', TMP_Struct_dig_35 = function $$dig(key, $a_rest) {
      var self = this, keys, item = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      keys = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        keys[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key))) {
        item = self.$$data[key] || nil
        } else {
        item = nil
      };
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, TMP_Struct_dig_35.$$arity = -2), nil) && 'dig';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $writer = nil;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$-', '$extend']);
  
  (function($base, $super, $parent_nesting) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IO_tty$q_1, TMP_IO_closed$q_2, TMP_IO_write_3, TMP_IO_flush_4;

    def.tty = def.closed = nil;
    
    Opal.const_set($nesting[0], 'SEEK_SET', 0);
    Opal.const_set($nesting[0], 'SEEK_CUR', 1);
    Opal.const_set($nesting[0], 'SEEK_END', 2);
    
    Opal.defn(self, '$tty?', TMP_IO_tty$q_1 = function() {
      var self = this;

      return self.tty
    }, TMP_IO_tty$q_1.$$arity = 0);
    
    Opal.defn(self, '$closed?', TMP_IO_closed$q_2 = function() {
      var self = this;

      return self.closed
    }, TMP_IO_closed$q_2.$$arity = 0);
    self.$attr_accessor("write_proc");
    
    Opal.defn(self, '$write', TMP_IO_write_3 = function $$write(string) {
      var self = this;

      
      self.write_proc(string);
      return string.$size();
    }, TMP_IO_write_3.$$arity = 1);
    self.$attr_accessor("sync", "tty");
    
    Opal.defn(self, '$flush', TMP_IO_flush_4 = function $$flush() {
      var self = this;

      return nil
    }, TMP_IO_flush_4.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Writable, self = $Writable = $module($base, 'Writable');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Writable_$lt$lt_5, TMP_Writable_print_7, TMP_Writable_puts_9;

      
      
      Opal.defn(self, '$<<', TMP_Writable_$lt$lt_5 = function(string) {
        var self = this;

        
        self.$write(string);
        return self;
      }, TMP_Writable_$lt$lt_5.$$arity = 1);
      
      Opal.defn(self, '$print', TMP_Writable_print_7 = function $$print($a_rest) {
        var TMP_6, self = this, args;
        if ($gvars[","] == null) $gvars[","] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        self.$write($send(args, 'map', [], (TMP_6 = function(arg){var self = TMP_6.$$s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6)).$join($gvars[","]));
        return nil;
      }, TMP_Writable_print_7.$$arity = -1);
      
      Opal.defn(self, '$puts', TMP_Writable_puts_9 = function $$puts($a_rest) {
        var TMP_8, self = this, args, newline = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        newline = $gvars["/"];
        if ($truthy(args['$empty?']())) {
          self.$write($gvars["/"])
          } else {
          self.$write($send(args, 'map', [], (TMP_8 = function(arg){var self = TMP_8.$$s || this;
if (arg == null) arg = nil;
          return self.$String(arg).$chomp()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8)).$concat([nil]).$join(newline))
        };
        return nil;
      }, TMP_Writable_puts_9.$$arity = -1);
    })($nesting[0], $nesting);
    return (function($base, $parent_nesting) {
      var $Readable, self = $Readable = $module($base, 'Readable');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Readable_readbyte_10, TMP_Readable_readchar_11, TMP_Readable_readline_12, TMP_Readable_readpartial_13;

      
      
      Opal.defn(self, '$readbyte', TMP_Readable_readbyte_10 = function $$readbyte() {
        var self = this;

        return self.$getbyte()
      }, TMP_Readable_readbyte_10.$$arity = 0);
      
      Opal.defn(self, '$readchar', TMP_Readable_readchar_11 = function $$readchar() {
        var self = this;

        return self.$getc()
      }, TMP_Readable_readchar_11.$$arity = 0);
      
      Opal.defn(self, '$readline', TMP_Readable_readline_12 = function $$readline(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"];
        }
        return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
      }, TMP_Readable_readline_12.$$arity = -1);
      
      Opal.defn(self, '$readpartial', TMP_Readable_readpartial_13 = function $$readpartial(integer, outbuf) {
        var self = this;

        if (outbuf == null) {
          outbuf = nil;
        }
        return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
      }, TMP_Readable_readpartial_13.$$arity = -2);
    })($nesting[0], $nesting);
  })($nesting[0], null, $nesting);
  Opal.const_set($nesting[0], 'STDERR', ($gvars.stderr = Opal.const_get_relative($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDIN', ($gvars.stdin = Opal.const_get_relative($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDOUT', ($gvars.stdout = Opal.const_get_relative($nesting, 'IO').$new()));
  var console = Opal.global.console;
  
  $writer = [typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}];
  $send(Opal.const_get_relative($nesting, 'STDOUT'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}];
  $send(Opal.const_get_relative($nesting, 'STDERR'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  Opal.const_get_relative($nesting, 'STDOUT').$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'Writable'));
  return Opal.const_get_relative($nesting, 'STDERR').$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'Writable'));
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/main"] = function(Opal) {
  var TMP_to_s_1, TMP_include_2, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  
  Opal.defs(self, '$to_s', TMP_to_s_1 = function $$to_s() {
    var self = this;

    return "main"
  }, TMP_to_s_1.$$arity = 0);
  return Opal.defs(self, '$include', TMP_include_2 = function $$include(mod) {
    var self = this;

    return Opal.const_get_relative($nesting, 'Object').$include(mod)
  }, TMP_include_2.$$arity = 1);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/dir"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]']);
  return (function($base, $super, $parent_nesting) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_chdir_1, TMP_pwd_2, TMP_home_3;

      
      
      Opal.defn(self, '$chdir', TMP_chdir_1 = function $$chdir(dir) {
        var self = this, $iter = TMP_chdir_1.$$p, $yield = $iter || nil, prev_cwd = nil;

        if ($iter) TMP_chdir_1.$$p = null;
        return (function() { try {
        
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd
        }; })()
      }, TMP_chdir_1.$$arity = 1);
      
      Opal.defn(self, '$pwd', TMP_pwd_2 = function $$pwd() {
        var self = this;

        return Opal.current_dir || '.'
      }, TMP_pwd_2.$$arity = 0);
      Opal.alias(self, "getwd", "pwd");
      return (Opal.defn(self, '$home', TMP_home_3 = function $$home() {
        var $a, self = this;

        return ($truthy($a = Opal.const_get_relative($nesting, 'ENV')['$[]']("HOME")) ? $a : ".")
      }, TMP_home_3.$$arity = 0), nil) && 'home';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$home', '$raise', '$start_with?', '$+', '$sub', '$pwd', '$split', '$unshift', '$join', '$respond_to?', '$coerce_to!', '$basename', '$empty?', '$rindex', '$[]', '$nil?', '$==', '$-', '$length', '$gsub', '$find', '$=~', '$map', '$each_with_index', '$flatten', '$reject', '$end_with?']);
  return (function($base, $super, $parent_nesting) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), windows_root_rx = nil;

    
    Opal.const_set($nesting[0], 'Separator', Opal.const_set($nesting[0], 'SEPARATOR', "/"));
    Opal.const_set($nesting[0], 'ALT_SEPARATOR', nil);
    Opal.const_set($nesting[0], 'PATH_SEPARATOR', ":");
    Opal.const_set($nesting[0], 'FNM_SYSCASE', 0);
    windows_root_rx = /^[a-zA-Z]:(?:\\|\/)/;
    return (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_expand_path_1, TMP_dirname_2, TMP_basename_3, TMP_extname_4, TMP_exist$q_5, TMP_directory$q_7, TMP_join_11, TMP_split_12;

      
      
      Opal.defn(self, '$expand_path', TMP_expand_path_1 = function $$expand_path(path, basedir) {
        var self = this, sep = nil, sep_chars = nil, new_parts = nil, home = nil, home_path_regexp = nil, path_abs = nil, basedir_abs = nil, parts = nil, leading_sep = nil, abs = nil, new_path = nil;

        if (basedir == null) {
          basedir = nil;
        }
        
        sep = Opal.const_get_relative($nesting, 'SEPARATOR');
        sep_chars = $sep_chars();
        new_parts = [];
        if ($truthy(path[0] === '~' || (basedir && basedir[0] === '~'))) {
          
          home = Opal.const_get_relative($nesting, 'Dir').$home();
          if ($truthy(home)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "couldn't find HOME environment -- expanding `~'")
          };
          if ($truthy(home['$start_with?'](sep))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "non-absolute home")
          };
          home = $rb_plus(home, sep);
          home_path_regexp = new RegExp("" + "^\\~(?:" + (sep) + "|$)");
          path = path.$sub(home_path_regexp, home);
          if ($truthy(basedir)) {
            basedir = basedir.$sub(home_path_regexp, home)};};
        if ($truthy(basedir)) {
          } else {
          basedir = Opal.const_get_relative($nesting, 'Dir').$pwd()
        };
        path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);
        basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);
        if ($truthy(path_abs)) {
          
          parts = path.$split(new RegExp("" + "[" + (sep_chars) + "]"));
          leading_sep = windows_root_rx.test(path) ? '' : path.$sub(new RegExp("" + "^([" + (sep_chars) + "]+).*$"), "\\1");
          abs = true;
          } else {
          
          parts = $rb_plus(basedir.$split(new RegExp("" + "[" + (sep_chars) + "]")), path.$split(new RegExp("" + "[" + (sep_chars) + "]")));
          leading_sep = windows_root_rx.test(basedir) ? '' : basedir.$sub(new RegExp("" + "^([" + (sep_chars) + "]+).*$"), "\\1");
          abs = basedir_abs;
        };
        
        var part;
        for (var i = 0, ii = parts.length; i < ii; i++) {
          part = parts[i];

          if (
            (part === nil) ||
            (part === ''  && ((new_parts.length === 0) || abs)) ||
            (part === '.' && ((new_parts.length === 0) || abs))
          ) {
            continue;
          }
          if (part === '..') {
            new_parts.pop();
          } else {
            new_parts.push(part);
          }
        }

        if (!abs && parts[0] !== '.') {
          new_parts.$unshift(".")
        }
      ;
        new_path = new_parts.$join(sep);
        if ($truthy(abs)) {
          new_path = $rb_plus(leading_sep, new_path)};
        return new_path;
      }, TMP_expand_path_1.$$arity = -2);
      Opal.alias(self, "realpath", "expand_path");
      
      // Coerce a given path to a path string using #to_path and #to_str
      function $coerce_to_path(path) {
        if ($truthy((path)['$respond_to?']("to_path"))) {
          path = path.$to_path();
        }

        path = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](path, Opal.const_get_relative($nesting, 'String'), "to_str");

        return path;
      }

      // Return a RegExp compatible char class
      function $sep_chars() {
        if (Opal.const_get_relative($nesting, 'ALT_SEPARATOR') === nil) {
          return Opal.escape_regexp(Opal.const_get_relative($nesting, 'SEPARATOR'));
        } else {
          return Opal.escape_regexp($rb_plus(Opal.const_get_relative($nesting, 'SEPARATOR'), Opal.const_get_relative($nesting, 'ALT_SEPARATOR')));
        }
      }
    ;
      
      Opal.defn(self, '$dirname', TMP_dirname_2 = function $$dirname(path) {
        var self = this, sep_chars = nil;

        
        sep_chars = $sep_chars();
        path = $coerce_to_path(path);
        
        var absolute = path.match(new RegExp("" + "^[" + (sep_chars) + "]"));

        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove trailing separators
        path = path.replace(new RegExp("" + "[^" + (sep_chars) + "]+$"), ''); // remove trailing basename
        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove final trailing separators

        if (path === '') {
          return absolute ? '/' : '.';
        }

        return path;
      ;
      }, TMP_dirname_2.$$arity = 1);
      
      Opal.defn(self, '$basename', TMP_basename_3 = function $$basename(name, suffix) {
        var self = this, sep_chars = nil;

        if (suffix == null) {
          suffix = nil;
        }
        
        sep_chars = $sep_chars();
        name = $coerce_to_path(name);
        
        if (name.length == 0) {
          return name;
        }

        if (suffix !== nil) {
          suffix = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](suffix, Opal.const_get_relative($nesting, 'String'), "to_str")
        } else {
          suffix = null;
        }

        name = name.replace(new RegExp("" + "(.)[" + (sep_chars) + "]*$"), '$1');
        name = name.replace(new RegExp("" + "^(?:.*[" + (sep_chars) + "])?([^" + (sep_chars) + "]+)$"), '$1');

        if (suffix === ".*") {
          name = name.replace(/\.[^\.]+$/, '');
        } else if(suffix !== null) {
          suffix = Opal.escape_regexp(suffix);
          name = name.replace(new RegExp("" + (suffix) + "$"), '');
        }

        return name;
      ;
      }, TMP_basename_3.$$arity = -2);
      
      Opal.defn(self, '$extname', TMP_extname_4 = function $$extname(path) {
        var $a, self = this, filename = nil, last_dot_idx = nil;

        
        path = $coerce_to_path(path);;
        filename = self.$basename(path);
        if ($truthy(filename['$empty?']())) {
          return ""};
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if ($truthy(($truthy($a = last_dot_idx['$nil?']()) ? $a : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) {
          return ""
          } else {
          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))
        };
      }, TMP_extname_4.$$arity = 1);
      
      Opal.defn(self, '$exist?', TMP_exist$q_5 = function(path) {
        var self = this;

        return Opal.modules[path] != null
      }, TMP_exist$q_5.$$arity = 1);
      Opal.alias(self, "exists?", "exist?");
      
      Opal.defn(self, '$directory?', TMP_directory$q_7 = function(path) {
        var TMP_6, self = this, files = nil, file = nil;

        
        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub(new RegExp("" + "(^." + (Opal.const_get_relative($nesting, 'SEPARATOR')) + "+|" + (Opal.const_get_relative($nesting, 'SEPARATOR')) + "+$)"));
        file = $send(files, 'find', [], (TMP_6 = function(file){var self = TMP_6.$$s || this;
if (file == null) file = nil;
        return file['$=~'](new RegExp("" + "^" + (path)))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
        return file;
      }, TMP_directory$q_7.$$arity = 1);
      
      Opal.defn(self, '$join', TMP_join_11 = function $$join($a_rest) {
        var TMP_8, TMP_9, TMP_10, self = this, paths, result = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        paths = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          paths[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        if (paths.$length()['$=='](0)) {
          return ""};
        result = "";
        paths = $send(paths.$flatten().$each_with_index(), 'map', [], (TMP_8 = function(item, index){var self = TMP_8.$$s || this, $a;
if (item == null) item = nil;if (index == null) index = nil;
        if ($truthy((($a = index['$=='](0)) ? item['$empty?']() : index['$=='](0)))) {
            return Opal.const_get_relative($nesting, 'SEPARATOR')
          } else if ($truthy((($a = paths.$length()['$==']($rb_plus(index, 1))) ? item['$empty?']() : paths.$length()['$==']($rb_plus(index, 1))))) {
            return Opal.const_get_relative($nesting, 'SEPARATOR')
            } else {
            return item
          }}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8));
        paths = $send(paths, 'reject', [], (TMP_9 = function(path){var self = TMP_9.$$s || this;
if (path == null) path = nil;
        return path['$empty?']()}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
        $send(paths, 'each_with_index', [], (TMP_10 = function(item, index){var self = TMP_10.$$s || this, $a, next_item = nil;
if (item == null) item = nil;if (index == null) index = nil;
        
          next_item = paths['$[]']($rb_plus(index, 1));
          if ($truthy(next_item['$nil?']())) {
            return (result = "" + (result) + (item))
            } else {
            
            if ($truthy(($truthy($a = item['$end_with?'](Opal.const_get_relative($nesting, 'SEPARATOR'))) ? next_item['$start_with?'](Opal.const_get_relative($nesting, 'SEPARATOR')) : $a))) {
              item = item.$sub(new RegExp("" + (Opal.const_get_relative($nesting, 'SEPARATOR')) + "+$"), "")};
            if ($truthy(($truthy($a = item['$end_with?'](Opal.const_get_relative($nesting, 'SEPARATOR'))) ? $a : next_item['$start_with?'](Opal.const_get_relative($nesting, 'SEPARATOR'))))) {
              return (result = "" + (result) + (item))
              } else {
              return (result = "" + (result) + (item) + (Opal.const_get_relative($nesting, 'SEPARATOR')))
            };
          };}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10));
        return result;
      }, TMP_join_11.$$arity = -1);
      return (Opal.defn(self, '$split', TMP_split_12 = function $$split(path) {
        var self = this;

        return path.$split(Opal.const_get_relative($nesting, 'SEPARATOR'))
      }, TMP_split_12.$$arity = 1), nil) && 'split';
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], Opal.const_get_relative($nesting, 'IO'), $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/process"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$const_set', '$size', '$<<', '$__register_clock__', '$to_f', '$now', '$new', '$[]', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    function $Process(){};
    var self = $Process = $klass($base, $super, 'Process', $Process);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Process___register_clock___1, TMP_Process_pid_2, TMP_Process_times_3, TMP_Process_clock_gettime_4, monotonic = nil;

    
    self.__clocks__ = [];
    Opal.defs(self, '$__register_clock__', TMP_Process___register_clock___1 = function $$__register_clock__(name, func) {
      var self = this;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      self.$const_set(name, self.__clocks__.$size());
      return self.__clocks__['$<<'](func);
    }, TMP_Process___register_clock___1.$$arity = 2);
    self.$__register_clock__("CLOCK_REALTIME", function() { return Date.now() });
    monotonic = false;
    
    if (Opal.global.performance) {
      monotonic = function() {
        return performance.now()
      };
    }
    else if (Opal.global.process && process.hrtime) {
      // let now be the base to get smaller numbers
      var hrtime_base = process.hrtime();

      monotonic = function() {
        var hrtime = process.hrtime(hrtime_base);
        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;
        return ((hrtime[0] * 1000) + (us / 1000));
      };
    }
  ;
    if ($truthy(monotonic)) {
      self.$__register_clock__("CLOCK_MONOTONIC", monotonic)};
    Opal.defs(self, '$pid', TMP_Process_pid_2 = function $$pid() {
      var self = this;

      return 0
    }, TMP_Process_pid_2.$$arity = 0);
    Opal.defs(self, '$times', TMP_Process_times_3 = function $$times() {
      var self = this, t = nil;

      
      t = Opal.const_get_relative($nesting, 'Time').$now().$to_f();
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Benchmark'), 'Tms').$new(t, t, t, t, t);
    }, TMP_Process_times_3.$$arity = 0);
    return Opal.defs(self, '$clock_gettime', TMP_Process_clock_gettime_4 = function $$clock_gettime(clock_id, unit) {
      var $a, self = this, clock = nil;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      if (unit == null) {
        unit = "float_second";
      }
      
      ($truthy($a = (clock = self.__clocks__['$[]'](clock_id))) ? $a : self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Errno'), 'EINVAL'), "" + "clock_gettime(" + (clock_id) + ") " + (self.__clocks__['$[]'](clock_id))));
      
      var ms = clock();
      switch (unit) {
        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)
        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float
        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float
        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer
        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer
        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer
        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer
        default: self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unexpected unit: " + (unit))
      }
    ;
    }, TMP_Process_clock_gettime_4.$$arity = -2);
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Signal(){};
    var self = $Signal = $klass($base, $super, 'Signal', $Signal);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Signal_trap_5;

    return Opal.defs(self, '$trap', TMP_Signal_trap_5 = function $$trap($a_rest) {
      var self = this;

      return nil
    }, TMP_Signal_trap_5.$$arity = -1)
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $GC(){};
    var self = $GC = $klass($base, $super, 'GC', $GC);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_GC_start_6;

    return Opal.defs(self, '$start', TMP_GC_start_6 = function $$start() {
      var self = this;

      return nil
    }, TMP_GC_start_6.$$arity = 0)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/random/seedrandom"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $Random(){};
    var self = $Random = $klass($base, $super, 'Random', $Random);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    /* jshint ignore:start */
    /*
    seedrandom.min.js 2.4.1 (original source: https://github.com/davidbau/seedrandom/blob/2.4.1/seedrandom.min.js)
    How to update:
     . Chekout the latest release from GitHub: https://github.com/davidbau/seedrandom
     . Apply the following commits:
     .. Check for hasOwnProperty in flatten(): https://github.com/iliabylich/seedrandom/commit/06a94f59ae3d3956c8b1a2488334cafab6744b04
     .. Add a module id for the RequireJS `define` method: https://github.com/Mogztter/seedrandom/commit/e047540c3d81f955cab9a01d17b8141d439fbd7d
    */
    !function(a,b){function c(c,j,k){var n=[];j=1==j?{entropy:!0}:j||{};var s=g(f(j.entropy?[c,i(a)]:null==c?h():c,3),n),t=new d(n),u=function(){for(var a=t.g(m),b=p,c=0;a<q;)a=(a+c)*l,b*=l,c=t.g(1);for(;a>=r;)a/=2,b/=2,c>>>=1;return(a+c)/b};return u.int32=function(){return 0|t.g(4)},u.quick=function(){return t.g(4)/4294967296},u.double=u,g(i(t.S),a),(j.pass||k||function(a,c,d,f){return f&&(f.S&&e(f,t),a.state=function(){return e(t,{})}),d?(b[o]=a,c):a})(u,s,"global"in j?j.global:this==b,j.state)}function d(a){var b,c=a.length,d=this,e=0,f=d.i=d.j=0,g=d.S=[];for(c||(a=[c++]);e<l;)g[e]=e++;for(e=0;e<l;e++)g[e]=g[f=s&f+a[e%c]+(b=g[e])],g[f]=b;(d.g=function(a){for(var b,c=0,e=d.i,f=d.j,g=d.S;a--;)b=g[e=s&e+1],c=c*l+g[s&(g[e]=g[f=s&f+b])+(g[f]=b)];return d.i=e,d.j=f,c})(l)}function e(a,b){return b.i=a.i,b.j=a.j,b.S=a.S.slice(),b}function f(a,b){var c,d=[],e=typeof a;if(b&&"object"==e)for(c in a)if(a.hasOwnProperty(c))try{d.push(f(a[c],b-1))}catch(a){}return d.length?d:"string"==e?a:a+"\0"}function g(a,b){for(var c,d=a+"",e=0;e<d.length;)b[s&e]=s&(c^=19*b[s&e])+d.charCodeAt(e++);return i(b)}function h(){try{if(j)return i(j.randomBytes(l));var b=new Uint8Array(l);return(k.crypto||k.msCrypto).getRandomValues(b),i(b)}catch(b){var c=k.navigator,d=c&&c.plugins;return[+new Date,k,d,k.screen,i(a)]}}function i(a){return String.fromCharCode.apply(0,a)}var j,k=this,l=256,m=6,n=52,o="random",p=b.pow(l,m),q=b.pow(2,n),r=2*q,s=l-1;if(b["seed"+o]=c,g(b.random(),a),"object"==typeof module&&module.exports){module.exports=c;try{j=require("crypto")}catch(a){}}else"function"==typeof define&&define.amd&&define('seekrandom',function(){return c})}([],Math);
    /* jshint ignore:end */
  
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/random"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_reader', '$coerce_to!', '$reseed', '$new_seed', '$rand', '$seed', '$new', '$===', '$==', '$state', '$encode', '$join', '$map', '$times', '$chr', '$raise']);
  
  self.$require("corelib/random/seedrandom.js");
  return (function($base, $super, $parent_nesting) {
    function $Random(){};
    var self = $Random = $klass($base, $super, 'Random', $Random);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Random_initialize_1, TMP_Random_reseed_2, TMP_Random_new_seed_3, TMP_Random_rand_4, TMP_Random_srand_5, TMP_Random_$eq$eq_6, TMP_Random_bytes_8, TMP_Random_rand_9;

    
    self.$attr_reader("seed", "state");
    
    Opal.defn(self, '$initialize', TMP_Random_initialize_1 = function $$initialize(seed) {
      var self = this;

      if (seed == null) {
        seed = Opal.const_get_relative($nesting, 'Random').$new_seed();
      }
      
      seed = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](seed, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      self.state = seed;
      return self.$reseed(seed);
    }, TMP_Random_initialize_1.$$arity = -1);
    
    Opal.defn(self, '$reseed', TMP_Random_reseed_2 = function $$reseed(seed) {
      var self = this;

      
      self.seed = seed;
      return self.$rng = new Math.seedrandom(seed);;
    }, TMP_Random_reseed_2.$$arity = 1);
    var $seed_generator = new Math.seedrandom('opal', { entropy: true });;
    Opal.defs(self, '$new_seed', TMP_Random_new_seed_3 = function $$new_seed() {
      var self = this;

      
      return Math.abs($seed_generator.int32());
    
    }, TMP_Random_new_seed_3.$$arity = 0);
    Opal.defs(self, '$rand', TMP_Random_rand_4 = function $$rand(limit) {
      var self = this;

      return Opal.const_get_relative($nesting, 'DEFAULT').$rand(limit)
    }, TMP_Random_rand_4.$$arity = -1);
    Opal.defs(self, '$srand', TMP_Random_srand_5 = function $$srand(n) {
      var self = this, previous_seed = nil;

      if (n == null) {
        n = Opal.const_get_relative($nesting, 'Random').$new_seed();
      }
      
      n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      previous_seed = Opal.const_get_relative($nesting, 'DEFAULT').$seed();
      Opal.const_get_relative($nesting, 'DEFAULT').$reseed(n);
      return previous_seed;
    }, TMP_Random_srand_5.$$arity = -1);
    Opal.const_set($nesting[0], 'DEFAULT', self.$new(self.$new_seed()));
    
    Opal.defn(self, '$==', TMP_Random_$eq$eq_6 = function(other) {
      var $a, self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Random')['$==='](other))) {
        } else {
        return false
      };
      return (($a = self.$seed()['$=='](other.$seed())) ? self.$state()['$=='](other.$state()) : self.$seed()['$=='](other.$seed()));
    }, TMP_Random_$eq$eq_6.$$arity = 1);
    
    Opal.defn(self, '$bytes', TMP_Random_bytes_8 = function $$bytes(length) {
      var TMP_7, self = this;

      
      length = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](length, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      return $send(length.$times(), 'map', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

      return self.$rand(255).$chr()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7)).$join().$encode(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Encoding'), 'ASCII_8BIT'));
    }, TMP_Random_bytes_8.$$arity = 1);
    return (Opal.defn(self, '$rand', TMP_Random_rand_9 = function $$rand(limit) {
      var self = this;

      
      function randomFloat() {
        self.state++;
        return self.$rng.quick();
      }

      function randomInt() {
        return Math.floor(randomFloat() * limit);
      }

      function randomRange() {
        var min = limit.begin,
            max = limit.end;

        if (min === nil || max === nil) {
          return nil;
        }

        var length = max - min;

        if (length < 0) {
          return nil;
        }

        if (length === 0) {
          return min;
        }

        if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
          length++;
        }

        return self.$rand(length) + min;
      }

      if (limit == null) {
        return randomFloat();
      } else if (limit.$$is_range) {
        return randomRange();
      } else if (limit.$$is_number) {
        if (limit <= 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        if (limit % 1 === 0) {
          // integer
          return randomInt();
        } else {
          return randomFloat() * limit;
        }
      } else {
        limit = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](limit, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (limit <= 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        return randomInt();
      }
    
    }, TMP_Random_rand_9.$$arity = -1), nil) && 'rand';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/unsupported"] = function(Opal) {
  var TMP_public_30, TMP_private_31, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$raise', '$warn', '$%']);
  
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      Opal.const_get_relative($nesting, 'Kernel').$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }
;
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_$lt$lt_1, TMP_String_capitalize$B_2, TMP_String_chomp$B_3, TMP_String_chop$B_4, TMP_String_downcase$B_5, TMP_String_gsub$B_6, TMP_String_lstrip$B_7, TMP_String_next$B_8, TMP_String_reverse$B_9, TMP_String_slice$B_10, TMP_String_squeeze$B_11, TMP_String_strip$B_12, TMP_String_sub$B_13, TMP_String_succ$B_14, TMP_String_swapcase$B_15, TMP_String_tr$B_16, TMP_String_tr_s$B_17, TMP_String_upcase$B_18;

    
    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";;
    
    Opal.defn(self, '$<<', TMP_String_$lt$lt_1 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("<<"))
    }, TMP_String_$lt$lt_1.$$arity = -1);
    
    Opal.defn(self, '$capitalize!', TMP_String_capitalize$B_2 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("capitalize!"))
    }, TMP_String_capitalize$B_2.$$arity = -1);
    
    Opal.defn(self, '$chomp!', TMP_String_chomp$B_3 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("chomp!"))
    }, TMP_String_chomp$B_3.$$arity = -1);
    
    Opal.defn(self, '$chop!', TMP_String_chop$B_4 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("chop!"))
    }, TMP_String_chop$B_4.$$arity = -1);
    
    Opal.defn(self, '$downcase!', TMP_String_downcase$B_5 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("downcase!"))
    }, TMP_String_downcase$B_5.$$arity = -1);
    
    Opal.defn(self, '$gsub!', TMP_String_gsub$B_6 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("gsub!"))
    }, TMP_String_gsub$B_6.$$arity = -1);
    
    Opal.defn(self, '$lstrip!', TMP_String_lstrip$B_7 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("lstrip!"))
    }, TMP_String_lstrip$B_7.$$arity = -1);
    
    Opal.defn(self, '$next!', TMP_String_next$B_8 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("next!"))
    }, TMP_String_next$B_8.$$arity = -1);
    
    Opal.defn(self, '$reverse!', TMP_String_reverse$B_9 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("reverse!"))
    }, TMP_String_reverse$B_9.$$arity = -1);
    
    Opal.defn(self, '$slice!', TMP_String_slice$B_10 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("slice!"))
    }, TMP_String_slice$B_10.$$arity = -1);
    
    Opal.defn(self, '$squeeze!', TMP_String_squeeze$B_11 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("squeeze!"))
    }, TMP_String_squeeze$B_11.$$arity = -1);
    
    Opal.defn(self, '$strip!', TMP_String_strip$B_12 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("strip!"))
    }, TMP_String_strip$B_12.$$arity = -1);
    
    Opal.defn(self, '$sub!', TMP_String_sub$B_13 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("sub!"))
    }, TMP_String_sub$B_13.$$arity = -1);
    
    Opal.defn(self, '$succ!', TMP_String_succ$B_14 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("succ!"))
    }, TMP_String_succ$B_14.$$arity = -1);
    
    Opal.defn(self, '$swapcase!', TMP_String_swapcase$B_15 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("swapcase!"))
    }, TMP_String_swapcase$B_15.$$arity = -1);
    
    Opal.defn(self, '$tr!', TMP_String_tr$B_16 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("tr!"))
    }, TMP_String_tr$B_16.$$arity = -1);
    
    Opal.defn(self, '$tr_s!', TMP_String_tr_s$B_17 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("tr_s!"))
    }, TMP_String_tr_s$B_17.$$arity = -1);
    return (Opal.defn(self, '$upcase!', TMP_String_upcase$B_18 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("upcase!"))
    }, TMP_String_upcase$B_18.$$arity = -1), nil) && 'upcase!';
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_freeze_19, TMP_Kernel_frozen$q_20;

    
    var ERROR = "Object freezing is not supported by Opal";;
    
    Opal.defn(self, '$freeze', TMP_Kernel_freeze_19 = function $$freeze() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_freeze_19.$$arity = 0);
    
    Opal.defn(self, '$frozen?', TMP_Kernel_frozen$q_20 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_Kernel_frozen$q_20.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_taint_21, TMP_Kernel_untaint_22, TMP_Kernel_tainted$q_23;

    
    var ERROR = "Object tainting is not supported by Opal";;
    
    Opal.defn(self, '$taint', TMP_Kernel_taint_21 = function $$taint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_taint_21.$$arity = 0);
    
    Opal.defn(self, '$untaint', TMP_Kernel_untaint_22 = function $$untaint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_untaint_22.$$arity = 0);
    
    Opal.defn(self, '$tainted?', TMP_Kernel_tainted$q_23 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_Kernel_tainted$q_23.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_public_24, TMP_Module_private_class_method_25, TMP_Module_private_method_defined$q_26, TMP_Module_private_constant_27;

    
    
    Opal.defn(self, '$public', TMP_Module_public_24 = function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    
    }, TMP_Module_public_24.$$arity = -1);
    Opal.alias(self, "private", "public");
    Opal.alias(self, "protected", "public");
    Opal.alias(self, "nesting", "public");
    
    Opal.defn(self, '$private_class_method', TMP_Module_private_class_method_25 = function $$private_class_method($a_rest) {
      var self = this;

      return self
    }, TMP_Module_private_class_method_25.$$arity = -1);
    Opal.alias(self, "public_class_method", "private_class_method");
    
    Opal.defn(self, '$private_method_defined?', TMP_Module_private_method_defined$q_26 = function(obj) {
      var self = this;

      return false
    }, TMP_Module_private_method_defined$q_26.$$arity = 1);
    
    Opal.defn(self, '$private_constant', TMP_Module_private_constant_27 = function $$private_constant($a_rest) {
      var self = this;

      return nil
    }, TMP_Module_private_constant_27.$$arity = -1);
    Opal.alias(self, "protected_method_defined?", "private_method_defined?");
    Opal.alias(self, "public_instance_methods", "instance_methods");
    return Opal.alias(self, "public_method_defined?", "method_defined?");
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_private_methods_28;

    
    
    Opal.defn(self, '$private_methods', TMP_Kernel_private_methods_28 = function $$private_methods($a_rest) {
      var self = this;

      return []
    }, TMP_Kernel_private_methods_28.$$arity = -1);
    Opal.alias(self, "private_instance_methods", "private_methods");
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_eval_29;

    
    Opal.defn(self, '$eval', TMP_Kernel_eval_29 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "" + "To use Kernel#eval, you must first require 'opal-parser'. " + ("" + "See https://github.com/opal/opal/blob/" + (Opal.const_get_relative($nesting, 'RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."))
    }, TMP_Kernel_eval_29.$$arity = -1)
  })($nesting[0], $nesting);
  Opal.defs(self, '$public', TMP_public_30 = function($a_rest) {
    var self = this;

    return nil
  }, TMP_public_30.$$arity = -1);
  return Opal.defs(self, '$private', TMP_private_31 = function($a_rest) {
    var self = this;

    return nil
  }, TMP_private_31.$$arity = -1);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/string/inheritance");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  self.$require("corelib/random");
  return self.$require("corelib/unsupported");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/logger"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$each', '$define_method', '$call', '$module_function', '$new']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Robe_logger_3;

    
    (function($base, $super, $parent_nesting) {
      function $Logger(){};
      var self = $Logger = $klass($base, $super, 'Logger', $Logger);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Logger_1;

      return $send(["fatal", "info", "warn", "debug", "error"], 'each', [], (TMP_Logger_1 = function(method_name){var self = TMP_Logger_1.$$s || this, TMP_2;
if (method_name == null) method_name = nil;
      return $send(self, 'define_method', [method_name], (TMP_2 = function(text){var self = TMP_2.$$s || this, block;

          block = TMP_2.$$p || nil;
          if (block) TMP_2.$$p = null;if (text == null) text = nil;
        
          if ($truthy(block)) {
            text = block.$call()};
          return console[method_name](text);;}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Logger_1.$$s = self, TMP_Logger_1.$$arity = 1, TMP_Logger_1))
    })($nesting[0], null, $nesting);
    self.$module_function();
    
    Opal.defn(self, '$logger', TMP_Robe_logger_3 = function $$logger() {
      var $a, self = this;
      if (self.logger == null) self.logger = nil;

      return (self.logger = ($truthy($a = self.logger) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Logger').$new()))
    }, TMP_Robe_logger_3.$$arity = 0);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/trace"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$require', '$is_a?', '$sub', '$class', '$debug', '$logger']);
  
  if (Opal.const_get_relative($nesting, 'RUBY_PLATFORM')['$==']("opal")) {
    self.$require("robe/client/logger")
    } else {
    nil
  };
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_trace_1;

    return (Opal.defn(self, '$trace', TMP_Object_trace_1 = function $$trace(file, line, object, method, details) {
      var $a, self = this, is_class = nil, msg = nil;

      if (details == null) {
        details = nil;
      }
      
      is_class = ($truthy($a = object['$is_a?'](Opal.const_get_relative($nesting, 'Class'))) ? $a : self['$is_a?'](Opal.const_get_relative($nesting, 'Module')));
      file = file.$sub("/Users/col/dev/workspace/", "");
      msg = "" + (file) + "[" + (line) + "] " + ((function() {if ($truthy(is_class)) {
        return object
        } else {
        return object.$class()
      }; return nil; })()) + ((function() {if ($truthy(is_class)) {
        return "##"
        } else {
        return "#"
      }; return nil; })()) + ((function() {if ($truthy(method)) {
        return method
        } else {
        return "proc"
      }; return nil; })()) + (details);
      return Opal.const_get_relative($nesting, 'Robe').$logger().$debug(msg);
    }, TMP_Object_trace_1.$$arity = -5), nil) && 'trace'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  
  (function($base, $parent_nesting) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Native_is_a$q_1, TMP_Native_try_convert_2, TMP_Native_convert_3, TMP_Native_call_4, TMP_Native_proc_5, TMP_Native_included_19, TMP_Native_initialize_20, TMP_Native_to_n_21;

    
    Opal.defs(self, '$is_a?', TMP_Native_is_a$q_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, TMP_Native_is_a$q_1.$$arity = 2);
    Opal.defs(self, '$try_convert', TMP_Native_try_convert_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    
    }, TMP_Native_try_convert_2.$$arity = -2);
    Opal.defs(self, '$convert', TMP_Native_convert_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, TMP_Native_convert_3.$$arity = 1);
    Opal.defs(self, '$call', TMP_Native_call_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_Native_call_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ($iter) TMP_Native_call_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    
    }, TMP_Native_call_4.$$arity = -3);
    Opal.defs(self, '$proc', TMP_Native_proc_5 = function $$proc() {
      var TMP_6, self = this, $iter = TMP_Native_proc_5.$$p, block = $iter || nil;

      if ($iter) TMP_Native_proc_5.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
      };
      return $send(Opal.const_get_qualified('::', 'Kernel'), 'proc', [], (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, args, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        $send(args, 'map!', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6));
    }, TMP_Native_proc_5.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_alias_native_11, TMP_Helpers_native_reader_14, TMP_Helpers_native_writer_17, TMP_Helpers_native_accessor_18;

      
      
      Opal.defn(self, '$alias_native', TMP_Helpers_alias_native_11 = function $$alias_native(new$, $old, $kwargs) {
        var TMP_8, TMP_9, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          
            self["native"][old['$[]']($range(0, -2, false))] = Opal.const_get_relative($nesting, 'Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], (TMP_9 = function($a_rest){var self = TMP_9.$$s || this, block, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil;
            if (block) TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ($truthy((value = $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9))
          } else {
          return $send(self, 'define_method', [new$], (TMP_10 = function($a_rest){var self = TMP_10.$$s || this, block, args;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil;
            if (block) TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10))
        }
      }, TMP_Helpers_alias_native_11.$$arity = -2);
      
      Opal.defn(self, '$native_reader', TMP_Helpers_native_reader_14 = function $$native_reader($a_rest) {
        var TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_12 = function(name){var self = TMP_12.$$s || this, TMP_13;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
      }, TMP_Helpers_native_reader_14.$$arity = -1);
      
      Opal.defn(self, '$native_writer', TMP_Helpers_native_writer_17 = function $$native_writer($a_rest) {
        var TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_15 = function(name){var self = TMP_15.$$s || this, TMP_16;
if (name == null) name = nil;
        return $send(self, 'define_method', ["" + (name) + "="], (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
      }, TMP_Helpers_native_writer_17.$$arity = -1);
      
      Opal.defn(self, '$native_accessor', TMP_Helpers_native_accessor_18 = function $$native_accessor($a_rest) {
        var self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, TMP_Helpers_native_accessor_18.$$arity = -1);
    })($nesting[0], $nesting);
    Opal.defs(self, '$included', TMP_Native_included_19 = function $$included(klass) {
      var self = this;

      return klass.$extend(Opal.const_get_relative($nesting, 'Helpers'))
    }, TMP_Native_included_19.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Native_initialize_20 = function $$initialize(native$) {
      var self = this;

      
      if ($truthy(Opal.const_get_qualified('::', 'Kernel')['$native?'](native$))) {
        } else {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return (self["native"] = native$);
    }, TMP_Native_initialize_20.$$arity = 1);
    
    Opal.defn(self, '$to_n', TMP_Native_to_n_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"]
    }, TMP_Native_to_n_21.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_native$q_22, TMP_Kernel_Native_25, TMP_Kernel_Array_26;

    
    
    Opal.defn(self, '$native?', TMP_Kernel_native$q_22 = function(value) {
      var self = this;

      return value == null || !value.$$class
    }, TMP_Kernel_native$q_22.$$arity = 1);
    
    Opal.defn(self, '$Native', TMP_Kernel_Native_25 = function $$Native(obj) {
      var TMP_23, TMP_24, self = this;

      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
        return $send(obj, 'map', [], (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
        return $send(self, 'proc', [], (TMP_24 = function($a_rest){var self = TMP_24.$$s || this, block, args;

          block = TMP_24.$$p || nil;
          if (block) TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24))
        } else {
        return obj
      }
    }, TMP_Kernel_Native_25.$$arity = 1);
    self.$alias_method("_Array", "Array");
    
    Opal.defn(self, '$Array', TMP_Kernel_Array_26 = function $$Array(object, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_Array_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_Array_26.$$p = null;
      
      if ($truthy(self['$native?'](object))) {
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, TMP_Kernel_Array_26.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_$eq$eq_27, TMP_Object_has_key$q_28, TMP_Object_each_29, TMP_Object_$$_30, TMP_Object_$$$eq_31, TMP_Object_merge$B_32, TMP_Object_respond_to$q_33, TMP_Object_respond_to_missing$q_34, TMP_Object_method_missing_35, TMP_Object_nil$q_36, TMP_Object_is_a$q_37, TMP_Object_instance_of$q_38, TMP_Object_class_39, TMP_Object_to_a_40, TMP_Object_inspect_41;

    def["native"] = nil;
    
    self.$include(Opal.const_get_qualified('::', 'Native'));
    
    Opal.defn(self, '$==', TMP_Object_$eq$eq_27 = function(other) {
      var self = this;

      return self["native"] === Opal.const_get_qualified('::', 'Native').$try_convert(other)
    }, TMP_Object_$eq$eq_27.$$arity = 1);
    
    Opal.defn(self, '$has_key?', TMP_Object_has_key$q_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_has_key$q_28.$$arity = 1);
    Opal.alias(self, "key?", "has_key?");
    Opal.alias(self, "include?", "has_key?");
    Opal.alias(self, "member?", "has_key?");
    
    Opal.defn(self, '$each', TMP_Object_each_29 = function $$each($a_rest) {
      var self = this, args, $iter = TMP_Object_each_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_each_29.$$p = null;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      }
    }, TMP_Object_each_29.$$arity = -1);
    
    Opal.defn(self, '$[]', TMP_Object_$$_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.const_get_qualified('::', 'Native').$call(self["native"], key)
      }
    
    }, TMP_Object_$$_30.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Object_$$$eq_31 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = Opal.const_get_qualified('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
        } else {
        return self["native"][key] = native$
      };
    }, TMP_Object_$$$eq_31.$$arity = 2);
    
    Opal.defn(self, '$merge!', TMP_Object_merge$B_32 = function(other) {
      var self = this;

      
      
      other = Opal.const_get_qualified('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_Object_merge$B_32.$$arity = 1);
    
    Opal.defn(self, '$respond_to?', TMP_Object_respond_to$q_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.const_get_qualified('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all)
    }, TMP_Object_respond_to$q_33.$$arity = -2);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Object_respond_to_missing$q_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_respond_to_missing$q_34.$$arity = -2);
    
    Opal.defn(self, '$method_missing', TMP_Object_method_missing_35 = function $$method_missing(mid, $a_rest) {
      var self = this, args, $iter = TMP_Object_method_missing_35.$$p, block = $iter || nil, $writer = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_method_missing_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send(Opal.const_get_qualified('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    
    }, TMP_Object_method_missing_35.$$arity = -2);
    
    Opal.defn(self, '$nil?', TMP_Object_nil$q_36 = function() {
      var self = this;

      return false
    }, TMP_Object_nil$q_36.$$arity = 0);
    
    Opal.defn(self, '$is_a?', TMP_Object_is_a$q_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass)
    }, TMP_Object_is_a$q_37.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$instance_of?', TMP_Object_instance_of$q_38 = function(klass) {
      var self = this;

      return self.$$class === klass
    }, TMP_Object_instance_of$q_38.$$arity = 1);
    
    Opal.defn(self, '$class', TMP_Object_class_39 = function() {
      var self = this;

      return self.$$class
    }, TMP_Object_class_39.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Object_to_a_40 = function $$to_a(options) {
      var self = this, $iter = TMP_Object_to_a_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Object_to_a_40.$$p = null;
      return $send(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a()
    }, TMP_Object_to_a_40.$$arity = -1);
    return (Opal.defn(self, '$inspect', TMP_Object_inspect_41 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, TMP_Object_inspect_41.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_initialize_42, TMP_Array_each_43, TMP_Array_$$_44, TMP_Array_$$$eq_45, TMP_Array_last_46, TMP_Array_length_47, TMP_Array_inspect_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Native'));
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    
    Opal.defn(self, '$initialize', TMP_Array_initialize_42 = function $$initialize(native$, options) {
      var $a, self = this, $iter = TMP_Array_initialize_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Array_initialize_42.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_42, false), [native$], null);
      self.get = ($truthy($a = options['$[]']("get")) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ($truthy($a = options['$[]']("set")) ? $a : options['$[]']("access"));
      self.length = ($truthy($a = options['$[]']("length")) ? $a : "length");
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_Array_initialize_42.$$arity = -2);
    
    Opal.defn(self, '$each', TMP_Array_each_43 = function $$each() {
      var self = this, $iter = TMP_Array_each_43.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_43.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_Array_each_43.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Array_$$_44 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if (Opal.const_get_relative($nesting, 'String')['$===']($case) || Opal.const_get_relative($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
        } else {
        return self["native"][index]
      }}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
        } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_Array_$$_44.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Array_$$$eq_45 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, Opal.const_get_relative($nesting, 'Native').$convert(value))
        } else {
        return self["native"][index] = Opal.const_get_relative($nesting, 'Native').$convert(value)
      }
    }, TMP_Array_$$$eq_45.$$arity = 2);
    
    Opal.defn(self, '$last', TMP_Array_last_46 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      }
    }, TMP_Array_last_46.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_Array_length_47 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, TMP_Array_length_47.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    return (Opal.defn(self, '$inspect', TMP_Array_inspect_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, TMP_Array_inspect_48.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_n_49;

    return (Opal.defn(self, '$to_n', TMP_Numeric_to_n_49 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Numeric_to_n_49.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_to_n_50;

    return (Opal.defn(self, '$to_n', TMP_Proc_to_n_50 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Proc_to_n_50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_n_51;

    return (Opal.defn(self, '$to_n', TMP_String_to_n_51 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_String_to_n_51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Regexp_to_n_52;

    return (Opal.defn(self, '$to_n', TMP_Regexp_to_n_52 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Regexp_to_n_52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_to_n_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_MatchData_to_n_53 = function $$to_n() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_n_53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Struct_to_n_55;

    return (Opal.defn(self, '$to_n', TMP_Struct_to_n_55 = function $$to_n() {
      var TMP_54, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value)}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54));
      return result;
    }, TMP_Struct_to_n_55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_n_56;

    return (Opal.defn(self, '$to_n', TMP_Array_to_n_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push(Opal.const_get_relative($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_Array_to_n_56.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_n_57;

    return (Opal.defn(self, '$to_n', TMP_Boolean_to_n_57 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Boolean_to_n_57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_n_58;

    return (Opal.defn(self, '$to_n', TMP_Time_to_n_58 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Time_to_n_58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_n_59;

    return (Opal.defn(self, '$to_n', TMP_NilClass_to_n_59 = function $$to_n() {
      var self = this;

      return null
    }, TMP_NilClass_to_n_59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_initialize_60, TMP_Hash_to_n_61;

    
    self.$alias_method("_initialize", "initialize");
    
    Opal.defn(self, '$initialize', TMP_Hash_initialize_60 = function $$initialize(defaults) {
      var self = this, $iter = TMP_Hash_initialize_60.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_initialize_60.$$p = null;
      
      if (defaults != null &&
           (defaults.constructor === undefined ||
             defaults.constructor === Object)) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value &&
               (value.constructor === undefined ||
                 value.constructor === Object)) {
            smap[key] = Opal.const_get_relative($nesting, 'Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item &&
                   (item.constructor === undefined ||
                     item.constructor === Object)) {
                return Opal.const_get_relative($nesting, 'Hash').$new(item);
              }

              return self.$Native(item);
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return $send(self, '_initialize', [defaults], block.$to_proc());
    
    }, TMP_Hash_initialize_60.$$arity = -1);
    return (Opal.defn(self, '$to_n', TMP_Hash_to_n_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_Hash_to_n_61.$$arity = 0), nil) && 'to_n';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_native_module_62;

    return (Opal.defn(self, '$native_module', TMP_Module_native_module_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, TMP_Module_native_module_62.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_native_alias_63, TMP_Class_native_class_64;

    
    
    Opal.defn(self, '$native_alias', TMP_Class_native_alias_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    
    }, TMP_Class_native_alias_63.$$arity = 2);
    return (Opal.defn(self, '$native_class', TMP_Class_native_class_64 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, TMP_Class_native_class_64.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/utils"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$size', '$min', '$scan', '$gsub', '$proc', '$===', '$merge', '$to_proc', '$merge!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var $Utils, self = $Utils = $module($base, 'Utils');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Utils_heredoc_1, TMP_Utils_deep_merge_3, TMP_Utils_deep_merge$B_5;

      
      Opal.defs(self, '$heredoc', TMP_Utils_heredoc_1 = function $$heredoc(string) {
        var self = this, indent = nil;

        
        indent = (function() { try {
          return string.$scan(/^[ \t]*(?=\S)/).$min().$size()
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
            try {
              return 0
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }})();
        return string.$gsub(new RegExp("" + "^[ \\t]{" + (indent) + "}"), "");
      }, TMP_Utils_heredoc_1.$$arity = 1);
      Opal.defs(self, '$deep_merge', TMP_Utils_deep_merge_3 = function $$deep_merge(a, b) {
        var TMP_2, self = this, merger = nil;

        
        merger = $send(self, 'proc', [], (TMP_2 = function(key, v1, v2){var self = TMP_2.$$s || this, $a;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Hash')['$==='](v1)) ? Opal.const_get_relative($nesting, 'Hash')['$==='](v2) : $a))) {
            return $send(v1, 'merge', [v2], merger.$to_proc())
            } else {
            return v2
          }}, TMP_2.$$s = self, TMP_2.$$arity = 3, TMP_2));
        return $send(a, 'merge', [b], merger.$to_proc());
      }, TMP_Utils_deep_merge_3.$$arity = 2);
      Opal.defs(self, '$deep_merge!', TMP_Utils_deep_merge$B_5 = function(a, b) {
        var TMP_4, self = this, merger = nil;

        
        merger = $send(self, 'proc', [], (TMP_4 = function(key, v1, v2){var self = TMP_4.$$s || this, $a;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Hash')['$==='](v1)) ? Opal.const_get_relative($nesting, 'Hash')['$==='](v2) : $a))) {
            
            $send(v1, 'merge!', [v2], merger.$to_proc());
            return v1;
            } else {
            return v2
          }}, TMP_4.$$s = self, TMP_4.$$arity = 3, TMP_4));
        return $send(a, 'merge!', [b], merger.$to_proc());
      }, TMP_Utils_deep_merge$B_5.$$arity = 2);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/helpers"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$define_method', '$instance_exec', '$to_proc', '$do', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_defhelper_1, TMP_Element_defhelper$B_4;

        
        Opal.defs(self, '$defhelper', TMP_Element_defhelper_1 = function $$defhelper(name) {
          var TMP_2, self = this, $iter = TMP_Element_defhelper_1.$$p, block = $iter || nil;

          if ($iter) TMP_Element_defhelper_1.$$p = null;
          return $send(self, 'define_method', [name], (TMP_2 = function($a_rest){var self = TMP_2.$$s || this, body, args;

            body = TMP_2.$$p || nil;
            if (body) TMP_2.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            $send(self, 'instance_exec', Opal.to_a(args), block.$to_proc());
            if ($truthy(body)) {
              $send(self, 'do', [], body.$to_proc())};
            return self;}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2))
        }, TMP_Element_defhelper_1.$$arity = 1);
        return Opal.defs(self, '$defhelper!', TMP_Element_defhelper$B_4 = function(name, attribute) {
          var TMP_3, self = this;

          if (attribute == null) {
            attribute = name;
          }
          return $send(self, 'defhelper', ["" + (name) + "!"], (TMP_3 = function(){var self = TMP_3.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

          
            $writer = [attribute, true];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
        }, TMP_Element_defhelper$B_4.$$arity = -2);
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/a"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-', '$defhelper!', '$<<']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $A(){};
          var self = $A = $klass($base, $super, 'A', $A);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_A_1, TMP_A_3;

          
          $send($hash2(["href", "url", "rel", "relative", "target", "type", "lang", "language", "media"], {"href": "href", "url": "href", "rel": "rel", "relative": "rel", "target": "target", "type": "type", "lang": "hreflang", "language": "hreflang", "media": "media"}), 'each', [], (TMP_A_1 = function(name, attribute){var self = TMP_A_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_A_1.$$s = self, TMP_A_1.$$arity = 2, TMP_A_1));
          self['$defhelper!']("download");
          self['$defhelper!']("ping");
          return $send(self, 'defhelper', ["text"], (TMP_A_3 = function(string){var self = TMP_A_3.$$s || this;
if (string == null) string = nil;
          return self['$<<'](string)}, TMP_A_3.$$s = self, TMP_A_3.$$arity = 1, TMP_A_3));
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Base(){};
          var self = $Base = $klass($base, $super, 'Base', $Base);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Base_1;

          return $send($hash2(["href", "url", "target"], {"href": "href", "url": "href", "target": "target"}), 'each', [], (TMP_Base_1 = function(name, attribute){var self = TMP_Base_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Base_1.$$s = self, TMP_Base_1.$$arity = 2, TMP_Base_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/blockquote"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Blockquote(){};
          var self = $Blockquote = $klass($base, $super, 'Blockquote', $Blockquote);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Blockquote_1;

          return $send(self, 'defhelper', ["cite"], (TMP_Blockquote_1 = function(value){var self = TMP_Blockquote_1.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          
            $writer = ["cite", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Blockquote_1.$$s = self, TMP_Blockquote_1.$$arity = 1, TMP_Blockquote_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/button"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Button(){};
          var self = $Button = $klass($base, $super, 'Button', $Button);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Button_1;

          
          $send($hash2(["form", "name", "type", "value", "action", "encoding", "method", "target"], {"form": "form", "name": "name", "type": "type", "value": "value", "action": "formaction", "encoding": "formenctype", "method": "formmethod", "target": "formtarget"}), 'each', [], (TMP_Button_1 = function(name, attributes){var self = TMP_Button_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attributes == null) attributes = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Button_1.$$s = self, TMP_Button_1.$$arity = 2, TMP_Button_1));
          self['$defhelper!']("autofocus");
          return self['$defhelper!']("disabled");
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/canvas"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Canvas(){};
          var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Canvas_1;

          return $send($hash2(["width", "height"], {"width": "width", "height": "height"}), 'each', [], (TMP_Canvas_1 = function(name, attribute){var self = TMP_Canvas_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Canvas_1.$$s = self, TMP_Canvas_1.$$arity = 2, TMP_Canvas_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/embed"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Embed(){};
          var self = $Embed = $klass($base, $super, 'Embed', $Embed);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Embed_1;

          return $send($hash2(["type", "height", "width"], {"type": "type", "height": "height", "width": "width"}), 'each', [], (TMP_Embed_1 = function(name, attribute){var self = TMP_Embed_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Embed_1.$$s = self, TMP_Embed_1.$$arity = 2, TMP_Embed_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/img"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Img(){};
          var self = $Img = $klass($base, $super, 'Img', $Img);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Img_1, TMP_Img_3;

          
          $send($hash2(["src", "url", "alt", "description", "height", "width", "map"], {"src": "src", "url": "src", "alt": "alt", "description": "alt", "height": "height", "width": "width", "map": "usemap"}), 'each', [], (TMP_Img_1 = function(name, attribute){var self = TMP_Img_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Img_1.$$s = self, TMP_Img_1.$$arity = 2, TMP_Img_1));
          return $send(self, 'defhelper', ["map!"], (TMP_Img_3 = function(){var self = TMP_Img_3.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

          
            $writer = ["ismap", true];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Img_3.$$s = self, TMP_Img_3.$$arity = 0, TMP_Img_3));
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/input"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Input_1;

          return $send($hash2(["type", "name", "value", "size", "place_holder", "read_only", "required", "limit"], {"type": "type", "name": "name", "value": "value", "size": "size", "place_holder": "placeholder", "read_only": "readonly", "required": "required", "limit": "maxlength"}), 'each', [], (TMP_Input_1 = function(name, attribute){var self = TMP_Input_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Input_1.$$s = self, TMP_Input_1.$$arity = 2, TMP_Input_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/link"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Link(){};
          var self = $Link = $klass($base, $super, 'Link', $Link);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Link_1;

          return $send($hash2(["cross_origin", "href", "href_lang", "media", "rel", "sizes", "type"], {"cross_origin": "crossorigin", "href": "href", "href_lang": "hreflang", "media": "media", "rel": "rel", "sizes": "sizes", "type": "type"}), 'each', [], (TMP_Link_1 = function(name, attribute){var self = TMP_Link_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Link_1.$$s = self, TMP_Link_1.$$arity = 2, TMP_Link_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/object"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Object(){};
          var self = $Object = $klass($base, $super, 'Object', $Object);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_1;

          return $send($hash2(["type", "data", "name", "height", "width"], {"type": "type", "data": "data", "name": "name", "height": "height", "width": "width"}), 'each', [], (TMP_Object_1 = function(name, attribute){var self = TMP_Object_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Object_1.$$s = self, TMP_Object_1.$$arity = 2, TMP_Object_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/option"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Option(){};
          var self = $Option = $klass($base, $super, 'Option', $Option);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Option_1;

          
          $send(["label", "value"], 'each', [], (TMP_Option_1 = function(name){var self = TMP_Option_1.$$s || this, TMP_2;
if (name == null) name = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Option_1.$$s = self, TMP_Option_1.$$arity = 1, TMP_Option_1));
          self['$defhelper!']("disabled");
          return self['$defhelper!']("selected");
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/optgroup"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Optgroup(){};
          var self = $Optgroup = $klass($base, $super, 'Optgroup', $Optgroup);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Optgroup_1;

          
          $send(["label", "value"], 'each', [], (TMP_Optgroup_1 = function(name){var self = TMP_Optgroup_1.$$s || this, TMP_2;
if (name == null) name = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Optgroup_1.$$s = self, TMP_Optgroup_1.$$arity = 1, TMP_Optgroup_1));
          self['$defhelper!']("disabled");
          return self['$defhelper!']("selected");
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/select"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Select_1;

          
          $send(["form", "name", "size"], 'each', [], (TMP_Select_1 = function(name){var self = TMP_Select_1.$$s || this, TMP_2;
if (name == null) name = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Select_1.$$s = self, TMP_Select_1.$$arity = 1, TMP_Select_1));
          self['$defhelper!']("auto_focus", "autofocus");
          self['$defhelper!']("disabled");
          return self['$defhelper!']("required");
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element/td"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$defhelper', '$to_s', '$[]=', '$-', '$join']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Td(){};
          var self = $Td = $klass($base, $super, 'Td', $Td);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Td_1, TMP_Td_2, TMP_Td_3;

          
          $send(self, 'defhelper', ["columns"], (TMP_Td_1 = function(value){var self = TMP_Td_1.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          
            $writer = ["colspan", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Td_1.$$s = self, TMP_Td_1.$$arity = 1, TMP_Td_1));
          $send(self, 'defhelper', ["rows"], (TMP_Td_2 = function(value){var self = TMP_Td_2.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          
            $writer = ["rowspan", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Td_2.$$s = self, TMP_Td_2.$$arity = 1, TMP_Td_2));
          return $send(self, 'defhelper', ["headers"], (TMP_Td_3 = function($a_rest){var self = TMP_Td_3.$$s || this, args, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            $writer = ["headers", args.$join(" ")];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Td_3.$$s = self, TMP_Td_3.$$arity = -1, TMP_Td_3));
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html/element"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$==', '$capitalize', '$const_defined?', '$new', '$const_get', '$each', '$to_proc', '$<<', '$end_with?', '$to_s', '$[]', '$[]=', '$-', '$===', '$has_key?', '$unshift', '$|', '$split', '$delete', '$to_a', '$deep_merge!', '$>>', '$extend!', '$pop', '$join', '$heredoc', '$defhelper', '$map', '$empty?', '$upcase', '$inspect']);
  
  self.$require("paggio/html/element/a");
  self.$require("paggio/html/element/base");
  self.$require("paggio/html/element/blockquote");
  self.$require("paggio/html/element/button");
  self.$require("paggio/html/element/canvas");
  self.$require("paggio/html/element/embed");
  self.$require("paggio/html/element/img");
  self.$require("paggio/html/element/input");
  self.$require("paggio/html/element/link");
  self.$require("paggio/html/element/object");
  self.$require("paggio/html/element/option");
  self.$require("paggio/html/element/optgroup");
  self.$require("paggio/html/element/select");
  self.$require("paggio/html/element/td");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_new_1, TMP_Element_initialize_2, TMP_Element_each_3, TMP_Element_$lt$lt_4, TMP_Element_method_missing_5, TMP_Element_$$_6, TMP_Element_do_7, TMP_Element_$gt$gt_8, TMP_Element_9, TMP_Element_11, TMP_Element_inspect_13;

        def.children = def.attributes = def.class_names = def.owner = def.name = nil;
        
        Opal.defs(self, '$new', TMP_Element_new_1 = function(owner, name, attributes) {
          var self = this, $iter = TMP_Element_new_1.$$p, $yield = $iter || nil, const$ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if (attributes == null) {
            attributes = $hash2([], {});
          }
          if ($iter) TMP_Element_new_1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if (self['$=='](Opal.const_get_relative($nesting, 'Element'))) {
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Element_new_1, false, $Element), $zuper, $iter)
          };
          const$ = name.$capitalize();
          if ($truthy(self['$const_defined?'](const$))) {
            return self.$const_get(const$).$new(owner, name, attributes)
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Element_new_1, false, $Element), $zuper, $iter)
          };
        }, TMP_Element_new_1.$$arity = -3);
        
        Opal.defn(self, '$initialize', TMP_Element_initialize_2 = function $$initialize(owner, name, attributes) {
          var self = this;

          if (attributes == null) {
            attributes = $hash2([], {});
          }
          
          self.owner = owner;
          self.name = name;
          self.attributes = attributes;
          self.children = [];
          return (self.class_names = []);
        }, TMP_Element_initialize_2.$$arity = -3);
        
        Opal.defn(self, '$each', TMP_Element_each_3 = function $$each() {
          var self = this, $iter = TMP_Element_each_3.$$p, block = $iter || nil;

          if ($iter) TMP_Element_each_3.$$p = null;
          return $send(self.children, 'each', [], block.$to_proc())
        }, TMP_Element_each_3.$$arity = 0);
        
        Opal.defn(self, '$<<', TMP_Element_$lt$lt_4 = function(what) {
          var self = this;

          
          self.children['$<<'](what);
          return self;
        }, TMP_Element_$lt$lt_4.$$arity = 1);
        
        Opal.defn(self, '$method_missing', TMP_Element_method_missing_5 = function $$method_missing(name, content) {
          var $a, self = this, $iter = TMP_Element_method_missing_5.$$p, block = $iter || nil, $writer = nil;

          if (content == null) {
            content = nil;
          }
          if ($iter) TMP_Element_method_missing_5.$$p = null;
          
          if ($truthy(name.$to_s()['$end_with?']("!"))) {
            
            $writer = ["id", name['$[]']($range(0, -2, false))];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            self.class_names['$<<'](name)
          };
          if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](content))) {
            
            if ($truthy(($truthy($a = content['$has_key?']("class")) ? $a : content['$has_key?']("classes")))) {
              $send(self.class_names, 'unshift', Opal.to_a(content.$delete("class").$to_s().$split()['$|'](content.$delete("classes").$to_a())))};
            Opal.const_get_qualified(Opal.const_get_qualified('::', 'Paggio'), 'Utils')['$deep_merge!'](self.attributes, content);
          } else if ($truthy(content)) {
            self['$>>'](content)};
          if ($truthy(block)) {
            $send(self.owner, 'extend!', [self], block.$to_proc())};
          return self;
        }, TMP_Element_method_missing_5.$$arity = -2);
        
        Opal.defn(self, '$[]', TMP_Element_$$_6 = function($a_rest) {
          var self = this, names, last = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          if ($truthy((last = self.class_names.$pop()))) {
            self.class_names['$<<']([last].concat(Opal.to_a(names)).$join("-"))};
          return self;
        }, TMP_Element_$$_6.$$arity = -1);
        
        Opal.defn(self, '$do', TMP_Element_do_7 = function() {
          var self = this, $iter = TMP_Element_do_7.$$p, block = $iter || nil;

          if ($iter) TMP_Element_do_7.$$p = null;
          
          $send(self.owner, 'extend!', [self], block.$to_proc());
          return self;
        }, TMP_Element_do_7.$$arity = 0);
        
        Opal.defn(self, '$>>', TMP_Element_$gt$gt_8 = function(content) {
          var self = this;

          
          self['$<<'](Opal.const_get_qualified(Opal.const_get_qualified('::', 'Paggio'), 'Utils').$heredoc(content.$to_s()));
          return self;
        }, TMP_Element_$gt$gt_8.$$arity = 1);
        $send(self, 'defhelper', ["style"], (TMP_Element_9 = function(hash){var self = TMP_Element_9.$$s || this, TMP_10, $writer = nil;
          if (self.attributes == null) self.attributes = nil;
if (hash == null) hash = nil;
        
          $writer = ["style", $send(hash, 'map', [], (TMP_10 = function(name, value){var self = TMP_10.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return "" + (name) + ": " + (value)}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10)).$join(";")];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_Element_9.$$s = self, TMP_Element_9.$$arity = 1, TMP_Element_9));
        $send(self, 'defhelper', ["data"], (TMP_Element_11 = function(hash){var self = TMP_Element_11.$$s || this, TMP_12;
if (hash == null) hash = nil;
        return $send(hash, 'each', [], (TMP_12 = function(name, value){var self = TMP_12.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (name == null) name = nil;if (value == null) value = nil;
          
            $writer = ["" + "data-" + (name), value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))}, TMP_Element_11.$$s = self, TMP_Element_11.$$arity = 1, TMP_Element_11));
        return (Opal.defn(self, '$inspect', TMP_Element_inspect_13 = function $$inspect() {
          var self = this;

          if ($truthy(self.children['$empty?']())) {
            return "" + "#<HTML::Element(" + (self.name.$upcase()) + ")>"
            } else {
            return "" + "#<HTML::Element(" + (self.name.$upcase()) + "): " + (self.children.$inspect()['$[]']($range(1, -2, false))) + ">"
          }
        }, TMP_Element_inspect_13.$$arity = 0), nil) && 'inspect';
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/html"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$raise', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$<<', '$first', '$===', '$instance_eval', '$each', '$end_with?', '$to_s', '$empty?', '$heredoc', '$shift', '$new', '$[]', '$inspect']);
  
  self.$require("paggio/html/helpers");
  self.$require("paggio/html/element");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTML_initialize_1, TMP_HTML_$lt$lt_2, TMP_HTML_root$B_3, TMP_HTML_roots$B_4, TMP_HTML_element$B_5, TMP_HTML_extend$B_6, TMP_HTML_each_8, TMP_HTML_method_missing_9, TMP_HTML_inspect_11;

      def.current = def.roots = def.version = nil;
      
      self.$attr_reader("version");
      
      Opal.defn(self, '$initialize', TMP_HTML_initialize_1 = function $$initialize(version) {
        var self = this, $iter = TMP_HTML_initialize_1.$$p, block = $iter || nil;

        if (version == null) {
          version = 5;
        }
        if ($iter) TMP_HTML_initialize_1.$$p = null;
        
        if ($truthy(block)) {
          } else {
          Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "no block given")
        };
        self.version = version;
        self.roots = [];
        self.current = nil;
        if (block.$arity()['$=='](0)) {
          return $send(self, 'instance_exec', [], block.$to_proc())
          } else {
          return block.$call(self)
        };
      }, TMP_HTML_initialize_1.$$arity = -1);
      
      Opal.defn(self, '$<<', TMP_HTML_$lt$lt_2 = function(what) {
        var $a, self = this;

        return ($truthy($a = self.current) ? $a : self.roots)['$<<'](what)
      }, TMP_HTML_$lt$lt_2.$$arity = 1);
      
      Opal.defn(self, '$root!', TMP_HTML_root$B_3 = function() {
        var self = this;

        return self.roots.$first()
      }, TMP_HTML_root$B_3.$$arity = 0);
      
      Opal.defn(self, '$roots!', TMP_HTML_roots$B_4 = function() {
        var self = this;

        return self.roots
      }, TMP_HTML_roots$B_4.$$arity = 0);
      
      Opal.defn(self, '$element!', TMP_HTML_element$B_5 = function() {
        var self = this;

        return self.current
      }, TMP_HTML_element$B_5.$$arity = 0);
      
      Opal.defn(self, '$extend!', TMP_HTML_extend$B_6 = function(element) {
        var $a, TMP_7, self = this, $iter = TMP_HTML_extend$B_6.$$p, block = $iter || nil, old = nil, result = nil;

        if (element == null) {
          element = nil;
        }
        if ($iter) TMP_HTML_extend$B_6.$$p = null;
        
        $a = [self.current, element], (old = $a[0]), (self.current = $a[1]), $a;
        result = block.$call(self);
        if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](result))) {
          $send(self.current, 'instance_eval', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

          return (self.inner_html = result)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))};
        self.current = old;
        return self;
      }, TMP_HTML_extend$B_6.$$arity = -1);
      
      Opal.defn(self, '$each', TMP_HTML_each_8 = function $$each() {
        var self = this, $iter = TMP_HTML_each_8.$$p, block = $iter || nil;

        if ($iter) TMP_HTML_each_8.$$p = null;
        return $send(self.roots, 'each', [], block.$to_proc())
      }, TMP_HTML_each_8.$$arity = 0);
      
      Opal.defn(self, '$method_missing', TMP_HTML_method_missing_9 = function $$method_missing(name, $a_rest) {
        var $b, TMP_10, self = this, args, $iter = TMP_HTML_method_missing_9.$$p, block = $iter || nil, content = nil, element = nil, parent = nil, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_HTML_method_missing_9.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        if ($truthy(name.$to_s()['$end_with?']("!"))) {
          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_HTML_method_missing_9, false), $zuper, $iter)};
        if ($truthy(($truthy($b = args['$empty?']()) ? $b : Opal.const_get_qualified('::', 'Hash')['$==='](args.$first())))) {
          } else {
          content = Opal.const_get_qualified(Opal.const_get_qualified('::', 'Paggio'), 'Utils').$heredoc(args.$shift().$to_s())
        };
        element = $send(Opal.const_get_relative($nesting, 'Element'), 'new', [self, name].concat(Opal.to_a(args)));
        if ($truthy(content)) {
          element['$<<'](content)};
        if ($truthy(block)) {
          
          parent = self.current;
          self.current = element;
          result = block.$call(self);
          self.current = parent;
          if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](result))) {
            $send(element, 'instance_eval', [], (TMP_10 = function(){var self = TMP_10.$$s || this;

            return (self.inner_html = result)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))};};
        self['$<<'](element);
        return element;
      }, TMP_HTML_method_missing_9.$$arity = -2);
      return (Opal.defn(self, '$inspect', TMP_HTML_inspect_11 = function $$inspect() {
        var self = this;

        if ($truthy(self.roots['$empty?']())) {
          return "" + "#<HTML(" + (self.version) + ")>"
          } else {
          return "" + "#<HTML(" + (self.version) + "): " + (self.roots.$inspect()['$[]']($range(1, -2, false))) + ">"
        }
      }, TMP_HTML_inspect_11.$$arity = 0), nil) && 'inspect';
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/css/unit"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var TMP_23, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$map', '$to_proc', '$attr_reader', '$===', '$respond_to?', '$raise', '$class', '$to_u', '$new', '$==', '$convert', '$type', '$number', '$hash', '$each', '$define_method', '$+', '$compatible?', '$-', '$*', '$/', '$to_i', '$to_f', '$private', '$include?', '$class_eval', '$old_percent', '$match', '$[]', '$__send__', '$downcase']);
  
  (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Unit(){};
        var self = $Unit = $klass($base, $super, 'Unit', $Unit);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Unit_initialize_1, TMP_Unit_coerce_2, TMP_Unit_$eq$eq_3, TMP_Unit_$eq$eq$eq_4, TMP_Unit_hash_5, TMP_Unit_6, TMP_Unit_$_8, TMP_Unit_$_9, TMP_Unit_$_10, TMP_Unit_$_11, TMP_Unit_$$_12, TMP_Unit_$$_13, TMP_Unit_to_i_14, TMP_Unit_to_f_15, TMP_Unit_to_u_16, TMP_Unit_to_s_17, TMP_Unit_compatible$q_18, TMP_Unit_convert_19;

        def.type = def.number = nil;
        
        Opal.const_set($nesting[0], 'TYPES', $send(["em", "ex", "ch", "rem", "vh", "vw", "vmin", "vmax", "px", "mm", "cm", "in", "pt", "pc", "s", "deg"], 'map', [], "to_sym".$to_proc()));
        Opal.const_set($nesting[0], 'COMPATIBLE', $send(["in", "pt", "mm", "cm", "px", "pc"], 'map', [], "to_sym".$to_proc()));
        self.$attr_reader("type", "number");
        
        Opal.defn(self, '$initialize', TMP_Unit_initialize_1 = function $$initialize(number, type) {
          var self = this;

          
          self.number = number;
          return (self.type = type);
        }, TMP_Unit_initialize_1.$$arity = 2);
        
        Opal.defn(self, '$coerce', TMP_Unit_coerce_2 = function $$coerce(other) {
          var self = this;

          return [self, other]
        }, TMP_Unit_coerce_2.$$arity = 1);
        
        Opal.defn(self, '$==', TMP_Unit_$eq$eq_3 = function(other) {
          var self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            
            if ($truthy(other['$respond_to?']("to_u"))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "no implicit conversion of " + (other.$class()) + " into Unit")
            };
            other = other.$to_u();
          };
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            other = Opal.const_get_relative($nesting, 'Unit').$new(other, self.type)
          };
          return self.number['$=='](self.$convert(other, self.type));
        }, TMP_Unit_$eq$eq_3.$$arity = 1);
        
        Opal.defn(self, '$===', TMP_Unit_$eq$eq$eq_4 = function(other) {
          var $a, self = this;

          return (($a = self.type['$=='](other.$type())) ? self.number['$=='](other.$number()) : self.type['$=='](other.$type()))
        }, TMP_Unit_$eq$eq$eq_4.$$arity = 1);
        Opal.alias(self, "eql?", "==");
        
        Opal.defn(self, '$hash', TMP_Unit_hash_5 = function $$hash() {
          var self = this;

          return [self.number, self.type].$hash()
        }, TMP_Unit_hash_5.$$arity = 0);
        $send(Opal.const_get_relative($nesting, 'TYPES'), 'each', [], (TMP_Unit_6 = function(name){var self = TMP_Unit_6.$$s || this, TMP_7;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_7 = function(){var self = TMP_7.$$s || this;

          return Opal.const_get_relative($nesting, 'Unit').$new(self.$convert(self, name), name)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))}, TMP_Unit_6.$$s = self, TMP_Unit_6.$$arity = 1, TMP_Unit_6));
        
        Opal.defn(self, '$+', TMP_Unit_$_8 = function(other) {
          var $a, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_plus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_plus(self.number, other.$number()), self.type)
          } else if ($truthy(($truthy($a = self['$compatible?'](self)) ? self['$compatible?'](other) : $a))) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_plus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_Unit_$_8.$$arity = 1);
        
        Opal.defn(self, '$-', TMP_Unit_$_9 = function(other) {
          var $a, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_minus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_minus(self.number, other.$number()), self.type)
          } else if ($truthy(($truthy($a = self['$compatible?'](self)) ? self['$compatible?'](other) : $a))) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_minus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_Unit_$_9.$$arity = 1);
        
        Opal.defn(self, '$*', TMP_Unit_$_10 = function(other) {
          var $a, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_times(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_times(self.number, other.$number()), self.type)
          } else if ($truthy(($truthy($a = self['$compatible?'](self)) ? self['$compatible?'](other) : $a))) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_times(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_Unit_$_10.$$arity = 1);
        
        Opal.defn(self, '$/', TMP_Unit_$_11 = function(other) {
          var $a, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_divide(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_divide(self.number, other.$number()), self.type)
          } else if ($truthy(($truthy($a = self['$compatible?'](self)) ? self['$compatible?'](other) : $a))) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_divide(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_Unit_$_11.$$arity = 1);
        
        Opal.defn(self, '$-@', TMP_Unit_$$_12 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Unit').$new($rb_times(self.number, -1), self.type)
        }, TMP_Unit_$$_12.$$arity = 0);
        
        Opal.defn(self, '$+@', TMP_Unit_$$_13 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Unit').$new(self.number, self.type)
        }, TMP_Unit_$$_13.$$arity = 0);
        
        Opal.defn(self, '$to_i', TMP_Unit_to_i_14 = function $$to_i() {
          var self = this;

          return self.number.$to_i()
        }, TMP_Unit_to_i_14.$$arity = 0);
        
        Opal.defn(self, '$to_f', TMP_Unit_to_f_15 = function $$to_f() {
          var self = this;

          return self.number.$to_f()
        }, TMP_Unit_to_f_15.$$arity = 0);
        
        Opal.defn(self, '$to_u', TMP_Unit_to_u_16 = function $$to_u() {
          var self = this;

          return self
        }, TMP_Unit_to_u_16.$$arity = 0);
        
        Opal.defn(self, '$to_s', TMP_Unit_to_s_17 = function $$to_s() {
          var self = this;

          return "" + (self.number) + (self.type)
        }, TMP_Unit_to_s_17.$$arity = 0);
        Opal.alias(self, "to_str", "to_s");
        Opal.alias(self, "inspect", "to_s");
        self.$private();
        
        Opal.defn(self, '$compatible?', TMP_Unit_compatible$q_18 = function(unit) {
          var self = this;

          return Opal.const_get_relative($nesting, 'COMPATIBLE')['$include?'](unit.$type())
        }, TMP_Unit_compatible$q_18.$$arity = 1);
        return (Opal.defn(self, '$convert', TMP_Unit_convert_19 = function $$convert(unit, type) {
          var self = this, value = nil, px = nil, $case = nil;

          
          value = unit.$number();
          if (unit.$type()['$=='](type)) {
            return value};
          px = (function() {$case = unit.$type();
          if ("in"['$===']($case)) {return $rb_times(value, 96)}
          else if ("pt"['$===']($case)) {return $rb_divide($rb_times(value, 4.0), 3.0)}
          else if ("pc"['$===']($case)) {return $rb_divide($rb_times($rb_divide(value, 12), 4.0), 3.0)}
          else if ("mm"['$===']($case)) {return $rb_times(value, 3.77953)}
          else if ("cm"['$===']($case)) {return $rb_times($rb_times(value, 10), 3.77953)}
          else if ("px"['$===']($case)) {return value}
          else { return nil }})();
          return (function() {$case = type;
          if ("in"['$===']($case)) {return $rb_divide(px, 96.0)}
          else if ("pt"['$===']($case)) {return $rb_divide($rb_divide(px, 4.0), 3.0)}
          else if ("pc"['$===']($case)) {return $rb_divide($rb_divide($rb_times(px, 12), 4.0), 3.0)}
          else if ("mm"['$===']($case)) {return $rb_divide(px, 3.77953)}
          else if ("cm"['$===']($case)) {return $rb_divide($rb_divide(px, 10), 3.77953)}
          else if ("px"['$===']($case)) {return px}
          else { return nil }})();
        }, TMP_Unit_convert_19.$$arity = 2), nil) && 'convert';
      })($nesting[0], null, $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_20, TMP_Numeric_to_u_22;

    
    $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Unit'), 'TYPES'), 'each', [], (TMP_Numeric_20 = function(name){var self = TMP_Numeric_20.$$s || this, TMP_21;
if (name == null) name = nil;
    return $send(self, 'define_method', [name], (TMP_21 = function(){var self = TMP_21.$$s || this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Unit').$new(self, name)}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))}, TMP_Numeric_20.$$s = self, TMP_Numeric_20.$$arity = 1, TMP_Numeric_20));
    return (Opal.defn(self, '$to_u', TMP_Numeric_to_u_22 = function $$to_u() {
      var self = this;

      return self
    }, TMP_Numeric_to_u_22.$$arity = 0), nil) && 'to_u';
  })($nesting[0], null, $nesting);
  $send([Opal.const_get_relative($nesting, 'Fixnum'), Opal.const_get_relative($nesting, 'Float')], 'each', [], (TMP_23 = function(klass){var self = TMP_23.$$s || this, TMP_24;
if (klass == null) klass = nil;
  return $send(klass, 'class_eval', [], (TMP_24 = function(){var self = TMP_24.$$s || this, TMP_$_25;

    
      Opal.alias(self, "old_percent", "%");
      return (Opal.def(self, '$%', TMP_$_25 = function(other) {
        var self = this;

        if (other == null) {
          other = nil;
        }
        if ($truthy(other)) {
          return self.$old_percent(other)
          } else {
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Unit').$new(self, "%")
        }
      }, TMP_$_25.$$arity = -1), nil) && '%';}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24))}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_u_26;

    return (Opal.defn(self, '$to_u', TMP_String_to_u_26 = function $$to_u() {
      var self = this, matches = nil, value = nil, unit = nil;

      if ($truthy((matches = self.$match(/^([\d+.]+)(.+)?$/)))) {
        
        value = matches['$[]'](1).$to_f();
        if ($truthy((unit = matches['$[]'](2)))) {
          return value.$__send__(unit.$downcase())
          } else {
          return value
        };
        } else {
        return 0
      }
    }, TMP_String_to_u_26.$$arity = 0), nil) && 'to_u'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_u_27;

    return (Opal.defn(self, '$to_u', TMP_NilClass_to_u_27 = function $$to_u() {
      var self = this;

      return 0
    }, TMP_NilClass_to_u_27.$$arity = 0), nil) && 'to_u'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/css/color"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$map', '$to_proc', '$define_method', '$new']);
  
  (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Color(){};
        var self = $Color = $klass($base, $super, 'Color', $Color);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Color_initialize_1;

        return (Opal.defn(self, '$initialize', TMP_Color_initialize_1 = function $$initialize(value, type) {
          var self = this;

          
          self.internal = value;
          return (self.type = type);
        }, TMP_Color_initialize_1.$$arity = 2), nil) && 'initialize'
      })($nesting[0], null, $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_2;

    return $send($send(["rgb", "rgba", "hsl", "hsla"], 'map', [], "to_sym".$to_proc()), 'each', [], (TMP_String_2 = function(name){var self = TMP_String_2.$$s || this, TMP_3;
if (name == null) name = nil;
    return $send(self, 'define_method', [name], (TMP_3 = function(){var self = TMP_3.$$s || this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Color').$new(self, name)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))}, TMP_String_2.$$s = self, TMP_String_2.$$arity = 1, TMP_String_2))
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_4;

    return $send($send(["rgb", "rgba", "hsl", "hsla"], 'map', [], "to_sym".$to_proc()), 'each', [], (TMP_Array_4 = function(name){var self = TMP_Array_4.$$s || this, TMP_5;
if (name == null) name = nil;
    return $send(self, 'define_method', [name], (TMP_5 = function(){var self = TMP_5.$$s || this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Color').$new(self, name)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))}, TMP_Array_4.$$s = self, TMP_Array_4.$$arity = 1, TMP_Array_4))
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/css/definition"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$empty?', '$each', '$inspect', '$to_s', '$define_method', '$a', '$===', '$first', '$>', '$length', '$raise', '$style', '$name', '$value', '$[]', '$join', '$map', '$to_i', '$*', '$end_with?', '$__send__', '$<<', '$last', '$pop', '$!', '$other', '$shift', '$horizontal?', '$private']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_initialize_1, TMP_Definition_empty$q_2, TMP_Definition_each_3, TMP_Definition_gradient_4, TMP_Definition_url_5, TMP_Definition_6, TMP_Definition_rgb_8, TMP_Definition_rgba_9, TMP_Definition_10, TMP_Definition_12, TMP_Definition_background_16, TMP_Definition_border_22, TMP_Definition_box_25, TMP_Definition_opacity_26, TMP_Definition_animation_28, TMP_Definition_transition_29, TMP_Definition_user_select_30, TMP_Definition_transform_31, TMP_Definition_filter_32, TMP_Definition_method_missing_33, TMP_Definition_style_35, TMP_Definition_style$B_36;

        def.style = def.important = nil;
        
        Opal.const_set($nesting[0], 'Style', Opal.const_get_qualified('::', 'Struct').$new("name", "value", "important"));
        
        Opal.defn(self, '$initialize', TMP_Definition_initialize_1 = function $$initialize() {
          var self = this, $iter = TMP_Definition_initialize_1.$$p, block = $iter || nil;

          if ($iter) TMP_Definition_initialize_1.$$p = null;
          
          self.style = [];
          if ($truthy(block)) {
            if (block.$arity()['$=='](0)) {
              return $send(self, 'instance_exec', [], block.$to_proc())
              } else {
              return block.$call(self)
            }
            } else {
            return nil
          };
        }, TMP_Definition_initialize_1.$$arity = 0);
        
        Opal.defn(self, '$empty?', TMP_Definition_empty$q_2 = function() {
          var self = this;

          return self.style['$empty?']()
        }, TMP_Definition_empty$q_2.$$arity = 0);
        
        Opal.defn(self, '$each', TMP_Definition_each_3 = function $$each() {
          var self = this, $iter = TMP_Definition_each_3.$$p, block = $iter || nil;

          if ($iter) TMP_Definition_each_3.$$p = null;
          return $send(self.style, 'each', [], block.$to_proc())
        }, TMP_Definition_each_3.$$arity = 0);
        
        Opal.defn(self, '$gradient', TMP_Definition_gradient_4 = function $$gradient($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(Opal.const_get_relative($nesting, 'Gradient'), 'new', Opal.to_a(args))
        }, TMP_Definition_gradient_4.$$arity = -1);
        
        Opal.defn(self, '$url', TMP_Definition_url_5 = function $$url(value) {
          var self = this;

          return "" + "url(" + (value.$to_s().$inspect()) + ")"
        }, TMP_Definition_url_5.$$arity = 1);
        $send(["url", "blur", "brightness", "rotate", "contrast", "grayscale", "invert", "opacity", "saturate", "sepia"], 'each', [], (TMP_Definition_6 = function(name){var self = TMP_Definition_6.$$s || this, TMP_7;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))}, TMP_Definition_6.$$s = self, TMP_Definition_6.$$arity = 1, TMP_Definition_6));
        
        Opal.defn(self, '$rgb', TMP_Definition_rgb_8 = function $$rgb(r, g, b) {
          var self = this;

          return "" + "rgb(" + (r) + ", " + (g) + ", " + (b) + ", " + (self.$a()) + ")"
        }, TMP_Definition_rgb_8.$$arity = 3);
        
        Opal.defn(self, '$rgba', TMP_Definition_rgba_9 = function $$rgba(r, g, b, a) {
          var self = this;

          return "" + "rgba(" + (r) + ", " + (g) + ", " + (b) + ", " + (a) + ")"
        }, TMP_Definition_rgba_9.$$arity = 4);
        $send(["scale", "skew", "translate"], 'each', [], (TMP_Definition_10 = function(name){var self = TMP_Definition_10.$$s || this, TMP_11;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_11 = function(a, b){var self = TMP_11.$$s || this;

            if (b == null) {
              b = nil;
            }if (a == null) a = nil;
          if ($truthy(b)) {
              return "" + (name) + "(" + (a) + ", " + (b) + ")"
              } else {
              return "" + (name) + "(" + (a) + ")"
            }}, TMP_11.$$s = self, TMP_11.$$arity = -2, TMP_11))}, TMP_Definition_10.$$s = self, TMP_Definition_10.$$arity = 1, TMP_Definition_10));
        $send(["translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "skewX", "skewY", "scaleX", "scaleY"], 'each', [], (TMP_Definition_12 = function(name){var self = TMP_Definition_12.$$s || this, TMP_13;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_13 = function(value){var self = TMP_13.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))}, TMP_Definition_12.$$s = self, TMP_Definition_12.$$arity = 1, TMP_Definition_12));
        
        Opal.defn(self, '$background', TMP_Definition_background_16 = function $$background($a_rest) {
          var TMP_14, TMP_15, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(Opal.const_get_relative($nesting, 'Gradient')['$==='](args.$first()))) {
            
            if ($truthy($rb_gt(args.$length(), 1))) {
              self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "multiple gradients not implemented yet")};
            return $send(args.$first(), 'each', [], (TMP_14 = function(s){var self = TMP_14.$$s || this, $a;
if (s == null) s = nil;
            return self.$style(($truthy($a = s.$name()) ? $a : "background-image"), s.$value())}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
          } else if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](args.$first()))) {
            return $send(args.$first(), 'each', [], (TMP_15 = function(sub, value){var self = TMP_15.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
            return self.$style("" + "background-" + (sub), value)}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15))
            } else {
            return self.$style("background", args)
          }
        }, TMP_Definition_background_16.$$arity = -1);
        
        Opal.defn(self, '$border', TMP_Definition_border_22 = function $$border($a_rest) {
          var TMP_17, self = this, args, options = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](args.$first()))) {
            
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return $send(options, 'each', [], (TMP_17 = function(name, value){var self = TMP_17.$$s || this, TMP_18, TMP_19, TMP_21, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;
              if ("top"['$===']($case) || "bottom"['$===']($case) || "left"['$===']($case) || "right"['$===']($case)) {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], (TMP_18 = function(n, v){var self = TMP_18.$$s || this;
if (n == null) n = nil;if (v == null) v = nil;
                return self.$style("" + "border-" + (name) + "-" + (n), v)}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18))
                } else {
                return self.$style("" + "border-" + (name), value)
              }}
              else if ("radius"['$===']($case)) {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], (TMP_19 = function(horizontal, value){var self = TMP_19.$$s || this, TMP_20;
if (horizontal == null) horizontal = nil;if (value == null) value = nil;
                return $send(value, 'each', [], (TMP_20 = function(vertical, value){var self = TMP_20.$$s || this;
if (vertical == null) vertical = nil;if (value == null) value = nil;
                  
                    self.$style("" + "-moz-border-radius-" + (horizontal) + (vertical), value);
                    self.$style("" + "-webkit-border-" + (horizontal) + "-" + (vertical) + "-radius", value);
                    return self.$style("" + "border-" + (horizontal) + "-" + (vertical) + "-radius", value);}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20))}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19))
                } else {
                
                self.$style("-moz-border-radius", value);
                self.$style("-webkit-border-radius", value);
                return self.$style("border-radius", value);
              }}
              else if ("color"['$===']($case)) {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], (TMP_21 = function(name, value){var self = TMP_21.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
                return self.$style("" + "border-" + (name) + "-color", value)}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21))
                } else {
                return self.$style("border-color", value)
              }}
              else {return self.$style("" + "border-" + (name), value)}})()}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17));
            } else {
            return self.$style("border", args)
          }
        }, TMP_Definition_border_22.$$arity = -1);
        
        Opal.defn(self, '$box', TMP_Definition_box_25 = function $$box(options) {
          var TMP_23, self = this;

          if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](options))) {
            return $send(options, 'each', [], (TMP_23 = function(name, value){var self = TMP_23.$$s || this, TMP_24, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;
              if ("shadow"['$===']($case)) {
              if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](value))) {
                if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](value['$[]'](0)))) {
                  value = $send(value, 'map', [], (TMP_24 = function(v){var self = TMP_24.$$s || this;
if (v == null) v = nil;
                  return v.$join(" ")}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24)).$join(", ")
                  } else {
                  value = value.$join(" ")
                }};
              self.$style("-moz-box-shadow", value);
              self.$style("-webkit-box-shadow", value);
              return self.$style("box-shadow", value);}
              else {return self.$style("" + "box-" + (name), value)}})()}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23))
            } else {
            return self.$style("box", options)
          }
        }, TMP_Definition_box_25.$$arity = 1);
        
        Opal.defn(self, '$opacity', TMP_Definition_opacity_26 = function $$opacity(value) {
          var self = this;

          
          self.$style("opacity", value);
          self.$style("-moz-opacity", value);
          self.$style("-ms-filter", "" + "\"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($rb_times(value, 100).$to_i()) + ")\"");
          return self.$style("filter", "" + "alpha(opacity=" + ($rb_times(value, 100).$to_i()) + ")");
        }, TMP_Definition_opacity_26.$$arity = 1);
        
        Opal.defn(self, '$animation', TMP_Definition_animation_28 = function $$animation($a_rest) {
          var TMP_27, self = this, args, options = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
            
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return $send(options, 'each', [], (TMP_27 = function(name, value){var self = TMP_27.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            
              self.$style("" + "-webkit-animation-" + (name), value);
              return self.$style("" + "animation-" + (name), value);}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27));
            } else {
            
            self.$style("animation", args);
            return self.$style("-webkit-animation", args);
          }
        }, TMP_Definition_animation_28.$$arity = -1);
        
        Opal.defn(self, '$transition', TMP_Definition_transition_29 = function $$transition($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.$style("transition", args);
          self.$style("-webkit-transition", args);
          return self.$style("-moz-transition", args);
        }, TMP_Definition_transition_29.$$arity = -1);
        
        Opal.defn(self, '$user_select', TMP_Definition_user_select_30 = function $$user_select($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.$style("user-select", args);
          self.$style("-webkit-user-select", args);
          self.$style("-moz-user-select", args);
          return self.$style("-ms-user-select", args);
        }, TMP_Definition_user_select_30.$$arity = -1);
        
        Opal.defn(self, '$transform', TMP_Definition_transform_31 = function $$transform($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.$style("transform", args);
          self.$style("-webkit-transform", args);
          self.$style("-moz-transform", args);
          self.$style("-ms-transform", args);
          return self.$style("-o-transform", args);
        }, TMP_Definition_transform_31.$$arity = -1);
        
        Opal.defn(self, '$filter', TMP_Definition_filter_32 = function $$filter($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.$style("filter", args);
          self.$style("-webkit-filter", args);
          self.$style("-moz-filter", args);
          self.$style("-ms-filter", args);
          return self.$style("-o-filter", args);
        }, TMP_Definition_filter_32.$$arity = -1);
        
        Opal.defn(self, '$method_missing', TMP_Definition_method_missing_33 = function $$method_missing(name, $a_rest) {
          var TMP_34, self = this, args, $iter = TMP_Definition_method_missing_33.$$p, block = $iter || nil, argument = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Definition_method_missing_33.$$p = null;
          
          name = name.$to_s();
          if ($truthy(name['$end_with?']("!"))) {
            
            name = name['$[]']($range(0, -2, false));
            self.important = true;
            $send(self, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());
            self.important = false;
            return nil;};
          if (args.$length()['$=='](1)) {
            
            argument = args.$first();
            if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](argument))) {
              $send(argument, 'each', [], (TMP_34 = function(sub, value){var self = TMP_34.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
              return self.$style("" + (name) + "-" + (sub), value)}, TMP_34.$$s = self, TMP_34.$$arity = 2, TMP_34))
              } else {
              self.$style(name, argument)
            };
            } else {
            self.$style(name, args.$join(" "))
          };
          self.important = false;
          return self;
        }, TMP_Definition_method_missing_33.$$arity = -2);
        
        Opal.defn(self, '$style', TMP_Definition_style_35 = function $$style(name, value, important) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          if (important == null) {
            important = self.important;
          }
          
          if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](value))) {
            value = value.$join(" ")};
          if ($truthy(Opal.const_get_relative($nesting, 'Style')['$==='](name))) {
            return self.style['$<<'](name)
            } else {
            return self.style['$<<'](Opal.const_get_relative($nesting, 'Style').$new(name, value, important))
          };
        }, TMP_Definition_style_35.$$arity = -2);
        
        Opal.defn(self, '$style!', TMP_Definition_style$B_36 = function(name, value) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          return self.$style(name, value, true)
        }, TMP_Definition_style$B_36.$$arity = -2);
        return (function($base, $super, $parent_nesting) {
          function $Gradient(){};
          var self = $Gradient = $klass($base, $super, 'Gradient', $Gradient);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Gradient_initialize_37, TMP_Gradient_each_38, TMP_Gradient_horizontal$q_39, TMP_Gradient_vertical$q_40, TMP_Gradient_other_41, TMP_Gradient_style_42;

          def.to = def.from = def.start = def.end = nil;
          
          
          Opal.defn(self, '$initialize', TMP_Gradient_initialize_37 = function $$initialize($a_rest) {
            var $b, self = this, args, options = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            options = (function() {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](args.$last()))) {
              return args.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            self.to = options['$[]']("to");
            self.from = options['$[]']("from");
            if ($truthy(($truthy($b = self.to) ? self.from['$!']() : $b))) {
              self.from = self.$other(self.to)
            } else if ($truthy(($truthy($b = self.from) ? self.to['$!']() : $b))) {
              self.to = self.$other(self.from)};
            self.start = args.$shift();
            return (self.end = args.$shift());
          }, TMP_Gradient_initialize_37.$$arity = -1);
          
          Opal.defn(self, '$each', TMP_Gradient_each_38 = function $$each() {
            var self = this, $iter = TMP_Gradient_each_38.$$p, block = $iter || nil;

            if ($iter) TMP_Gradient_each_38.$$p = null;
            
            block.$call(self.$style("" + "-moz-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            if ($truthy(self['$horizontal?']())) {
              block.$call(self.$style("" + "-webkit-gradient(linear, " + (self.from) + " top, " + (self.to) + " top, color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
              } else {
              block.$call(self.$style("" + "-webkit-gradient(linear, left " + (self.from) + ", left " + (self.to) + ", color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
            };
            block.$call(self.$style("" + "-webkit-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("" + "-o-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("" + "-ms-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            return block.$call(self.$style("" + "linear-gradient(to " + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
          }, TMP_Gradient_each_38.$$arity = 0);
          
          Opal.defn(self, '$horizontal?', TMP_Gradient_horizontal$q_39 = function() {
            var $a, self = this;

            return ($truthy($a = self.to['$==']("left")) ? $a : self.to['$==']("right"))
          }, TMP_Gradient_horizontal$q_39.$$arity = 0);
          
          Opal.defn(self, '$vertical?', TMP_Gradient_vertical$q_40 = function() {
            var $a, self = this;

            return ($truthy($a = self.to['$==']("top")) ? $a : self.to['$==']("bottom"))
          }, TMP_Gradient_vertical$q_40.$$arity = 0);
          self.$private();
          
          Opal.defn(self, '$other', TMP_Gradient_other_41 = function $$other(side) {
            var self = this, $case = nil;

            return (function() {$case = side;
            if ("left"['$===']($case)) {return "right"}
            else if ("right"['$===']($case)) {return "left"}
            else if ("top"['$===']($case)) {return "bottom"}
            else if ("bottom"['$===']($case)) {return "top"}
            else { return nil }})()
          }, TMP_Gradient_other_41.$$arity = 1);
          return (Opal.defn(self, '$style', TMP_Gradient_style_42 = function $$style($a_rest) {
            var self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if (args.$length()['$=='](1)) {
              return Opal.const_get_relative($nesting, 'Style').$new(nil, args.$first())
              } else {
              return $send(Opal.const_get_relative($nesting, 'Style'), 'new', Opal.to_a(args))
            }
          }, TMP_Gradient_style_42.$$arity = -1), nil) && 'style';
        })($nesting[0], null, $nesting);
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/css/rule"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Rule_initialize_1, TMP_Rule_method_missing_2;

        def.definition = nil;
        
        self.$attr_reader("selector", "media");
        
        Opal.defn(self, '$initialize', TMP_Rule_initialize_1 = function $$initialize(selector, media) {
          var self = this;

          
          self.selector = selector;
          self.media = media;
          return (self.definition = Opal.const_get_relative($nesting, 'Definition').$new());
        }, TMP_Rule_initialize_1.$$arity = 2);
        return (Opal.defn(self, '$method_missing', TMP_Rule_method_missing_2 = function $$method_missing($a_rest) {
          var self = this, args, $iter = TMP_Rule_method_missing_2.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Rule_method_missing_2.$$p = null;
          return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc())
        }, TMP_Rule_method_missing_2.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/css/font"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$font', '$__send__', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Font(){};
        var self = $Font = $klass($base, $super, 'Font', $Font);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Font_initialize_1, TMP_Font_method_missing_2;

        def.definition = nil;
        
        self.$attr_reader("name");
        
        Opal.defn(self, '$initialize', TMP_Font_initialize_1 = function $$initialize(name) {
          var self = this;

          
          self.name = name;
          self.definition = Opal.const_get_relative($nesting, 'Definition').$new();
          return self.$font($hash2(["family"], {"family": name}));
        }, TMP_Font_initialize_1.$$arity = 1);
        return (Opal.defn(self, '$method_missing', TMP_Font_method_missing_2 = function $$method_missing($a_rest) {
          var self = this, args, $iter = TMP_Font_method_missing_2.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Font_method_missing_2.$$p = null;
          return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc())
        }, TMP_Font_method_missing_2.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/css/animation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc', '$<<', '$call', '$%', '$last']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Animation_initialize_3, TMP_Animation_step_4, TMP_Animation_from_5, TMP_Animation_to_6, TMP_Animation_method_missing_7;

        def.steps = nil;
        
        (function($base, $super, $parent_nesting) {
          function $Step(){};
          var self = $Step = $klass($base, $super, 'Step', $Step);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Step_initialize_1, TMP_Step_method_missing_2;

          def.definition = nil;
          
          self.$attr_reader("value");
          
          Opal.defn(self, '$initialize', TMP_Step_initialize_1 = function $$initialize(value) {
            var self = this;

            
            self.value = value;
            return (self.definition = Opal.const_get_relative($nesting, 'Definition').$new());
          }, TMP_Step_initialize_1.$$arity = 1);
          return (Opal.defn(self, '$method_missing', TMP_Step_method_missing_2 = function $$method_missing($a_rest) {
            var self = this, args, $iter = TMP_Step_method_missing_2.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_Step_method_missing_2.$$p = null;
            return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc())
          }, TMP_Step_method_missing_2.$$arity = -1), nil) && 'method_missing';
        })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
        self.$attr_reader("name", "steps");
        
        Opal.defn(self, '$initialize', TMP_Animation_initialize_3 = function $$initialize(name) {
          var self = this;

          
          self.name = name;
          return (self.steps = []);
        }, TMP_Animation_initialize_3.$$arity = 1);
        
        Opal.defn(self, '$step', TMP_Animation_step_4 = function $$step(value) {
          var self = this, $iter = TMP_Animation_step_4.$$p, block = $iter || nil;

          if ($iter) TMP_Animation_step_4.$$p = null;
          
          self.steps['$<<'](Opal.const_get_relative($nesting, 'Step').$new(value));
          return block.$call();
        }, TMP_Animation_step_4.$$arity = 1);
        
        Opal.defn(self, '$from', TMP_Animation_from_5 = function $$from(value) {
          var self = this, $iter = TMP_Animation_from_5.$$p, block = $iter || nil;

          if ($iter) TMP_Animation_from_5.$$p = null;
          
          self.steps['$<<'](Opal.const_get_relative($nesting, 'Step').$new((0)['$%']()));
          return block.$call();
        }, TMP_Animation_from_5.$$arity = 1);
        
        Opal.defn(self, '$to', TMP_Animation_to_6 = function $$to(value) {
          var self = this, $iter = TMP_Animation_to_6.$$p, block = $iter || nil;

          if ($iter) TMP_Animation_to_6.$$p = null;
          
          self.steps['$<<'](Opal.const_get_relative($nesting, 'Step').$new((100)['$%']()));
          return block.$call();
        }, TMP_Animation_to_6.$$arity = 1);
        return (Opal.defn(self, '$method_missing', TMP_Animation_method_missing_7 = function $$method_missing($a_rest) {
          var self = this, args, $iter = TMP_Animation_method_missing_7.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Animation_method_missing_7.$$p = null;
          return $send(self.steps.$last(), '__send__', Opal.to_a(args), block.$to_proc())
        }, TMP_Animation_method_missing_7.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/css"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$each', '$start_with?', '$+', '$[]', '$==', '$attr_reader', '$raise', '$arity', '$instance_exec', '$to_proc', '$call', '$any?', '$include?', '$<<', '$new', '$selector', '$pop', '$method_missing', '$__send__', '$last']);
  
  self.$require("paggio/css/unit");
  self.$require("paggio/css/color");
  self.$require("paggio/css/definition");
  self.$require("paggio/css/rule");
  self.$require("paggio/css/font");
  self.$require("paggio/css/animation");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CSS_selector_2, TMP_CSS_initialize_3, TMP_CSS_rule_4, TMP_CSS_media_7, TMP_CSS_font_8, TMP_CSS_animation_9, TMP_CSS_method_missing_10;

      def.media = def.current = def.fonts = def.animations = nil;
      
      Opal.defs(self, '$selector', TMP_CSS_selector_2 = function $$selector(list) {
        var TMP_1, self = this, result = nil;

        
        result = "";
        $send(list, 'each', [], (TMP_1 = function(part){var self = TMP_1.$$s || this;
if (part == null) part = nil;
        if ($truthy(part['$start_with?']("&"))) {
            return (result = $rb_plus(result, part['$[]']($range(1, -1, false))))
            } else {
            return (result = $rb_plus(result, $rb_plus(" ", part)))
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        if (result['$[]'](0)['$=='](" ")) {
          return result['$[]']($range(1, -1, false))
          } else {
          return result
        };
      }, TMP_CSS_selector_2.$$arity = 1);
      self.$attr_reader("rules", "media", "fonts", "animations");
      
      Opal.defn(self, '$initialize', TMP_CSS_initialize_3 = function $$initialize() {
        var self = this, $iter = TMP_CSS_initialize_3.$$p, block = $iter || nil;

        if ($iter) TMP_CSS_initialize_3.$$p = null;
        
        if ($truthy(block)) {
          } else {
          Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "no block given")
        };
        self.selector = [];
        self.current = [];
        self.rules = [];
        self.fonts = [];
        self.animations = [];
        if (block.$arity()['$=='](0)) {
          return $send(self, 'instance_exec', [], block.$to_proc())
          } else {
          return block.$call(self)
        };
      }, TMP_CSS_initialize_3.$$arity = 0);
      
      Opal.defn(self, '$rule', TMP_CSS_rule_4 = function $$rule($a_rest) {
        var TMP_5, TMP_6, self = this, names, $iter = TMP_CSS_rule_4.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_rule_4.$$p = null;
        
        if ($truthy(block)) {
          } else {
          return nil
        };
        if ($truthy($send(names, 'any?', [], (TMP_5 = function(n){var self = TMP_5.$$s || this;
if (n == null) n = nil;
        return n['$include?'](",")}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5)))) {
          Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "selectors cannot contain commas")};
        return $send(names, 'each', [], (TMP_6 = function(name){var self = TMP_6.$$s || this;
          if (self.selector == null) self.selector = nil;
          if (self.current == null) self.current = nil;
          if (self.media == null) self.media = nil;
          if (self.rules == null) self.rules = nil;
if (name == null) name = nil;
        
          self.selector['$<<'](name);
          self.current['$<<'](Opal.const_get_relative($nesting, 'Rule').$new(Opal.const_get_relative($nesting, 'CSS').$selector(self.selector), self.media));
          block.$call();
          self.selector.$pop();
          return self.rules['$<<'](self.current.$pop());}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
      }, TMP_CSS_rule_4.$$arity = -1);
      
      Opal.defn(self, '$media', TMP_CSS_media_7 = function $$media(query, $a_rest) {
        var $b, self = this, args, $iter = TMP_CSS_media_7.$$p, block = $iter || nil, old = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_media_7.$$p = null;
        if ($truthy(block)) {
          
          $b = [self.media, query], (old = $b[0]), (self.media = $b[1]), $b;
          block.$call();
          return (self.media = old);
          } else {
          return $send(self, 'method_missing', ["media", query].concat(Opal.to_a(args)))
        }
      }, TMP_CSS_media_7.$$arity = -2);
      
      Opal.defn(self, '$font', TMP_CSS_font_8 = function $$font(name, $a_rest) {
        var self = this, args, $iter = TMP_CSS_font_8.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_font_8.$$p = null;
        if ($truthy(block)) {
          
          self.current['$<<'](Opal.const_get_relative($nesting, 'Font').$new(name));
          block.$call();
          return self.fonts['$<<'](self.current.$pop());
          } else {
          return $send(self, 'method_missing', ["font", name].concat(Opal.to_a(args)))
        }
      }, TMP_CSS_font_8.$$arity = -2);
      
      Opal.defn(self, '$animation', TMP_CSS_animation_9 = function $$animation(name, $a_rest) {
        var self = this, args, $iter = TMP_CSS_animation_9.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_animation_9.$$p = null;
        if ($truthy(block)) {
          
          self.current['$<<'](Opal.const_get_relative($nesting, 'Animation').$new(name));
          block.$call();
          return self.animations['$<<'](self.current.$pop());
          } else {
          return $send(self, 'method_missing', ["animation", name].concat(Opal.to_a(args)))
        }
      }, TMP_CSS_animation_9.$$arity = -2);
      return (Opal.defn(self, '$method_missing', TMP_CSS_method_missing_10 = function $$method_missing($a_rest) {
        var self = this, args, $iter = TMP_CSS_method_missing_10.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_method_missing_10.$$p = null;
        return $send(self.current.$last(), '__send__', Opal.to_a(args), block.$to_proc())
      }, TMP_CSS_method_missing_10.$$arity = -1), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTML_style_11;

      def.current = def.roots = nil;
      return (Opal.defn(self, '$style', TMP_HTML_style_11 = function $$style() {
        var $a, self = this, $iter = TMP_HTML_style_11.$$p, block = $iter || nil;

        if ($iter) TMP_HTML_style_11.$$p = null;
        return ($truthy($a = self.current) ? $a : self.roots)['$<<']($send(Opal.const_get_relative($nesting, 'CSS'), 'new', [], block.$to_proc()))
      }, TMP_HTML_style_11.$$arity = 0), nil) && 'style'
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["stringio"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$new', '$call', '$close', '$attr_accessor', '$length', '$include?', '$!', '$check_readable', '$==', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$enum_for', '$eof?', '$ord', '$[]', '$check_writable', '$String', '$write', '$closed_write?', '$closed_read?']);
  return (function($base, $super, $parent_nesting) {
    function $StringIO(){};
    var self = $StringIO = $klass($base, $super, 'StringIO', $StringIO);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StringIO_open_1, TMP_StringIO_initialize_2, TMP_StringIO_eof$q_3, TMP_StringIO_seek_4, TMP_StringIO_tell_5, TMP_StringIO_rewind_6, TMP_StringIO_each_byte_7, TMP_StringIO_each_char_8, TMP_StringIO_write_9, TMP_StringIO_read_10, TMP_StringIO_close_11, TMP_StringIO_close_read_12, TMP_StringIO_close_write_13, TMP_StringIO_closed$q_14, TMP_StringIO_closed_read$q_15, TMP_StringIO_closed_write$q_16, TMP_StringIO_check_writable_17, TMP_StringIO_check_readable_18;

    def.position = def.string = def.closed = nil;
    
    self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'Readable'));
    self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'Writable'));
    Opal.defs(self, '$open', TMP_StringIO_open_1 = function $$open(string, mode) {
      var self = this, $iter = TMP_StringIO_open_1.$$p, block = $iter || nil, io = nil, res = nil;

      if (string == null) {
        string = "";
      }
      if (mode == null) {
        mode = nil;
      }
      if ($iter) TMP_StringIO_open_1.$$p = null;
      
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    }, TMP_StringIO_open_1.$$arity = -1);
    self.$attr_accessor("string");
    
    Opal.defn(self, '$initialize', TMP_StringIO_initialize_2 = function $$initialize(string, mode) {
      var $a, self = this;

      if (string == null) {
        string = "";
      }
      if (mode == null) {
        mode = "rw";
      }
      
      self.string = string;
      self.position = string.$length();
      if ($truthy(($truthy($a = mode['$include?']("r")) ? mode['$include?']("w")['$!']() : $a))) {
        return (self.closed = "write")
      } else if ($truthy(($truthy($a = mode['$include?']("w")) ? mode['$include?']("r")['$!']() : $a))) {
        return (self.closed = "read")
        } else {
        return nil
      };
    }, TMP_StringIO_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$eof?', TMP_StringIO_eof$q_3 = function() {
      var self = this;

      
      self.$check_readable();
      return self.position['$=='](self.string.$length());
    }, TMP_StringIO_eof$q_3.$$arity = 0);
    Opal.alias(self, "eof", "eof?");
    
    Opal.defn(self, '$seek', TMP_StringIO_seek_4 = function $$seek(pos, whence) {
      var self = this, $case = nil;

      if (whence == null) {
        whence = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'SEEK_SET');
      }
      
      $case = whence;
      if (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'SEEK_SET')['$===']($case)) {
      if ($truthy($rb_ge(pos, 0))) {
        } else {
        self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Errno'), 'EINVAL'))
      };
      self.position = pos;}
      else if (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'SEEK_CUR')['$===']($case)) {if ($truthy($rb_gt($rb_plus(self.position, pos), self.string.$length()))) {
        self.position = self.string.$length()
        } else {
        self.position = $rb_plus(self.position, pos)
      }}
      else if (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'SEEK_END')['$===']($case)) {if ($truthy($rb_gt(pos, self.string.$length()))) {
        self.position = 0
        } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    }, TMP_StringIO_seek_4.$$arity = -2);
    
    Opal.defn(self, '$tell', TMP_StringIO_tell_5 = function $$tell() {
      var self = this;

      return self.position
    }, TMP_StringIO_tell_5.$$arity = 0);
    Opal.alias(self, "pos", "tell");
    Opal.alias(self, "pos=", "seek");
    
    Opal.defn(self, '$rewind', TMP_StringIO_rewind_6 = function $$rewind() {
      var self = this;

      return self.$seek(0)
    }, TMP_StringIO_rewind_6.$$arity = 0);
    
    Opal.defn(self, '$each_byte', TMP_StringIO_each_byte_7 = function $$each_byte() {
      var $a, self = this, $iter = TMP_StringIO_each_byte_7.$$p, block = $iter || nil, i = nil;

      if ($iter) TMP_StringIO_each_byte_7.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each_byte")
      };
      self.$check_readable();
      i = self.position;
      while (!($truthy(self['$eof?']()))) {
        
        block.$call(self.string['$[]'](i).$ord());
        i = $rb_plus(i, 1);
      };
      return self;
    }, TMP_StringIO_each_byte_7.$$arity = 0);
    
    Opal.defn(self, '$each_char', TMP_StringIO_each_char_8 = function $$each_char() {
      var $a, self = this, $iter = TMP_StringIO_each_char_8.$$p, block = $iter || nil, i = nil;

      if ($iter) TMP_StringIO_each_char_8.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each_char")
      };
      self.$check_readable();
      i = self.position;
      while (!($truthy(self['$eof?']()))) {
        
        block.$call(self.string['$[]'](i));
        i = $rb_plus(i, 1);
      };
      return self;
    }, TMP_StringIO_each_char_8.$$arity = 0);
    
    Opal.defn(self, '$write', TMP_StringIO_write_9 = function $$write(string) {
      var self = this, before = nil, after = nil;

      
      self.$check_writable();
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        
        self.string = $rb_plus(self.string, string);
        return (self.position = $rb_plus(self.position, string.$length()));
        } else {
        
        before = self.string['$[]'](Opal.Range.$new(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]'](Opal.Range.$new($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return (self.position = $rb_plus(self.position, string.$length()));
      };
    }, TMP_StringIO_write_9.$$arity = 1);
    
    Opal.defn(self, '$read', TMP_StringIO_read_10 = function $$read(length, outbuf) {
      var self = this, string = nil, str = nil;

      if (length == null) {
        length = nil;
      }
      if (outbuf == null) {
        outbuf = nil;
      }
      
      self.$check_readable();
      if ($truthy(self['$eof?']())) {
        return nil};
      string = (function() {if ($truthy(length)) {
        
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        return str;
        } else {
        
        str = self.string['$[]'](Opal.Range.$new(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if ($truthy(outbuf)) {
        return outbuf.$write(string)
        } else {
        return string
      };
    }, TMP_StringIO_read_10.$$arity = -1);
    
    Opal.defn(self, '$close', TMP_StringIO_close_11 = function $$close() {
      var self = this;

      return (self.closed = "both")
    }, TMP_StringIO_close_11.$$arity = 0);
    
    Opal.defn(self, '$close_read', TMP_StringIO_close_read_12 = function $$close_read() {
      var self = this;

      if (self.closed['$==']("write")) {
        return (self.closed = "both")
        } else {
        return (self.closed = "read")
      }
    }, TMP_StringIO_close_read_12.$$arity = 0);
    
    Opal.defn(self, '$close_write', TMP_StringIO_close_write_13 = function $$close_write() {
      var self = this;

      if (self.closed['$==']("read")) {
        return (self.closed = "both")
        } else {
        return (self.closed = "write")
      }
    }, TMP_StringIO_close_write_13.$$arity = 0);
    
    Opal.defn(self, '$closed?', TMP_StringIO_closed$q_14 = function() {
      var self = this;

      return self.closed['$==']("both")
    }, TMP_StringIO_closed$q_14.$$arity = 0);
    
    Opal.defn(self, '$closed_read?', TMP_StringIO_closed_read$q_15 = function() {
      var $a, self = this;

      return ($truthy($a = self.closed['$==']("read")) ? $a : self.closed['$==']("both"))
    }, TMP_StringIO_closed_read$q_15.$$arity = 0);
    
    Opal.defn(self, '$closed_write?', TMP_StringIO_closed_write$q_16 = function() {
      var $a, self = this;

      return ($truthy($a = self.closed['$==']("write")) ? $a : self.closed['$==']("both"))
    }, TMP_StringIO_closed_write$q_16.$$arity = 0);
    
    Opal.defn(self, '$check_writable', TMP_StringIO_check_writable_17 = function $$check_writable() {
      var self = this;

      if ($truthy(self['$closed_write?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'IOError'), "not opened for writing")
        } else {
        return nil
      }
    }, TMP_StringIO_check_writable_17.$$arity = 0);
    return (Opal.defn(self, '$check_readable', TMP_StringIO_check_readable_18 = function $$check_readable() {
      var self = this;

      if ($truthy(self['$closed_read?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'IOError'), "not opened for reading")
        } else {
        return nil
      }
    }, TMP_StringIO_check_readable_18.$$arity = 0), nil) && 'check_readable';
  })($nesting[0], Opal.const_get_relative($nesting, 'IO'), $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio/formatter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$[]=', '$to_h', '$-', '$[]', '$dup', '$deep_merge!', '$call', '$replace', '$===', '$new', '$merge', '$each', '$string', '$indent?', '$+', '$lines', '$puts', '$*', '$chomp', '$print', '$gsub', '$to_s', '$for', '$version', '$indent', '$format', '$instance_eval', '$empty?', '$map', '$escape', '$<<', '$join', '$include?', '$downcase', '$name', '$value', '$important', '$fonts', '$animations', '$steps', '$reverse', '$rules', '$media', '$selector', '$deindent']);
  
  self.$require("stringio");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Paggio_14, TMP_Paggio_17, TMP_Paggio_24, TMP_Paggio_25;

    
    (function($base, $super, $parent_nesting) {
      function $Formatter(){};
      var self = $Formatter = $klass($base, $super, 'Formatter', $Formatter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Formatter_to_h_1, TMP_Formatter_for_2, TMP_Formatter_options_3, TMP_Formatter_initialize_4, TMP_Formatter_format_6, TMP_Formatter_to_s_7, TMP_Formatter_indent$q_8, TMP_Formatter_indent_9, TMP_Formatter_deindent_10, TMP_Formatter_print_12, TMP_Formatter_escape_13;

      def.options = def.io = nil;
      
      Opal.defs(self, '$to_h', TMP_Formatter_to_h_1 = function $$to_h() {
        var $a, self = this;
        if (self.formatters == null) self.formatters = nil;

        return (self.formatters = ($truthy($a = self.formatters) ? $a : $hash2([], {})))
      }, TMP_Formatter_to_h_1.$$arity = 0);
      Opal.defs(self, '$for', TMP_Formatter_for_2 = function(klass) {
        var self = this, $iter = TMP_Formatter_for_2.$$p, block = $iter || nil, $writer = nil;

        if ($iter) TMP_Formatter_for_2.$$p = null;
        if ($truthy(block)) {
          
          $writer = [klass, block];
          $send(self.$to_h(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          return self.$to_h()['$[]'](klass)
        }
      }, TMP_Formatter_for_2.$$arity = 1);
      Opal.defs(self, '$options', TMP_Formatter_options_3 = function $$options(options) {
        var self = this, $iter = TMP_Formatter_options_3.$$p, block = $iter || nil, old = nil, result = nil;

        if ($iter) TMP_Formatter_options_3.$$p = null;
        
        old = Opal.const_get_relative($nesting, 'OPTIONS').$dup();
        Opal.const_get_relative($nesting, 'Utils')['$deep_merge!'](Opal.const_get_relative($nesting, 'OPTIONS'), options);
        result = block.$call();
        Opal.const_get_relative($nesting, 'OPTIONS').$replace(old);
        return result;
      }, TMP_Formatter_options_3.$$arity = 1);
      Opal.const_set($nesting[0], 'OPTIONS', $hash2(["indent"], {"indent": $hash2(["level", "with"], {"level": 0, "with": "\t"})}));
      
      Opal.defn(self, '$initialize', TMP_Formatter_initialize_4 = function $$initialize(io, options) {
        var $a, self = this;

        if (io == null) {
          io = nil;
        }
        if (options == null) {
          options = $hash2([], {});
        }
        
        if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](io))) {
          
          self.io = Opal.const_get_relative($nesting, 'StringIO').$new();
          self.options = io;
          } else {
          
          self.io = ($truthy($a = io) ? $a : Opal.const_get_relative($nesting, 'StringIO').$new());
          self.options = options;
        };
        return (self.options = Opal.const_get_relative($nesting, 'OPTIONS').$merge(self.options));
      }, TMP_Formatter_initialize_4.$$arity = -1);
      
      Opal.defn(self, '$format', TMP_Formatter_format_6 = function $$format(item) {
        var TMP_5, self = this;

        
        (function(){var $brk = Opal.new_brk(); try {return $send(Opal.const_get_relative($nesting, 'Formatter').$to_h(), 'each', [], (TMP_5 = function(klass, block){var self = TMP_5.$$s || this;
if (klass == null) klass = nil;if (block == null) block = nil;
        if ($truthy(klass['$==='](item))) {
            
            block.$call(self, item);
            
            Opal.brk(nil, $brk);
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$brk = $brk, TMP_5.$$arity = 2, TMP_5))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return self;
      }, TMP_Formatter_format_6.$$arity = 1);
      
      Opal.defn(self, '$to_s', TMP_Formatter_to_s_7 = function $$to_s() {
        var self = this;

        return self.io.$string()
      }, TMP_Formatter_to_s_7.$$arity = 0);
      
      Opal.defn(self, '$indent?', TMP_Formatter_indent$q_8 = function() {
        var self = this, $iter = TMP_Formatter_indent$q_8.$$p, block = $iter || nil;

        if ($iter) TMP_Formatter_indent$q_8.$$p = null;
        try {
          return self.options['$[]']("indent")['$[]']("level")
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
            try {
              return false
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_Formatter_indent$q_8.$$arity = 0);
      
      Opal.defn(self, '$indent', TMP_Formatter_indent_9 = function $$indent() {
        var self = this, $iter = TMP_Formatter_indent_9.$$p, block = $iter || nil, $binary_op_recvr_tmp_1 = nil, $writer = nil, $binary_op_recvr_tmp_2 = nil, $binary_op_recvr_tmp_3 = nil;

        if ($iter) TMP_Formatter_indent_9.$$p = null;
        if ($truthy(self['$indent?']())) {
          if ($truthy(block)) {
            
            
            $binary_op_recvr_tmp_1 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_plus($binary_op_recvr_tmp_1['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;;
            block.$call();
            
            $binary_op_recvr_tmp_2 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_minus($binary_op_recvr_tmp_2['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_2, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;;
            } else {
            
            $binary_op_recvr_tmp_3 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_plus($binary_op_recvr_tmp_3['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_3, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }
        } else if ($truthy(block)) {
          return block.$call()
          } else {
          return nil
        }
      }, TMP_Formatter_indent_9.$$arity = 0);
      
      Opal.defn(self, '$deindent', TMP_Formatter_deindent_10 = function $$deindent() {
        var self = this, $binary_op_recvr_tmp_4 = nil, $writer = nil;

        if ($truthy(self['$indent?']())) {
          
          $binary_op_recvr_tmp_4 = self.options['$[]']("indent");
          
          $writer = ["level", $rb_minus($binary_op_recvr_tmp_4['$[]']("level"), 1)];
          $send($binary_op_recvr_tmp_4, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
          } else {
          return nil
        }
      }, TMP_Formatter_deindent_10.$$arity = 0);
      
      Opal.defn(self, '$print', TMP_Formatter_print_12 = function $$print(text) {
        var TMP_11, self = this, level = nil;

        if ($truthy((level = self['$indent?']()))) {
          return $send(text.$lines(), 'each', [], (TMP_11 = function(line){var self = TMP_11.$$s || this;
            if (self.io == null) self.io = nil;
            if (self.options == null) self.options = nil;
if (line == null) line = nil;
          return self.io.$puts("" + ($rb_times(self.options['$[]']("indent")['$[]']("with"), level)) + (line.$chomp()))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))
          } else {
          return self.io.$print(text)
        }
      }, TMP_Formatter_print_12.$$arity = 1);
      return (Opal.defn(self, '$escape', TMP_Formatter_escape_13 = function $$escape(string) {
        var self = this;

        return string.$to_s().$gsub(/["><']|&(?!([a-zA-Z]+|(#\d+));)/, $hash2(["&", ">", "<", "\"", "'"], {"&": "&amp;", ">": "&gt;", "<": "&lt;", "\"": "&quot;", "'": "&#39;"}))
      }, TMP_Formatter_escape_13.$$arity = 1), nil) && 'escape';
    })($nesting[0], null, $nesting);
    $send(Opal.const_get_relative($nesting, 'Formatter'), 'for', [Opal.const_get_relative($nesting, 'HTML')], (TMP_Paggio_14 = function(f, item){var self = TMP_Paggio_14.$$s || this, TMP_15, $case = nil;
if (f == null) f = nil;if (item == null) item = nil;
    
      $case = item.$version();
      if ((5)['$===']($case)) {f.$print("<!DOCTYPE html>")};
      f.$print("<html>");
      $send(f, 'indent', [], (TMP_15 = function(){var self = TMP_15.$$s || this, TMP_16;

      return $send(item, 'each', [], (TMP_16 = function(root){var self = TMP_16.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
      return f.$print("</html>");}, TMP_Paggio_14.$$s = self, TMP_Paggio_14.$$arity = 2, TMP_Paggio_14));
    $send(Opal.const_get_relative($nesting, 'Formatter'), 'for', [Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HTML'), 'Element')], (TMP_Paggio_17 = function(f, item){var self = TMP_Paggio_17.$$s || this, $a, $b, TMP_18, TMP_19, TMP_20, name = nil, attributes = nil, class_names = nil, attrs = nil;
if (f == null) f = nil;if (item == null) item = nil;
    
      $b = $send(item, 'instance_eval', [], (TMP_18 = function(){var self = TMP_18.$$s || this;
        if (self.name == null) self.name = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.class_names == null) self.class_names = nil;

      return [self.name, self.attributes, self.class_names]}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18)), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (attributes = ($a[1] == null ? nil : $a[1])), (class_names = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(($truthy($a = attributes['$empty?']()) ? class_names['$empty?']() : $a))) {
        f.$print("" + "<" + (name) + ">")
        } else {
        
        attrs = $send(attributes, 'map', [], (TMP_19 = function(key, value){var self = TMP_19.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return "" + (f.$escape(key)) + "=\"" + (f.$escape(value)) + "\""}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19));
        if ($truthy(class_names['$empty?']())) {
          } else {
          attrs['$<<']("" + "class=\"" + (f.$escape(class_names.$join(" "))) + "\"")
        };
        f.$print("" + "<" + (name) + " " + (attrs.$join(" ")) + ">");
      };
      if ($truthy(["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]['$include?'](name.$to_s().$downcase()))) {
        return nil;};
      $send(f, 'indent', [], (TMP_20 = function(){var self = TMP_20.$$s || this, TMP_21, TMP_22, inner = nil;

      if ($truthy((inner = $send(item, 'instance_eval', [], (TMP_21 = function(){var self = TMP_21.$$s || this;
          if (self.inner_html == null) self.inner_html = nil;

        return self.inner_html}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))))) {
          return f.$print(inner)
          } else {
          return $send(item, 'each', [], (TMP_22 = function(child){var self = TMP_22.$$s || this, TMP_23, $case = nil;
if (child == null) child = nil;
          return (function() {$case = child;
            if (Opal.const_get_relative($nesting, 'String')['$===']($case)) {return f.$print(f.$escape(child))}
            else if (Opal.const_get_relative($nesting, 'CSS')['$===']($case)) {
            f.$print("<style>");
            $send(f, 'indent', [], (TMP_23 = function(){var self = TMP_23.$$s || this;

            return f.$format(child)}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23));
            return f.$print("</style>");}
            else {return f.$format(child)}})()}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22))
        }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20));
      return f.$print("" + "</" + (name) + ">");}, TMP_Paggio_17.$$s = self, TMP_Paggio_17.$$arity = 2, TMP_Paggio_17));
    $send(Opal.const_get_relative($nesting, 'Formatter'), 'for', [Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'Definition'), 'Style')], (TMP_Paggio_24 = function(f, style){var self = TMP_Paggio_24.$$s || this;
if (f == null) f = nil;if (style == null) style = nil;
    return f.$print("" + (style.$name()) + ": " + (style.$value()) + ((function() {if ($truthy(style.$important())) {
        return " !important"
        } else {
        return nil
      }; return nil; })()) + ";")}, TMP_Paggio_24.$$s = self, TMP_Paggio_24.$$arity = 2, TMP_Paggio_24));
    return $send(Opal.const_get_relative($nesting, 'Formatter'), 'for', [Opal.const_get_relative($nesting, 'CSS')], (TMP_Paggio_25 = function(f, item){var self = TMP_Paggio_25.$$s || this, TMP_26, TMP_29, TMP_33;
if (f == null) f = nil;if (item == null) item = nil;
    
      $send(item.$fonts(), 'each', [], (TMP_26 = function(font){var self = TMP_26.$$s || this, TMP_27;
if (font == null) font = nil;
      
        f.$print("@font-face {");
        $send(f, 'indent', [], (TMP_27 = function(){var self = TMP_27.$$s || this, TMP_28;

        return $send(font, 'each', [], (TMP_28 = function(style){var self = TMP_28.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28))}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27));
        return f.$print("}");}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
      $send(item.$animations(), 'each', [], (TMP_29 = function(animation){var self = TMP_29.$$s || this, TMP_30;
if (animation == null) animation = nil;
      return $send(["", "-webkit-", "-moz-", "-o-"], 'each', [], (TMP_30 = function(platform){var self = TMP_30.$$s || this, TMP_31;
if (platform == null) platform = nil;
        
          f.$print("" + "@" + (platform) + "keyframes " + (animation.$name()) + " {");
          $send(animation.$steps(), 'each', [], (TMP_31 = function(step){var self = TMP_31.$$s || this, TMP_32;
if (step == null) step = nil;
          
            f.$print("" + (step.$value()) + " {");
            $send(step, 'each', [], (TMP_32 = function(style){var self = TMP_32.$$s || this;
if (style == null) style = nil;
            return f.$format(style)}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32));
            return f.$print("}");}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
          return f.$print("}");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30))}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
      return $send(item.$rules().$reverse(), 'each', [], (TMP_33 = function(rule){var self = TMP_33.$$s || this, TMP_34, m = nil;
if (rule == null) rule = nil;
      
        if ($truthy(rule['$empty?']())) {
          return nil;};
        if ($truthy((m = rule.$media()))) {
          
          f.$print("" + "@media " + (m) + " {");
          f.$indent();};
        f.$print("" + (rule.$selector()) + " {");
        $send(f, 'indent', [], (TMP_34 = function(){var self = TMP_34.$$s || this, TMP_35;

        return $send(rule, 'each', [], (TMP_35 = function(style){var self = TMP_35.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35))}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34));
        f.$print("}");
        if ($truthy(rule.$media())) {
          
          f.$print("}");
          return f.$deindent();
          } else {
          return nil
        };}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33));}, TMP_Paggio_25.$$s = self, TMP_Paggio_25.$$arity = 2, TMP_Paggio_25));
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["paggio"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$options', '$to_proc', '$to_s', '$format', '$new', '$tap', '$each']);
  
  self.$require("paggio/utils");
  self.$require("paggio/html");
  self.$require("paggio/css");
  self.$require("paggio/formatter");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Paggio_options_1, TMP_Paggio_indent_2, TMP_Paggio_css_3, TMP_Paggio_html_4, TMP_Paggio_html$B_5;

    
    Opal.defs(self, '$options', TMP_Paggio_options_1 = function $$options(options) {
      var self = this, $iter = TMP_Paggio_options_1.$$p, block = $iter || nil;

      if ($iter) TMP_Paggio_options_1.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'Formatter'), 'options', [options], block.$to_proc())
    }, TMP_Paggio_options_1.$$arity = 1);
    Opal.defs(self, '$indent', TMP_Paggio_indent_2 = function $$indent(options) {
      var self = this, $iter = TMP_Paggio_indent_2.$$p, block = $iter || nil;

      if ($iter) TMP_Paggio_indent_2.$$p = null;
      return $send(self, 'options', [$hash2(["indent"], {"indent": options})], block.$to_proc())
    }, TMP_Paggio_indent_2.$$arity = 1);
    Opal.defs(self, '$css', TMP_Paggio_css_3 = function $$css($a_rest) {
      var self = this, args, $iter = TMP_Paggio_css_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Paggio_css_3.$$p = null;
      return Opal.const_get_relative($nesting, 'Formatter').$new().$format($send(Opal.const_get_relative($nesting, 'CSS'), 'new', Opal.to_a(args), block.$to_proc())).$to_s()
    }, TMP_Paggio_css_3.$$arity = -1);
    Opal.defs(self, '$html', TMP_Paggio_html_4 = function $$html($a_rest) {
      var self = this, args, $iter = TMP_Paggio_html_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Paggio_html_4.$$p = null;
      return Opal.const_get_relative($nesting, 'Formatter').$new().$format($send(Opal.const_get_relative($nesting, 'HTML'), 'new', Opal.to_a(args), block.$to_proc())).$to_s()
    }, TMP_Paggio_html_4.$$arity = -1);
    return Opal.defs(self, '$html!', TMP_Paggio_html$B_5 = function() {
      var TMP_6, self = this, $iter = TMP_Paggio_html$B_5.$$p, block = $iter || nil;

      if ($iter) TMP_Paggio_html$B_5.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'Formatter').$new(), 'tap', [], (TMP_6 = function(f){var self = TMP_6.$$s || this, TMP_7;
if (f == null) f = nil;
      return $send($send(Opal.const_get_relative($nesting, 'HTML'), 'new', [], block.$to_proc()), 'each', [], (TMP_7 = function(root){var self = TMP_7.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6)).$to_s()
    }, TMP_Paggio_html$B_5.$$arity = 0);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "0.2.0")
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/utils"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$new', '$encode_uri', '$to_s', '$encode_uri_component', '$[]', '$map', '$split', '$decode_uri_component', '$join']);
  
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'Size', Opal.const_get_relative($nesting, 'Struct').$new("width", "height"));
    Opal.const_set($nesting[0], 'Position', Opal.const_get_relative($nesting, 'Struct').$new("x", "y"));
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_encode_uri_1, TMP_Object_encode_uri_component_2;

    
    
    Opal.defn(self, '$encode_uri', TMP_Object_encode_uri_1 = function $$encode_uri() {
      var self = this;

      return self.$to_s().$encode_uri()
    }, TMP_Object_encode_uri_1.$$arity = 0);
    return (Opal.defn(self, '$encode_uri_component', TMP_Object_encode_uri_component_2 = function $$encode_uri_component() {
      var self = this;

      return self.$to_s().$encode_uri_component()
    }, TMP_Object_encode_uri_component_2.$$arity = 0), nil) && 'encode_uri_component';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_encode_uri_component_3, TMP_String_encode_uri_4, TMP_String_decode_uri_component_5, TMP_String_decode_uri_6;

    
    
    Opal.defn(self, '$encode_uri_component', TMP_String_encode_uri_component_3 = function $$encode_uri_component() {
      var self = this;

      return encodeURIComponent(self)
    }, TMP_String_encode_uri_component_3.$$arity = 0);
    
    Opal.defn(self, '$encode_uri', TMP_String_encode_uri_4 = function $$encode_uri() {
      var self = this;

      return encodeURI(self)
    }, TMP_String_encode_uri_4.$$arity = 0);
    
    Opal.defn(self, '$decode_uri_component', TMP_String_decode_uri_component_5 = function $$decode_uri_component() {
      var self = this;

      return decodeURIComponent(self)
    }, TMP_String_decode_uri_component_5.$$arity = 0);
    return (Opal.defn(self, '$decode_uri', TMP_String_decode_uri_6 = function $$decode_uri() {
      var self = this;

      return decodeURI(self)
    }, TMP_String_decode_uri_6.$$arity = 0), nil) && 'decode_uri';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_decode_uri_8, TMP_Hash_encode_uri_10;

    
    Opal.defs(self, '$decode_uri', TMP_Hash_decode_uri_8 = function $$decode_uri(string) {
      var TMP_7, self = this;

      return self['$[]']($send(string.$split("&"), 'map', [], (TMP_7 = function(part){var self = TMP_7.$$s || this, $a, $b, name = nil, value = nil;
if (part == null) part = nil;
      
        $b = part.$split("="), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
        return [name.$decode_uri_component(), value.$decode_uri_component()];}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7)))
    }, TMP_Hash_decode_uri_8.$$arity = 1);
    return (Opal.defn(self, '$encode_uri', TMP_Hash_encode_uri_10 = function $$encode_uri() {
      var TMP_9, self = this;

      return $send(self, 'map', [], (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name.$to_s().$encode_uri_component()) + "=" + (value.$to_s().$encode_uri_component())}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9)).$join("&")
    }, TMP_Hash_encode_uri_10.$$arity = 0), nil) && 'encode_uri';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/support"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$downcase', '$===', '$!', '$supports?']);
  
  Opal.const_set($nesting[0], 'BROWSER_ENGINE', (function() { try {
    return (/MSIE|WebKit|Presto|Gecko/.exec(navigator.userAgent)[0]).$downcase()
  } catch ($err) {
    if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
      try {
        return "unknown"
      } finally { Opal.pop_exception() }
    } else { throw $err; }
  }})());
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Browser_supports$q_1, TMP_Browser_loaded$q_2;

    
    self.support = {};
    Opal.defs(self, '$supports?', TMP_Browser_supports$q_1 = function(feature) {
      var $a, self = this, support = nil, $case = nil;
      if (self.support == null) self.support = nil;

      
      if ($truthy((typeof(self.support[feature]) !== "undefined"))) {
        return self.support[feature]};
      support = (function() {$case = feature;
      if ("MutationObserver"['$===']($case)) {return (typeof(window.MutationObserver) !== "undefined")}
      else if ("WebSocket"['$===']($case)) {return (typeof(window.WebSocket) !== "undefined")}
      else if ("EventSource"['$===']($case)) {return (typeof(window.EventSource) !== "undefined")}
      else if ("XHR"['$===']($case)) {return (typeof(window.XMLHttpRequest) !== "undefined")}
      else if ("ActiveX"['$===']($case)) {return (typeof(window.ActiveXObject) !== "undefined")}
      else if ("WebSQL"['$===']($case)) {return (typeof(window.openDatabase) !== "undefined")}
      else if ("Query.css"['$===']($case)) {return (typeof(document.querySelectorAll) !== "undefined")}
      else if ("Query.xpath"['$===']($case)) {return (typeof(document.evaluate) !== "undefined")}
      else if ("Storage.local"['$===']($case)) {return (typeof(window.localStorage) !== "undefined")}
      else if ("Storage.global"['$===']($case)) {return (typeof(window.globalStorage) !== "undefined")}
      else if ("Storage.session"['$===']($case)) {return (typeof(window.sessionStorage) !== "undefined")}
      else if ("Immediate"['$===']($case)) {return (typeof(window.setImmediate) !== "undefined")}
      else if ("Immediate (Internet Explorer)"['$===']($case)) {return (typeof(window.msSetImmediate) !== "undefined")}
      else if ("Immediate (Firefox)"['$===']($case)) {return (typeof(window.mozSetImmediate) !== "undefined")}
      else if ("Immediate (Opera)"['$===']($case)) {return (typeof(window.oSetImmediate) !== "undefined")}
      else if ("Immediate (Chrome)"['$===']($case) || "setImmediate (Safari)"['$===']($case)) {return (typeof(window.webkitSetImmediate) !== "undefined")}
      else if ("CSS.computed"['$===']($case)) {return (typeof(window.getComputedStyle) !== "undefined")}
      else if ("CSS.current"['$===']($case)) {return (typeof(document.documentElement.currentStyle) !== "undefined")}
      else if ("Window.send"['$===']($case)) {return (typeof(window.postMessage) !== "undefined")}
      else if ("Window.send (Asynchronous)"['$===']($case)) {if ($truthy(($truthy($a = (typeof(window.postMessage) !== "undefined")) ? (typeof(window.importScripts) !== "undefined")['$!']() : $a))) {
        
            var ok  = true,
                old = window.onmessage;

            window.onmessage = function() { ok = false; };
            window.postMessage("", "*")
            window.onmessage = old;

            return ok;
          
        } else {
        return nil
      }}
      else if ("Window.send (Synchronous)"['$===']($case)) {return self['$supports?']("Window.send (Asynchronous)")['$!']()}
      else if ("Window.innerSize"['$===']($case)) {return (typeof(window.innerHeight) !== "undefined")}
      else if ("Window.outerSize"['$===']($case)) {return (typeof(window.outerHeight) !== "undefined")}
      else if ("Window.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}
      else if ("Window.pageOffset"['$===']($case)) {return (typeof(window.pageXOffset) !== "undefined")}
      else if ("Attr.isId"['$===']($case)) {
          var div = document.createElement('div');
              div.setAttribute('id', 'xxxxxxxxxxxxx');

          return typeof(div.attributes['id'].isId) !== "undefined";
        }
      else if ("Element.addBehavior"['$===']($case)) {return (typeof(document.documentElement.addBehavior) !== "undefined")}
      else if ("Element.className"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('className', 'x');

          return div.className === 'x';
        }
      else if ("Element.class"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('class', 'x');

          return div.className === 'x';
        }
      else if ("Element.for"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('for', 'x');

          return label.htmlFor === 'x';
        }
      else if ("Element.htmlFor"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('htmlFor', 'x');

          return label.htmlFor === 'x';
        }
      else if ("Element.clientSize"['$===']($case)) {return (typeof(document.documentElement.clientHeight) !== "undefined")}
      else if ("Element.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}
      else if ("Element.textContent"['$===']($case)) {return (typeof(document.documentElement.textContent) !== "undefined")}
      else if ("Element.innerText"['$===']($case)) {return (typeof(document.documentElement.innerText) !== "undefined")}
      else if ("Element.matches"['$===']($case)) {return (typeof(document.documentElement.matches) !== "undefined")}
      else if ("Element.matches (Internet Explorer)"['$===']($case)) {return (typeof(document.documentElement.msMatchesSelector) !== "undefined")}
      else if ("Element.matches (Firefox)"['$===']($case)) {return (typeof(document.documentElement.mozMatchesSelector) !== "undefined")}
      else if ("Element.matches (Opera)"['$===']($case)) {return (typeof(document.documentElement.oMatchesSelector) !== "undefined")}
      else if ("Element.matches (Chrome)"['$===']($case) || "Element.matches (Safari)"['$===']($case)) {return (typeof(document.documentElement.webkitMatchesSelector) !== "undefined")}
      else if ("Element.getBoundingClientRect"['$===']($case)) {return (typeof(document.documentElement.getBoundingClientRect) !== "undefined")}
      else if ("Event.readystatechange"['$===']($case)) {return "onreadystatechange" in window.document.createElement("script")}
      else if ("Event.constructor"['$===']($case)) {try{new MouseEvent("click");return true;} catch (e){return false;}}
      else if ("Event.create"['$===']($case)) {return (typeof(document.createEvent) !== "undefined")}
      else if ("Event.createObject"['$===']($case)) {return (typeof(document.createEventObject) !== "undefined")}
      else if ("Event.addListener"['$===']($case)) {return (typeof(document.addEventListener) !== "undefined")}
      else if ("Event.attach"['$===']($case)) {return (typeof(document.attachEvent) !== "undefined")}
      else if ("Event.removeListener"['$===']($case)) {return (typeof(document.removeEventListener) !== "undefined")}
      else if ("Event.detach"['$===']($case)) {return (typeof(document.detachEvent) !== "undefined")}
      else if ("Event.dispatch"['$===']($case)) {return (typeof(document.dispatchEvent) !== "undefined")}
      else if ("Event.fire"['$===']($case)) {return (typeof(document.fireEvent) !== "undefined")}
      else if (/^Event\.([A-Z].*?)$/['$===']($case)) {return ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)) + "Event") in window}
      else if ("Document.view"['$===']($case)) {return (typeof(document.defaultView) !== "undefined")}
      else if ("Document.window"['$===']($case)) {return (typeof(document.parentWindow) !== "undefined")}
      else if ("History"['$===']($case)) {return (typeof(window.history.pushState) !== "undefined")}
      else if ("History.state"['$===']($case)) {return (typeof(window.history.state) !== "undefined")}
      else if ("Animation.request"['$===']($case)) {return (typeof(window.requestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Internet Explorer)"['$===']($case)) {return (typeof(window.msRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Firefox)"['$===']($case)) {return (typeof(window.mozRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Opera)"['$===']($case)) {return (typeof(window.oRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Chrome)"['$===']($case) || "Animation.request (Safari)"['$===']($case)) {return (typeof(window.webkitRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancel"['$===']($case)) {return (typeof(window.cancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Firefox)"['$===']($case)) {return (typeof(window.mozCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Opera)"['$===']($case)) {return (typeof(window.oCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Chrome)"['$===']($case) || "Animation.cancel (Safari)"['$===']($case)) {return (typeof(window.webkitCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest"['$===']($case)) {return (typeof(window.cancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Firefox)"['$===']($case)) {return (typeof(window.mozCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Opera)"['$===']($case)) {return (typeof(window.oCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Chrome)"['$===']($case) || "Animation.cancelRequest (Safari)"['$===']($case)) {return (typeof(window.webkitCancelRequestAnimationFrame) !== "undefined")}
      else if ("Audio"['$===']($case)) {return (typeof(window.AudioContext) !== "undefined")}
      else if ("Audio (Safari)"['$===']($case) || "Audio (Chrome)"['$===']($case)) {return (typeof(window.webkitAudioContext) !== "undefined")}
      else { return nil }})();
      return self.support[feature] = support;
    }, TMP_Browser_supports$q_1.$$arity = 1);
    Opal.defs(self, '$loaded?', TMP_Browser_loaded$q_2 = function(name) {
      var self = this, $case = nil;

      return (function() {$case = name;
      if ("Sizzle"['$===']($case)) {return (typeof(window.Sizzle) !== "undefined")}
      else if ("wicked-good-xpath"['$===']($case)) {return (typeof(window.wgxpath) !== "undefined")}
      else { return nil }})()
    }, TMP_Browser_loaded$q_2.$$arity = 1);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$call', '$to_n', '$<<', '$converters', '$native?', '$each', '$instance_eval', '$register', '$to_proc', '$attr_reader', '$lambda', '$new', '$stopped?', '$arguments', '$!', '$prevented?', '$class_for', '$off', '$target', '$[]', '$delegated', '$delete', '$last', '$empty?', '$first', '$raise', '$name_for', '$handlers', '$[]=', '$-', '$include?', '$on!', '$delegate', '$callback=', '$on', '$handlers=', '$push', '$callbacks', '$attach', '$attach!', '$supports?', '$name', '$==', '$event', '$===', '$warn', '$detach', '$gsub', '$delete_if', '$=~', '$clear', '$none?', '$is_a?', '$create', '$dispatch', '$trigger', '$bubbles=', '$private', '$nil?', '$dup', '$on=', '$parent']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      (function($base, $super, $parent_nesting) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_new_1, TMP_Definition_bubbles$eq_2, TMP_Definition_cancelable$eq_3;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        Opal.defs(self, '$new', TMP_Definition_new_1 = function() {
          var self = this, $iter = TMP_Definition_new_1.$$p, block = $iter || nil, data = nil;

          if ($iter) TMP_Definition_new_1.$$p = null;
          
          data = $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Definition_new_1, false, $Definition), [{ bubbles: true, cancelable: true }], null);
          if ($truthy(block)) {
            block.$call(data)};
          return data.$to_n();
        }, TMP_Definition_new_1.$$arity = 0);
        
        Opal.defn(self, '$bubbles=', TMP_Definition_bubbles$eq_2 = function(value) {
          var self = this;

          return self["native"].bubbles = value
        }, TMP_Definition_bubbles$eq_2.$$arity = 1);
        return (Opal.defn(self, '$cancelable=', TMP_Definition_cancelable$eq_3 = function(value) {
          var self = this;

          return self["native"].cancelable = value
        }, TMP_Definition_cancelable$eq_3.$$arity = 1), nil) && 'cancelable=';
      })($nesting[0], null, $nesting);
      return (function($base, $parent_nesting) {
        var $Target, self = $Target = $module($base, 'Target');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Target_converters_4, TMP_Target_register_5, TMP_Target_convert_7, TMP_Target_included_10, TMP_Target_on_19, TMP_Target_on$B_22, TMP_Target_attach_23, TMP_Target_attach$B_24, TMP_Target_attach_25, TMP_Target_attach$B_26, TMP_Target_attach_27, TMP_Target_attach$B_28, TMP_Target_off_32, TMP_Target_detach_33, TMP_Target_detach_35, TMP_Target_detach_36, TMP_Target_trigger_37, TMP_Target_trigger$B_38, TMP_Target_dispatch_40, TMP_Target_dispatch_41, TMP_Target_dispatch_42, TMP_Target_callbacks_43, TMP_Target_delegated_44, TMP_Target_delegate_46;

        
        Opal.defs(self, '$converters', TMP_Target_converters_4 = function $$converters() {
          var $a, self = this;
          if (self.converters == null) self.converters = nil;

          return (self.converters = ($truthy($a = self.converters) ? $a : []))
        }, TMP_Target_converters_4.$$arity = 0);
        Opal.defs(self, '$register', TMP_Target_register_5 = function $$register() {
          var self = this, $iter = TMP_Target_register_5.$$p, block = $iter || nil;

          if ($iter) TMP_Target_register_5.$$p = null;
          return self.$converters()['$<<'](block)
        }, TMP_Target_register_5.$$arity = 0);
        Opal.defs(self, '$convert', TMP_Target_convert_7 = function $$convert(value) {try {

          var TMP_6, self = this;

          
          if ($truthy(self['$native?'](value))) {
            } else {
            return value
          };
          $send(self.$converters(), 'each', [], (TMP_6 = function(block){var self = TMP_6.$$s || this, result = nil;
if (block == null) block = nil;
          if ($truthy((result = block.$call(value)))) {
              Opal.ret(result)
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_Target_convert_7.$$arity = 1);
        Opal.defs(self, '$included', TMP_Target_included_10 = function $$included(klass) {
          var TMP_8, self = this;

          return $send(klass, 'instance_eval', [], (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_target_9;

          return Opal.defs(self, '$target', TMP_target_9 = function $$target() {
              var self = this, $iter = TMP_target_9.$$p, block = $iter || nil;

              if ($iter) TMP_target_9.$$p = null;
              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'Target'), 'register', [], block.$to_proc())
            }, TMP_target_9.$$arity = 0)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))
        }, TMP_Target_included_10.$$arity = 1);
        (function($base, $super, $parent_nesting) {
          function $Callback(){};
          var self = $Callback = $klass($base, $super, 'Callback', $Callback);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Callback_initialize_11, TMP_Callback_call_12, TMP_Callback_to_proc_14, TMP_Callback_event_15, TMP_Callback_off_16;

          def.proc = def.name = nil;
          
          self.$attr_reader("target", "name", "selector");
          
          Opal.defn(self, '$initialize', TMP_Callback_initialize_11 = function $$initialize(target, name, selector) {
            var self = this, $iter = TMP_Callback_initialize_11.$$p, block = $iter || nil;

            if (selector == null) {
              selector = nil;
            }
            if ($iter) TMP_Callback_initialize_11.$$p = null;
            
            self.target = target;
            self.name = name;
            self.selector = selector;
            return (self.block = block);
          }, TMP_Callback_initialize_11.$$arity = -3);
          
          Opal.defn(self, '$call', TMP_Callback_call_12 = function $$call(event) {
            var self = this;

            return self.$to_proc().$call(event)
          }, TMP_Callback_call_12.$$arity = 1);
          
          Opal.defn(self, '$to_proc', TMP_Callback_to_proc_14 = function $$to_proc() {
            var $a, TMP_13, self = this;

            return (self.proc = ($truthy($a = self.proc) ? $a : $send(self, 'lambda', [], (TMP_13 = function(event){var self = TMP_13.$$s || this;
              if (self.block == null) self.block = nil;
if (event == null) event = nil;
            
              
            if (!event.currentTarget) {
              event.currentTarget = self.target.native;
            }
          ;
              event = Opal.const_get_relative($nesting, 'Event').$new(event, self);
              if ($truthy(event['$stopped?']())) {
                } else {
                $send(self.block, 'call', [event].concat(Opal.to_a(event.$arguments())))
              };
              return event['$prevented?']()['$!']();}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))))
          }, TMP_Callback_to_proc_14.$$arity = 0);
          
          Opal.defn(self, '$event', TMP_Callback_event_15 = function $$event() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Event').$class_for(self.name)
          }, TMP_Callback_event_15.$$arity = 0);
          return (Opal.defn(self, '$off', TMP_Callback_off_16 = function $$off() {
            var self = this;

            return self.$target().$off(self)
          }, TMP_Callback_off_16.$$arity = 0), nil) && 'off';
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          function $Delegate(){};
          var self = $Delegate = $klass($base, $super, 'Delegate', $Delegate);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Delegate_initialize_17, TMP_Delegate_off_18;

          def.target = def.name = def.pair = nil;
          
          
          Opal.defn(self, '$initialize', TMP_Delegate_initialize_17 = function $$initialize(target, name, pair) {
            var self = this;

            
            self.target = target;
            self.name = name;
            return (self.pair = pair);
          }, TMP_Delegate_initialize_17.$$arity = 3);
          return (Opal.defn(self, '$off', TMP_Delegate_off_18 = function $$off() {
            var self = this, delegate = nil;

            
            delegate = self.target.$delegated()['$[]'](self.name);
            delegate.$last().$delete(self.pair);
            if ($truthy(delegate.$last()['$empty?']())) {
              
              delegate.$first().$off();
              return delegate.$delete(self.name);
              } else {
              return nil
            };
          }, TMP_Delegate_off_18.$$arity = 0), nil) && 'off';
        })($nesting[0], null, $nesting);
        Opal.const_set($nesting[0], 'Delegates', Opal.const_get_relative($nesting, 'Struct').$new("callback", "handlers"));
        
        Opal.defn(self, '$on', TMP_Target_on_19 = function $$on(name, selector) {
          var TMP_20, TMP_21, self = this, $iter = TMP_Target_on_19.$$p, block = $iter || nil, delegate = nil, pair = nil, $writer = nil, callback = nil;

          if (selector == null) {
            selector = nil;
          }
          if ($iter) TMP_Target_on_19.$$p = null;
          
          if ($truthy(block)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block has been given")
          };
          name = Opal.const_get_relative($nesting, 'Event').$name_for(name);
          if ($truthy(selector)) {
            if ($truthy((delegate = self.$delegated()['$[]'](name)))) {
              
              pair = [selector, block];
              delegate.$handlers()['$<<'](pair);
              return Opal.const_get_relative($nesting, 'Delegate').$new(self, name, pair);
              } else {
              
              delegate = (($writer = [name, Opal.const_get_relative($nesting, 'Delegates').$new()]), $send(self.$delegated(), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              if ($truthy(["blur", "focus"]['$include?'](name))) {
                
                $writer = [$send(self, 'on!', [name], (TMP_20 = function(e){var self = TMP_20.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20))];
                $send(delegate, 'callback=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                } else {
                
                $writer = [$send(self, 'on', [name], (TMP_21 = function(e){var self = TMP_21.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21))];
                $send(delegate, 'callback=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              pair = [selector, block];
              
              $writer = [[pair]];
              $send(delegate, 'handlers=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return Opal.const_get_relative($nesting, 'Delegate').$new(self, name, pair);
            }
            } else {
            
            callback = $send(Opal.const_get_relative($nesting, 'Callback'), 'new', [self, name, selector], block.$to_proc());
            self.$callbacks().$push(callback);
            return self.$attach(callback);
          };
        }, TMP_Target_on_19.$$arity = -2);
        
        Opal.defn(self, '$on!', TMP_Target_on$B_22 = function(name) {
          var self = this, $iter = TMP_Target_on$B_22.$$p, block = $iter || nil, callback = nil;

          if ($iter) TMP_Target_on$B_22.$$p = null;
          
          if ($truthy(block)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block has been given")
          };
          name = Opal.const_get_relative($nesting, 'Event').$name_for(name);
          callback = $send(Opal.const_get_relative($nesting, 'Callback'), 'new', [self, name], block.$to_proc());
          self.$callbacks().$push(callback);
          return self['$attach!'](callback);
        }, TMP_Target_on$B_22.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.addListener"))) {
          
          
          Opal.defn(self, '$attach', TMP_Target_attach_23 = function $$attach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            self["native"].addEventListener(callback.$name(), callback.$to_proc());
            return callback;
          }, TMP_Target_attach_23.$$arity = 1);
          
          Opal.defn(self, '$attach!', TMP_Target_attach$B_24 = function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            self["native"].addEventListener(callback.$name(), callback.$to_proc(), true);
            return callback;
          }, TMP_Target_attach$B_24.$$arity = 1);
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.attach"))) {
          
          
          Opal.defn(self, '$attach', TMP_Target_attach_25 = function $$attach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            if (callback.$event()['$=='](Opal.const_get_relative($nesting, 'Custom'))) {
              
            if (!self["native"].$custom) {
              self["native"].$custom = function(event) {
                for (var i = 0, length = self["native"].$callbacks.length; i < length; i++) {
                  var callback = self["native"].$callbacks[i];

                  if ((callback).$event()['$=='](Opal.const_get_relative($nesting, 'Custom'))) {
                    event.type = callback.name;

                    (callback).$call(event);
                  }
                }
              };

              self["native"].attachEvent("ondataavailable", self["native"].$custom);
            }
          
              } else {
              self["native"].attachEvent("on" + callback.$name(), callback.$to_proc())
            };
            return callback;
          }, TMP_Target_attach_25.$$arity = 1);
          
          Opal.defn(self, '$attach!', TMP_Target_attach$B_26 = function(callback) {
            var self = this, $case = nil;
            if (self["native"] == null) self["native"] = nil;

            
            $case = callback.$name();
            if ("blur"['$===']($case)) {self["native"].attachEvent("onfocusout", callback.$to_proc())}
            else if ("focus"['$===']($case)) {self["native"].attachEvent("onfocusin", callback.$to_proc())}
            else {
            self.$warn("attach: capture doesn't work on this browser");
            self.$attach(callback);};
            return callback;
          }, TMP_Target_attach$B_26.$$arity = 1);
          } else {
          
          
          Opal.defn(self, '$attach', TMP_Target_attach_27 = function $$attach($a_rest) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
          }, TMP_Target_attach_27.$$arity = -1);
          
          Opal.defn(self, '$attach!', TMP_Target_attach$B_28 = function($a_rest) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
          }, TMP_Target_attach$B_28.$$arity = -1);
        };
        
        Opal.defn(self, '$off', TMP_Target_off_32 = function $$off(what) {
          var $a, TMP_29, TMP_30, TMP_31, self = this, $case = nil;

          if (what == null) {
            what = nil;
          }
          return (function() {$case = what;
          if (Opal.const_get_relative($nesting, 'Callback')['$===']($case)) {
          self.$callbacks().$delete(what);
          return self.$detach(what);}
          else if (Opal.const_get_relative($nesting, 'String')['$===']($case)) {if ($truthy(($truthy($a = what['$include?']("*")) ? $a : what['$include?']("?")))) {
            return self.$off(Opal.const_get_relative($nesting, 'Regexp').$new(what.$gsub(/\*/, ".*?").$gsub(/\?/, ".")))
            } else {
            
            what = Opal.const_get_relative($nesting, 'Event').$name_for(what);
            return $send(self.$callbacks(), 'delete_if', [], (TMP_29 = function(callback){var self = TMP_29.$$s || this;
if (callback == null) callback = nil;
            if (callback.$name()['$=='](what)) {
                
                self.$detach(callback);
                return true;
                } else {
                return nil
              }}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
          }}
          else if (Opal.const_get_relative($nesting, 'Regexp')['$===']($case)) {return $send(self.$callbacks(), 'delete_if', [], (TMP_30 = function(callback){var self = TMP_30.$$s || this;
if (callback == null) callback = nil;
          if ($truthy(callback.$name()['$=~'](what))) {
              
              self.$detach(callback);
              return true;
              } else {
              return nil
            }}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30))}
          else {
          $send(self.$callbacks(), 'each', [], (TMP_31 = function(callback){var self = TMP_31.$$s || this;
if (callback == null) callback = nil;
          return self.$detach(callback)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
          return self.$callbacks().$clear();}})()
        }, TMP_Target_off_32.$$arity = -1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.removeListener"))) {
          
          Opal.defn(self, '$detach', TMP_Target_detach_33 = function $$detach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].removeEventListener(callback.$name(), callback.$to_proc(), false)
          }, TMP_Target_detach_33.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.detach"))) {
          
          Opal.defn(self, '$detach', TMP_Target_detach_35 = function $$detach(callback) {
            var TMP_34, self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$=='](Opal.const_get_relative($nesting, 'Custom'))) {
              if ($truthy($send(self.$callbacks(), 'none?', [], (TMP_34 = function(c){var self = TMP_34.$$s || this;
if (c == null) c = nil;
              return c.$event()['$=='](Opal.const_get_relative($nesting, 'Custom'))}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34)))) {
                
              self["native"].detachEvent("ondataavailable", self["native"].$custom);

              delete self["native"].$custom;
            
                } else {
                return nil
              }
              } else {
              return self["native"].detachEvent("on" + callback.$name(), callback.$to_proc())
            }
          }, TMP_Target_detach_35.$$arity = 1)
          } else {
          
          Opal.defn(self, '$detach', TMP_Target_detach_36 = function $$detach(callback) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
          }, TMP_Target_detach_36.$$arity = 1)
        };
        
        Opal.defn(self, '$trigger', TMP_Target_trigger_37 = function $$trigger(event, $a_rest) {
          var self = this, args, $iter = TMP_Target_trigger_37.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Target_trigger_37.$$p = null;
          
          if ($truthy(event['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            event = $send(Opal.const_get_relative($nesting, 'Event'), 'create', [event].concat(Opal.to_a(args)), block.$to_proc())};
          return self.$dispatch(event);
        }, TMP_Target_trigger_37.$$arity = -2);
        
        Opal.defn(self, '$trigger!', TMP_Target_trigger$B_38 = function(event, $a_rest) {
          var TMP_39, self = this, args, $iter = TMP_Target_trigger$B_38.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Target_trigger$B_38.$$p = null;
          return $send(self, 'trigger', [event].concat(Opal.to_a(args)), (TMP_39 = function(e){var self = TMP_39.$$s || this, $writer = nil;
if (e == null) e = nil;
          
            if ($truthy(block)) {
              block.$call(e)};
            
            $writer = [false];
            $send(e, 'bubbles=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39))
        }, TMP_Target_trigger$B_38.$$arity = -2);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.dispatch"))) {
          
          Opal.defn(self, '$dispatch', TMP_Target_dispatch_40 = function $$dispatch(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].dispatchEvent(event.$to_n())
          }, TMP_Target_dispatch_40.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.fire"))) {
          
          Opal.defn(self, '$dispatch', TMP_Target_dispatch_41 = function $$dispatch(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            if ($truthy(Opal.const_get_relative($nesting, 'Custom')['$==='](event))) {
              return self["native"].fireEvent("ondataavailable", event.$to_n())
              } else {
              return self["native"].fireEvent("on" + event.$name(), event.$to_n())
            }
          }, TMP_Target_dispatch_41.$$arity = 1)
          } else {
          
          Opal.defn(self, '$dispatch', TMP_Target_dispatch_42 = function $$dispatch($a_rest) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
          }, TMP_Target_dispatch_42.$$arity = -1)
        };
        self.$private();
        
        Opal.defn(self, '$callbacks', TMP_Target_callbacks_43 = function $$callbacks() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$callbacks) {
          self["native"].$callbacks = [];
        }

        return self["native"].$callbacks;
      
        }, TMP_Target_callbacks_43.$$arity = 0);
        
        Opal.defn(self, '$delegated', TMP_Target_delegated_44 = function $$delegated() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$delegated) {
          self["native"].$delegated = $hash2([], {});
        }

        return self["native"].$delegated;
      
        }, TMP_Target_delegated_44.$$arity = 0);
        
        Opal.defn(self, '$delegate', TMP_Target_delegate_46 = function $$delegate(delegates, event, element) {
          var $a, TMP_45, self = this;

          if (element == null) {
            element = event.$target();
          }
          
          if ($truthy(($truthy($a = element['$nil?']()) ? $a : element['$=='](event.$on())))) {
            return nil};
          $send(delegates.$handlers(), 'each', [], (TMP_45 = function(selector, block){var self = TMP_45.$$s || this, new$ = nil, $writer = nil;
if (selector == null) selector = nil;if (block == null) block = nil;
          if ($truthy(element['$=~'](selector))) {
              
              new$ = event.$dup();
              
              $writer = [element];
              $send(new$, 'on=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return $send(block, 'call', [new$].concat(Opal.to_a(new$.$arguments())));
              } else {
              return nil
            }}, TMP_45.$$s = self, TMP_45.$$arity = 2, TMP_45));
          return self.$delegate(delegates, event, element.$parent());
        }, TMP_Target_delegate_46.$$arity = -3);
      })($nesting[0], $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/ui"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $UI(){};
        var self = $UI = $klass($base, $super, 'UI', $UI);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_UI_supported$q_1, TMP_UI_construct_4, TMP_UI_construct_5;

        
        Opal.defs(self, '$supported?', TMP_UI_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.UI")
        }, TMP_UI_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_detail$eq_2, TMP_Definition_view$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$detail=', TMP_Definition_detail$eq_2 = function(value) {
            var self = this;

            return self["native"].detail = value
          }, TMP_Definition_detail$eq_2.$$arity = 1);
          return (Opal.defn(self, '$view=', TMP_Definition_view$eq_3 = function(value) {
            var self = this;

            return self["native"].view = value
          }, TMP_Definition_view$eq_3.$$arity = 1), nil) && 'view=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_UI_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new UIEvent(name, desc)
            }, TMP_UI_construct_4.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_UI_construct_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("UIEvent");
            event.initUIEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0);

        return event;
      
            }, TMP_UI_construct_5.$$arity = 2)}};
        self.$alias_native("detail");
        return self.$alias_native("view");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/mouse"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$include', '$new', '$try_convert', '$supported?', '$supports?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Mouse(){};
        var self = $Mouse = $klass($base, $super, 'Mouse', $Mouse);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Mouse_supported$q_1, TMP_Mouse_construct_29, TMP_Mouse_construct_30, TMP_Mouse_client_31, TMP_Mouse_layer_32, TMP_Mouse_offset_33, TMP_Mouse_page_34, TMP_Mouse_screen_35, TMP_Mouse_ancestor_36, TMP_Mouse_x_37, TMP_Mouse_y_38, TMP_Mouse_related_39, TMP_Mouse_from_40, TMP_Mouse_to_41, TMP_Mouse_click$q_42, TMP_Mouse_double_click$q_43, TMP_Mouse_down$q_44, TMP_Mouse_enter$q_45, TMP_Mouse_leave$q_46, TMP_Mouse_move$q_47, TMP_Mouse_out$q_48, TMP_Mouse_over$q_49, TMP_Mouse_up$q_50, TMP_Mouse_show$q_51;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Mouse_supported$q_1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("MouseEvent")['$nil?']()['$!']()
        }, TMP_Mouse_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_x$eq_14, TMP_Definition_y$eq_15, TMP_Definition_alt$B_16, TMP_Definition_ctrl$B_17, TMP_Definition_meta$B_18, TMP_Definition_button$eq_19, TMP_Definition_client_20, TMP_Definition_layer_21, TMP_Definition_offset_22, TMP_Definition_page_23, TMP_Definition_screen_24, TMP_Definition_ancestor_25, TMP_Definition_related$eq_26, TMP_Definition_from$eq_27, TMP_Definition_to$eq_28;

          def["native"] = nil;
          
          (function($base, $super, $parent_nesting) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Client_x$eq_2, TMP_Client_y$eq_3;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Client_x$eq_2 = function(value) {
              var self = this;

              return self["native"].clientX = value
            }, TMP_Client_x$eq_2.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Client_y$eq_3 = function(value) {
              var self = this;

              return self["native"].clientY = value
            }, TMP_Client_y$eq_3.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Layer(){};
            var self = $Layer = $klass($base, $super, 'Layer', $Layer);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Layer_x$eq_4, TMP_Layer_y$eq_5;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Layer_x$eq_4 = function(value) {
              var self = this;

              return self["native"].layerX = value
            }, TMP_Layer_x$eq_4.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Layer_y$eq_5 = function(value) {
              var self = this;

              return self["native"].layerY = value
            }, TMP_Layer_y$eq_5.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Offset(){};
            var self = $Offset = $klass($base, $super, 'Offset', $Offset);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Offset_x$eq_6, TMP_Offset_y$eq_7;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Offset_x$eq_6 = function(value) {
              var self = this;

              return self["native"].offsetX = value
            }, TMP_Offset_x$eq_6.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Offset_y$eq_7 = function(value) {
              var self = this;

              return self["native"].offsetY= value
            }, TMP_Offset_y$eq_7.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Page(){};
            var self = $Page = $klass($base, $super, 'Page', $Page);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Page_x$eq_8, TMP_Page_y$eq_9;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Page_x$eq_8 = function(value) {
              var self = this;

              return self["native"].pageX = value
            }, TMP_Page_x$eq_8.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Page_y$eq_9 = function(value) {
              var self = this;

              return self["native"].pageY = value
            }, TMP_Page_y$eq_9.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Screen_x$eq_10, TMP_Screen_y$eq_11;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Screen_x$eq_10 = function(value) {
              var self = this;

              return self["native"].screenX = value
            }, TMP_Screen_x$eq_10.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Screen_y$eq_11 = function(value) {
              var self = this;

              return self["native"].screenY = value
            }, TMP_Screen_y$eq_11.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Ancestor(){};
            var self = $Ancestor = $klass($base, $super, 'Ancestor', $Ancestor);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Ancestor_x$eq_12, TMP_Ancestor_y$eq_13;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Ancestor_x$eq_12 = function(value) {
              var self = this;

              return self["native"].x = value
            }, TMP_Ancestor_x$eq_12.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Ancestor_y$eq_13 = function(value) {
              var self = this;

              return self["native"].y = value
            }, TMP_Ancestor_y$eq_13.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          
          Opal.defn(self, '$x=', TMP_Definition_x$eq_14 = function(value) {
            var self = this;

            return self["native"].screenX = value
          }, TMP_Definition_x$eq_14.$$arity = 1);
          
          Opal.defn(self, '$y=', TMP_Definition_y$eq_15 = function(value) {
            var self = this;

            return self["native"].screenY = value
          }, TMP_Definition_y$eq_15.$$arity = 1);
          
          Opal.defn(self, '$alt!', TMP_Definition_alt$B_16 = function() {
            var self = this;

            return self["native"].altKey = true
          }, TMP_Definition_alt$B_16.$$arity = 0);
          
          Opal.defn(self, '$ctrl!', TMP_Definition_ctrl$B_17 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, TMP_Definition_ctrl$B_17.$$arity = 0);
          
          Opal.defn(self, '$meta!', TMP_Definition_meta$B_18 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, TMP_Definition_meta$B_18.$$arity = 0);
          
          Opal.defn(self, '$button=', TMP_Definition_button$eq_19 = function(value) {
            var self = this;

            return self["native"].button = value
          }, TMP_Definition_button$eq_19.$$arity = 1);
          
          Opal.defn(self, '$client', TMP_Definition_client_20 = function $$client() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Client').$new(self["native"])
          }, TMP_Definition_client_20.$$arity = 0);
          
          Opal.defn(self, '$layer', TMP_Definition_layer_21 = function $$layer() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Layer').$new(self["native"])
          }, TMP_Definition_layer_21.$$arity = 0);
          
          Opal.defn(self, '$offset', TMP_Definition_offset_22 = function $$offset() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Offset').$new(self["native"])
          }, TMP_Definition_offset_22.$$arity = 0);
          
          Opal.defn(self, '$page', TMP_Definition_page_23 = function $$page() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Page').$new(self["native"])
          }, TMP_Definition_page_23.$$arity = 0);
          
          Opal.defn(self, '$screen', TMP_Definition_screen_24 = function $$screen() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Screen').$new(self["native"])
          }, TMP_Definition_screen_24.$$arity = 0);
          
          Opal.defn(self, '$ancestor', TMP_Definition_ancestor_25 = function $$ancestor() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Ancestor').$new(self["native"])
          }, TMP_Definition_ancestor_25.$$arity = 0);
          
          Opal.defn(self, '$related=', TMP_Definition_related$eq_26 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = Opal.const_get_relative($nesting, 'Native').$try_convert(elem)
          }, TMP_Definition_related$eq_26.$$arity = 1);
          
          Opal.defn(self, '$from=', TMP_Definition_from$eq_27 = function(elem) {
            var self = this;

            return self["native"].fromElement = Opal.const_get_relative($nesting, 'Native').$try_convert(elem)
          }, TMP_Definition_from$eq_27.$$arity = 1);
          return (Opal.defn(self, '$to=', TMP_Definition_to$eq_28 = function(elem) {
            var self = this;

            return self["native"].toElement = Opal.const_get_relative($nesting, 'Native').$try_convert(elem)
          }, TMP_Definition_to$eq_28.$$arity = 1), nil) && 'to=';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Mouse_construct_29 = function $$construct(name, desc) {
              var self = this;

              return new MouseEvent(name, desc)
            }, TMP_Mouse_construct_29.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Mouse_construct_30 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MouseEvent");
            event.initMouseEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey || false, desc.altKey || false,
              desc.shiftKey || false, desc.metaKey || false,
              desc.button || 0, desc.relatedTarget || null);

        return event;
      
            }, TMP_Mouse_construct_30.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("button");
        
        Opal.defn(self, '$client', TMP_Mouse_client_31 = function $$client() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Position').$new(self["native"].clientX, self["native"].clientY)
        }, TMP_Mouse_client_31.$$arity = 0);
        
        Opal.defn(self, '$layer', TMP_Mouse_layer_32 = function $$layer() {
          var self = this;

          if ($truthy(self["native"].layerX == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].layerX, self["native"].layerY)
          }
        }, TMP_Mouse_layer_32.$$arity = 0);
        
        Opal.defn(self, '$offset', TMP_Mouse_offset_33 = function $$offset() {
          var self = this;

          if ($truthy(self["native"].offsetX == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].offsetX, self["native"].offsetY)
          }
        }, TMP_Mouse_offset_33.$$arity = 0);
        
        Opal.defn(self, '$page', TMP_Mouse_page_34 = function $$page() {
          var self = this;

          if ($truthy(self["native"].pageX == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].pageX, self["native"].pageY)
          }
        }, TMP_Mouse_page_34.$$arity = 0);
        
        Opal.defn(self, '$screen', TMP_Mouse_screen_35 = function $$screen() {
          var self = this;

          if ($truthy(self["native"].screenX == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].screenX, self["native"].screenY)
          }
        }, TMP_Mouse_screen_35.$$arity = 0);
        
        Opal.defn(self, '$ancestor', TMP_Mouse_ancestor_36 = function $$ancestor() {
          var self = this;

          if ($truthy(self["native"].x == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].x, self["native"].y)
          }
        }, TMP_Mouse_ancestor_36.$$arity = 0);
        
        Opal.defn(self, '$x', TMP_Mouse_x_37 = function $$x() {
          var self = this;

          return self.$screen().$x()
        }, TMP_Mouse_x_37.$$arity = 0);
        
        Opal.defn(self, '$y', TMP_Mouse_y_38 = function $$y() {
          var self = this;

          return self.$screen().$y()
        }, TMP_Mouse_y_38.$$arity = 0);
        
        Opal.defn(self, '$related', TMP_Mouse_related_39 = function $$related() {
          var self = this;

          if ($truthy(self["native"].relatedTarget == null)) {
            return nil
            } else {
            return self.$DOM(self["native"].relatedTarget)
          }
        }, TMP_Mouse_related_39.$$arity = 0);
        
        Opal.defn(self, '$from', TMP_Mouse_from_40 = function $$from() {
          var self = this;

          if ($truthy(self["native"].fromElement == null)) {
            return nil
            } else {
            return self.$DOM(self["native"].fromElement)
          }
        }, TMP_Mouse_from_40.$$arity = 0);
        
        Opal.defn(self, '$to', TMP_Mouse_to_41 = function $$to() {
          var self = this;

          if ($truthy(self["native"].toElement == null)) {
            return nil
            } else {
            return self.$DOM(self["native"].toElement)
          }
        }, TMP_Mouse_to_41.$$arity = 0);
        
        Opal.defn(self, '$click?', TMP_Mouse_click$q_42 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("click")
        }, TMP_Mouse_click$q_42.$$arity = 0);
        
        Opal.defn(self, '$double_click?', TMP_Mouse_double_click$q_43 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("dblclick")
        }, TMP_Mouse_double_click$q_43.$$arity = 0);
        
        Opal.defn(self, '$down?', TMP_Mouse_down$q_44 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousedown")
        }, TMP_Mouse_down$q_44.$$arity = 0);
        
        Opal.defn(self, '$enter?', TMP_Mouse_enter$q_45 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseenter")
        }, TMP_Mouse_enter$q_45.$$arity = 0);
        
        Opal.defn(self, '$leave?', TMP_Mouse_leave$q_46 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseleave")
        }, TMP_Mouse_leave$q_46.$$arity = 0);
        
        Opal.defn(self, '$move?', TMP_Mouse_move$q_47 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousemove")
        }, TMP_Mouse_move$q_47.$$arity = 0);
        
        Opal.defn(self, '$out?', TMP_Mouse_out$q_48 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseout")
        }, TMP_Mouse_out$q_48.$$arity = 0);
        
        Opal.defn(self, '$over?', TMP_Mouse_over$q_49 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseover")
        }, TMP_Mouse_over$q_49.$$arity = 0);
        
        Opal.defn(self, '$up?', TMP_Mouse_up$q_50 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseup")
        }, TMP_Mouse_up$q_50.$$arity = 0);
        return (Opal.defn(self, '$show?', TMP_Mouse_show$q_51 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("show")
        }, TMP_Mouse_show$q_51.$$arity = 0), nil) && 'show?';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/keyboard"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$code', '$chr', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Keyboard(){};
        var self = $Keyboard = $klass($base, $super, 'Keyboard', $Keyboard);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Keyboard_supported$q_1, TMP_Keyboard_construct_11, TMP_Keyboard_construct_12, TMP_Keyboard_key_13, TMP_Keyboard_code_14, TMP_Keyboard_char_15, TMP_Keyboard_down$q_16, TMP_Keyboard_press$q_17, TMP_Keyboard_up$q_18;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Keyboard_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Keyboard")
        }, TMP_Keyboard_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_alt$B_2, TMP_Definition_ctrl$B_3, TMP_Definition_meta$B_4, TMP_Definition_shift$B_5, TMP_Definition_code$eq_6, TMP_Definition_key$eq_7, TMP_Definition_char$eq_8, TMP_Definition_repeat$B_9, TMP_Definition_locale$eq_10;

          def["native"] = nil;
          
          
          Opal.defn(self, '$alt!', TMP_Definition_alt$B_2 = function() {
            var self = this;

            return self["native"].altKey = true
          }, TMP_Definition_alt$B_2.$$arity = 0);
          
          Opal.defn(self, '$ctrl!', TMP_Definition_ctrl$B_3 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, TMP_Definition_ctrl$B_3.$$arity = 0);
          
          Opal.defn(self, '$meta!', TMP_Definition_meta$B_4 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, TMP_Definition_meta$B_4.$$arity = 0);
          
          Opal.defn(self, '$shift!', TMP_Definition_shift$B_5 = function() {
            var self = this;

            return self["native"].shiftKey = true
          }, TMP_Definition_shift$B_5.$$arity = 0);
          
          Opal.defn(self, '$code=', TMP_Definition_code$eq_6 = function(code) {
            var self = this;

            return self["native"].keyCode = self["native"].which = code
          }, TMP_Definition_code$eq_6.$$arity = 1);
          
          Opal.defn(self, '$key=', TMP_Definition_key$eq_7 = function(key) {
            var self = this;

            return self["native"].key = key
          }, TMP_Definition_key$eq_7.$$arity = 1);
          
          Opal.defn(self, '$char=', TMP_Definition_char$eq_8 = function(char$) {
            var self = this;

            return self["native"].char = self["native"].charCode = char$
          }, TMP_Definition_char$eq_8.$$arity = 1);
          
          Opal.defn(self, '$repeat!', TMP_Definition_repeat$B_9 = function() {
            var self = this;

            return self["native"].repeat = true
          }, TMP_Definition_repeat$B_9.$$arity = 0);
          return (Opal.defn(self, '$locale=', TMP_Definition_locale$eq_10 = function(value) {
            var self = this;

            return self["native"].locale = value
          }, TMP_Definition_locale$eq_10.$$arity = 1), nil) && 'locale=';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Keyboard_construct_11 = function $$construct(name, desc) {
              var self = this;

              return new KeyboardEvent(name, desc)
            }, TMP_Keyboard_construct_11.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Keyboard_construct_12 = function $$construct(name, desc) {
              var self = this;

              
        var modifiers = "";

        if (desc.altKey) {
          modifiers += "Alt ";
        }

        if (desc.ctrlKey) {
          modifiers += "Ctrl ";
        }

        if (desc.shiftKey) {
          modifiers += "Shift" ;
        }

        if (desc.metaKey) {
          modifiers += "Meta ";
        }

        var event = document.createEvent("KeyboardEvent");
            event.initKeyboardEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.which, 0,
              modifiers, desc.repeat, desc.locale);

        return event;
      
            }, TMP_Keyboard_construct_12.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("locale");
        self.$alias_native("repeat?", "repeat");
        
        Opal.defn(self, '$key', TMP_Keyboard_key_13 = function $$key() {
          var self = this;

          return self["native"].key || self["native"].keyIdentifier || nil
        }, TMP_Keyboard_key_13.$$arity = 0);
        
        Opal.defn(self, '$code', TMP_Keyboard_code_14 = function $$code() {
          var self = this;

          return self["native"].keyCode || self["native"].which || nil
        }, TMP_Keyboard_code_14.$$arity = 0);
        
        Opal.defn(self, '$char', TMP_Keyboard_char_15 = function() {
          var self = this;

          return self["native"].char || self["native"].charCode || (function() {if ($truthy(self.$code())) {
            return self.$code().$chr()
            } else {
            return nil
          }; return nil; })()
        }, TMP_Keyboard_char_15.$$arity = 0);
        Opal.alias(self, "to_i", "key");
        
        Opal.defn(self, '$down?', TMP_Keyboard_down$q_16 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keydown")
        }, TMP_Keyboard_down$q_16.$$arity = 0);
        
        Opal.defn(self, '$press?', TMP_Keyboard_press$q_17 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keypress")
        }, TMP_Keyboard_press$q_17.$$arity = 0);
        return (Opal.defn(self, '$up?', TMP_Keyboard_up$q_18 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keyup")
        }, TMP_Keyboard_up$q_18.$$arity = 0), nil) && 'up?';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/focus"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$convert', '$supported?', '$DOM']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Focus(){};
        var self = $Focus = $klass($base, $super, 'Focus', $Focus);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Focus_supported$q_1, TMP_Focus_construct_4, TMP_Focus_construct_5, TMP_Focus_related_6;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Focus_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Focus")
        }, TMP_Focus_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_view$eq_2, TMP_Definition_related$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$view=', TMP_Definition_view$eq_2 = function(value) {
            var self = this;

            return self["native"].view = Opal.const_get_relative($nesting, 'Native').$convert(value)
          }, TMP_Definition_view$eq_2.$$arity = 1);
          return (Opal.defn(self, '$related=', TMP_Definition_related$eq_3 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = Opal.const_get_relative($nesting, 'Native').$convert(elem)
          }, TMP_Definition_related$eq_3.$$arity = 1), nil) && 'related=';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Focus_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new FocusEvent(name, desc)
            }, TMP_Focus_construct_4.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Focus_construct_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("FocusEvent");
            event.initFocusEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0, desc.relatedTarget);

        return event;
      
            }, TMP_Focus_construct_5.$$arity = 2)}};
        return (Opal.defn(self, '$related', TMP_Focus_related_6 = function $$related() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget)
        }, TMP_Focus_related_6.$$arity = 0), nil) && 'related';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/wheel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$===', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Wheel(){};
        var self = $Wheel = $klass($base, $super, 'Wheel', $Wheel);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Wheel_supported$q_1, TMP_Wheel_construct_6, TMP_Wheel_mode_7;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Wheel_supported$q_1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("WheelEvent")['$nil?']()['$!']()
        }, TMP_Wheel_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_x$eq_2, TMP_Definition_y$eq_3, TMP_Definition_z$eq_4, TMP_Definition_mode$eq_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$x=', TMP_Definition_x$eq_2 = function(value) {
            var self = this;

            return self["native"].deltaX = value
          }, TMP_Definition_x$eq_2.$$arity = 1);
          
          Opal.defn(self, '$y=', TMP_Definition_y$eq_3 = function(value) {
            var self = this;

            return self["native"].deltaY = value
          }, TMP_Definition_y$eq_3.$$arity = 1);
          
          Opal.defn(self, '$z=', TMP_Definition_z$eq_4 = function(value) {
            var self = this;

            return self["native"].deltaZ = value
          }, TMP_Definition_z$eq_4.$$arity = 1);
          return (Opal.defn(self, '$mode=', TMP_Definition_mode$eq_5 = function(value) {
            var self = this, $case = nil;

            
            value = (function() {$case = value;
            if ("pixel"['$===']($case)) {return WheelEvent.DOM_DELTA_PIXEL}
            else if ("line"['$===']($case)) {return WheelEvent.DOM_DELTA_LINE}
            else if ("page"['$===']($case)) {return WheelEvent.DOM_DELTA_PAGE}
            else { return nil }})();
            return self["native"].deltaMode = value;
          }, TMP_Definition_mode$eq_5.$$arity = 1), nil) && 'mode=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        Opal.defs(self, '$construct', TMP_Wheel_construct_6 = function $$construct(name, desc) {
          var self = this;

          return new WheelEvent(name, desc)
        }, TMP_Wheel_construct_6.$$arity = 2);
        self.$alias_native("x", "deltaX");
        self.$alias_native("y", "deltaY");
        self.$alias_native("z", "deltaZ");
        return (Opal.defn(self, '$mode', TMP_Wheel_mode_7 = function $$mode() {
          var self = this, $case = nil;

          return (function() {$case = self["native"].deltaMode;
          if ((WheelEvent.DOM_DELTA_PIXEL)['$===']($case)) {return "pixel"}
          else if ((WheelEvent.DOM_DELTA_LINE)['$===']($case)) {return "line"}
          else if ((WheelEvent.DOM_DELTA_PAGE)['$===']($case)) {return "page"}
          else { return nil }})()
        }, TMP_Wheel_mode_7.$$arity = 0), nil) && 'mode';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/composition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Composition(){};
        var self = $Composition = $klass($base, $super, 'Composition', $Composition);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Composition_supported$q_1, TMP_Composition_construct_4, TMP_Composition_construct_5, TMP_Composition_start$q_6, TMP_Composition_update$q_7, TMP_Composition_end$q_8;

        
        Opal.defs(self, '$supported?', TMP_Composition_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Composition")
        }, TMP_Composition_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_data$eq_2, TMP_Definition_locale$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$data=', TMP_Definition_data$eq_2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, TMP_Definition_data$eq_2.$$arity = 1);
          return (Opal.defn(self, '$locale=', TMP_Definition_locale$eq_3 = function(value) {
            var self = this;

            return self["native"].locale = value
          }, TMP_Definition_locale$eq_3.$$arity = 1), nil) && 'locale=';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Composition_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new CompositionEvent(name, desc)
            }, TMP_Composition_construct_4.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Composition_construct_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CompositionEvent");
            event.initCompositionEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.data, desc.locale);

        return event;
      
            }, TMP_Composition_construct_5.$$arity = 2)}};
        self.$alias_native("data");
        self.$alias_native("locale");
        
        Opal.defn(self, '$start?', TMP_Composition_start$q_6 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionstart")
        }, TMP_Composition_start$q_6.$$arity = 0);
        
        Opal.defn(self, '$update?', TMP_Composition_update$q_7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionupdate")
        }, TMP_Composition_update$q_7.$$arity = 0);
        return (Opal.defn(self, '$end?', TMP_Composition_end$q_8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionend")
        }, TMP_Composition_end$q_8.$$arity = 0), nil) && 'end?';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/animation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Animation_supported$q_1, TMP_Animation_construct_4, TMP_Animation_construct_5;

        
        Opal.defs(self, '$supported?', TMP_Animation_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Animation")
        }, TMP_Animation_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_animation$eq_2, TMP_Definition_elapsed$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$animation=', TMP_Definition_animation$eq_2 = function(value) {
            var self = this;

            return self["native"].animationName = value
          }, TMP_Definition_animation$eq_2.$$arity = 1);
          return (Opal.defn(self, '$elapsed=', TMP_Definition_elapsed$eq_3 = function(value) {
            var self = this;

            return self["native"].elapsedTime = value
          }, TMP_Definition_elapsed$eq_3.$$arity = 1), nil) && 'elapsed=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Animation_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new AnimationEvent(name, desc)
            }, TMP_Animation_construct_4.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Animation_construct_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("AnimationEvent");
            event.initAnimationEvent(name, desc.bubbles, desc.cancelable,
              desc.animationName, desc.elapsedTime);

        return event;
      
            }, TMP_Animation_construct_5.$$arity = 2)}};
        self.$alias_native("name", "animationName");
        return self.$alias_native("elapsed", "elapsedTime");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/audio_processing"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $AudioProcessing(){};
        var self = $AudioProcessing = $klass($base, $super, 'AudioProcessing', $AudioProcessing);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AudioProcessing_supported$q_1, TMP_AudioProcessing_construct_5;

        
        Opal.defs(self, '$supported?', TMP_AudioProcessing_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.AudioProcessing")
        }, TMP_AudioProcessing_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_time$eq_2, TMP_Definition_input$eq_3, TMP_Definition_output$eq_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$time=', TMP_Definition_time$eq_2 = function(value) {
            var self = this;

            return self["native"].playbackTime = value
          }, TMP_Definition_time$eq_2.$$arity = 1);
          
          Opal.defn(self, '$input=', TMP_Definition_input$eq_3 = function(value) {
            var self = this;

            return self["native"].inputBuffer = value
          }, TMP_Definition_input$eq_3.$$arity = 1);
          return (Opal.defn(self, '$output=', TMP_Definition_output$eq_4 = function(value) {
            var self = this;

            return self["native"].outputBuffer = value
          }, TMP_Definition_output$eq_4.$$arity = 1), nil) && 'output=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_AudioProcessing_construct_5 = function $$construct(name, desc) {
              var self = this;

              return new AudioProcessingEvent(name, desc)
            }, TMP_AudioProcessing_construct_5.$$arity = 2)}};
        self.$alias_native("time", "playbackTime");
        self.$alias_native("input", "inputBuffer");
        return self.$alias_native("output", "outputBuffer");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/before_unload"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $BeforeUnload(){};
        var self = $BeforeUnload = $klass($base, $super, 'BeforeUnload', $BeforeUnload);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BeforeUnload_supported$q_1, TMP_BeforeUnload_construct_2;

        
        Opal.defs(self, '$supported?', TMP_BeforeUnload_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.BeforeUnload")
        }, TMP_BeforeUnload_supported$q_1.$$arity = 0);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            return Opal.defs(self, '$construct', TMP_BeforeUnload_construct_2 = function $$construct(name, desc) {
              var self = this;

              return new BeforeUnloadEvent(name, desc)
            }, TMP_BeforeUnload_construct_2.$$arity = 2)
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/clipboard"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Clipboard(){};
        var self = $Clipboard = $klass($base, $super, 'Clipboard', $Clipboard);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Clipboard_supported$q_1, TMP_Clipboard_construct_4;

        
        Opal.defs(self, '$supported?', TMP_Clipboard_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Clipboard")
        }, TMP_Clipboard_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_data$eq_2, TMP_Definition_type$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$data=', TMP_Definition_data$eq_2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, TMP_Definition_data$eq_2.$$arity = 1);
          return (Opal.defn(self, '$type=', TMP_Definition_type$eq_3 = function(value) {
            var self = this;

            return self["native"].dataType = value
          }, TMP_Definition_type$eq_3.$$arity = 1), nil) && 'type=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Clipboard_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new ClipboardEvent(name, desc)
            }, TMP_Clipboard_construct_4.$$arity = 2)}};
        self.$alias_native("data");
        return self.$alias_native("type", "dataType");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/device_light"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DeviceLight(){};
        var self = $DeviceLight = $klass($base, $super, 'DeviceLight', $DeviceLight);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DeviceLight_supported$q_1, TMP_DeviceLight_construct_3;

        
        Opal.defs(self, '$supported?', TMP_DeviceLight_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.DeviceLight")
        }, TMP_DeviceLight_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_value$eq_2;

          def["native"] = nil;
          return (Opal.defn(self, '$value=', TMP_Definition_value$eq_2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, TMP_Definition_value$eq_2.$$arity = 1), nil) && 'value='
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_DeviceLight_construct_3 = function $$construct(name, desc) {
              var self = this;

              return new DeviceLightEvent(name, desc)
            }, TMP_DeviceLight_construct_3.$$arity = 2)}};
        return self.$alias_native("value");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/device_motion"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$new', '$to_n', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DeviceMotion(){};
        var self = $DeviceMotion = $klass($base, $super, 'DeviceMotion', $DeviceMotion);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DeviceMotion_supported$q_1, TMP_DeviceMotion_construct_6, TMP_DeviceMotion_construct_7;

        
        Opal.defs(self, '$supported?', TMP_DeviceMotion_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.DeviceMotion")
        }, TMP_DeviceMotion_supported$q_1.$$arity = 0);
        Opal.const_set($nesting[0], 'Acceleration', Opal.const_get_relative($nesting, 'Struct').$new("x", "y", "z"));
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_acceleration$eq_2, TMP_Definition_acceleration_with_gravity$eq_3, TMP_Definition_rotation$eq_4, TMP_Definition_interval$eq_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$acceleration=', TMP_Definition_acceleration$eq_2 = function(value) {
            var self = this;

            return self["native"].acceleration = value.$to_n()
          }, TMP_Definition_acceleration$eq_2.$$arity = 1);
          
          Opal.defn(self, '$acceleration_with_gravity=', TMP_Definition_acceleration_with_gravity$eq_3 = function(value) {
            var self = this;

            return self["native"].accelerationIncludingGravity = value.$to_n()
          }, TMP_Definition_acceleration_with_gravity$eq_3.$$arity = 1);
          
          Opal.defn(self, '$rotation=', TMP_Definition_rotation$eq_4 = function(value) {
            var self = this;

            return self["native"].rotationRate = value
          }, TMP_Definition_rotation$eq_4.$$arity = 1);
          return (Opal.defn(self, '$interval=', TMP_Definition_interval$eq_5 = function(value) {
            var self = this;

            return self["native"].interval = value
          }, TMP_Definition_interval$eq_5.$$arity = 1), nil) && 'interval=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_DeviceMotion_construct_6 = function $$construct(name, desc) {
              var self = this;

              return new DeviceMotionEvent(name, desc)
            }, TMP_DeviceMotion_construct_6.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_DeviceMotion_construct_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceMotionEvent");
            event.initDeviceMotionEvent(name, desc.bubbles, desc.cancelable,
              desc.acceleration, desc.accelerationIncludingGravity,
              desc.rotationRate, desc.interval);

        return event;
      
            }, TMP_DeviceMotion_construct_7.$$arity = 2)}};
        self.$alias_native("acceleration");
        self.$alias_native("acceleration_with_gravity", "accelerationIncludingGravity");
        self.$alias_native("rotation", "rotationRate");
        return self.$alias_native("interval");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/device_orientation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DeviceOrientation(){};
        var self = $DeviceOrientation = $klass($base, $super, 'DeviceOrientation', $DeviceOrientation);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DeviceOrientation_supported$q_1, TMP_DeviceOrientation_construct_6, TMP_DeviceOrientation_construct_7;

        
        Opal.defs(self, '$supported?', TMP_DeviceOrientation_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.DeviceOrientation")
        }, TMP_DeviceOrientation_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_absolute$eq_2, TMP_Definition_alpha$eq_3, TMP_Definition_beta$eq_4, TMP_Definition_gamma$eq_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$absolute=', TMP_Definition_absolute$eq_2 = function(value) {
            var self = this;

            return self["native"].absolute = value
          }, TMP_Definition_absolute$eq_2.$$arity = 1);
          
          Opal.defn(self, '$alpha=', TMP_Definition_alpha$eq_3 = function(value) {
            var self = this;

            return self["native"].alpha = value
          }, TMP_Definition_alpha$eq_3.$$arity = 1);
          
          Opal.defn(self, '$beta=', TMP_Definition_beta$eq_4 = function(value) {
            var self = this;

            return self["native"].beta = value
          }, TMP_Definition_beta$eq_4.$$arity = 1);
          return (Opal.defn(self, '$gamma=', TMP_Definition_gamma$eq_5 = function(value) {
            var self = this;

            return self["native"].gamma = value
          }, TMP_Definition_gamma$eq_5.$$arity = 1), nil) && 'gamma=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_DeviceOrientation_construct_6 = function $$construct(name, desc) {
              var self = this;

              return new DeviceOrientationEvent(name, desc)
            }, TMP_DeviceOrientation_construct_6.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_DeviceOrientation_construct_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceOrientationEvent");
            event.initDeviceOrientationEvent(name, desc.bubbles, desc.cancelable,
              desc.alpha, desc.beta, desc.gamma, desc.absolute);

        return event;
      
            }, TMP_DeviceOrientation_construct_7.$$arity = 2)}};
        self.$alias_native("absolute");
        self.$alias_native("alpha");
        self.$alias_native("beta");
        return self.$alias_native("gamma");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/device_proximity"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DeviceProximity(){};
        var self = $DeviceProximity = $klass($base, $super, 'DeviceProximity', $DeviceProximity);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DeviceProximity_supported$q_1, TMP_DeviceProximity_construct_5;

        
        Opal.defs(self, '$supported?', TMP_DeviceProximity_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.DeviceProximity")
        }, TMP_DeviceProximity_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_value$eq_2, TMP_Definition_min$eq_3, TMP_Definition_max$eq_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$value=', TMP_Definition_value$eq_2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, TMP_Definition_value$eq_2.$$arity = 1);
          
          Opal.defn(self, '$min=', TMP_Definition_min$eq_3 = function(value) {
            var self = this;

            return self["native"].min = value
          }, TMP_Definition_min$eq_3.$$arity = 1);
          return (Opal.defn(self, '$max=', TMP_Definition_max$eq_4 = function(value) {
            var self = this;

            return self["native"].max = value
          }, TMP_Definition_max$eq_4.$$arity = 1), nil) && 'max=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_DeviceProximity_construct_5 = function $$construct(name, desc) {
              var self = this;

              return new DeviceProximityEvent(name, desc)
            }, TMP_DeviceProximity_construct_5.$$arity = 2)}};
        self.$alias_native("value");
        self.$alias_native("min");
        return self.$alias_native("max");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/drag"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$include', '$new', '$convert', '$supported?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$raise']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Drag(){};
        var self = $Drag = $klass($base, $super, 'Drag', $Drag);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Drag_supported$q_1, TMP_Drag_construct_14, TMP_Drag_construct_15, TMP_Drag_client_16, TMP_Drag_screen_17, TMP_Drag_x_18, TMP_Drag_y_19, TMP_Drag_related_20, TMP_Drag_transfer_21;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Drag_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Drag")
        }, TMP_Drag_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_alt$B_6, TMP_Definition_ctrl$B_7, TMP_Definition_meta$B_8, TMP_Definition_button$eq_9, TMP_Definition_client_10, TMP_Definition_screen_11, TMP_Definition_related$eq_12, TMP_Definition_transfer$eq_13;

          def["native"] = nil;
          
          (function($base, $super, $parent_nesting) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Client_x$eq_2, TMP_Client_y$eq_3;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Client_x$eq_2 = function(value) {
              var self = this;

              return self["native"].clientX = value
            }, TMP_Client_x$eq_2.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Client_y$eq_3 = function(value) {
              var self = this;

              return self["native"].clientY = value
            }, TMP_Client_y$eq_3.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Screen_x$eq_4, TMP_Screen_y$eq_5;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Screen_x$eq_4 = function(value) {
              var self = this;

              return self["native"].screenX = value
            }, TMP_Screen_x$eq_4.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Screen_y$eq_5 = function(value) {
              var self = this;

              return self["native"].screenY = value
            }, TMP_Screen_y$eq_5.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          
          Opal.defn(self, '$alt!', TMP_Definition_alt$B_6 = function() {
            var self = this;

            return self["native"].altKey = true
          }, TMP_Definition_alt$B_6.$$arity = 0);
          
          Opal.defn(self, '$ctrl!', TMP_Definition_ctrl$B_7 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, TMP_Definition_ctrl$B_7.$$arity = 0);
          
          Opal.defn(self, '$meta!', TMP_Definition_meta$B_8 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, TMP_Definition_meta$B_8.$$arity = 0);
          
          Opal.defn(self, '$button=', TMP_Definition_button$eq_9 = function(value) {
            var self = this;

            return self["native"].button = value
          }, TMP_Definition_button$eq_9.$$arity = 1);
          
          Opal.defn(self, '$client', TMP_Definition_client_10 = function $$client() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Client').$new(self["native"])
          }, TMP_Definition_client_10.$$arity = 0);
          
          Opal.defn(self, '$screen', TMP_Definition_screen_11 = function $$screen() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Screen').$new(self["native"])
          }, TMP_Definition_screen_11.$$arity = 0);
          
          Opal.defn(self, '$related=', TMP_Definition_related$eq_12 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = Opal.const_get_relative($nesting, 'Native').$convert(elem)
          }, TMP_Definition_related$eq_12.$$arity = 1);
          return (Opal.defn(self, '$transfer=', TMP_Definition_transfer$eq_13 = function(value) {
            var self = this;

            return self["native"].dataTransfer = Opal.const_get_relative($nesting, 'Native').$convert(value)
          }, TMP_Definition_transfer$eq_13.$$arity = 1), nil) && 'transfer=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Drag_construct_14 = function $$construct(name, desc) {
              var self = this;

              return new DragEvent(name, desc)
            }, TMP_Drag_construct_14.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Drag_construct_15 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DragEvent");
            event.initDragEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey, desc.altKey, desc.shiftKey, desc.metaKey,
              desc.button || 0, desc.relatedTarget, desc.dataTransfer);

        return event;
      
            }, TMP_Drag_construct_15.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("button");
        
        Opal.defn(self, '$client', TMP_Drag_client_16 = function $$client() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Position').$new(self["native"].clientX, self["native"].clientY)
        }, TMP_Drag_client_16.$$arity = 0);
        
        Opal.defn(self, '$screen', TMP_Drag_screen_17 = function $$screen() {
          var self = this;

          if ($truthy((typeof(self["native"].screenX) !== "undefined"))) {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].screenX, self["native"].screenY)
            } else {
            return nil
          }
        }, TMP_Drag_screen_17.$$arity = 0);
        
        Opal.defn(self, '$x', TMP_Drag_x_18 = function $$x() {
          var self = this;

          return self.$screen().$x()
        }, TMP_Drag_x_18.$$arity = 0);
        
        Opal.defn(self, '$y', TMP_Drag_y_19 = function $$y() {
          var self = this;

          return self.$screen().$y()
        }, TMP_Drag_y_19.$$arity = 0);
        
        Opal.defn(self, '$related', TMP_Drag_related_20 = function $$related() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget)
        }, TMP_Drag_related_20.$$arity = 0);
        return (Opal.defn(self, '$transfer', TMP_Drag_transfer_21 = function $$transfer() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Drag_transfer_21.$$arity = 0), nil) && 'transfer';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/gamepad"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Gamepad(){};
        var self = $Gamepad = $klass($base, $super, 'Gamepad', $Gamepad);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Gamepad_supported$q_1, TMP_Gamepad_construct_7, TMP_Gamepad_id_8, TMP_Gamepad_index_9, TMP_Gamepad_at_10, TMP_Gamepad_axes_11, TMP_Gamepad_buttons_12;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Gamepad_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Gamepad")
        }, TMP_Gamepad_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_id$eq_2, TMP_Definition_index$eq_3, TMP_Definition_at$eq_4, TMP_Definition_axes$eq_5, TMP_Definition_buttons$eq_6;

          def["native"] = nil;
          
          
          Opal.defn(self, '$id=', TMP_Definition_id$eq_2 = function(value) {
            var self = this;

            return self["native"].id = value
          }, TMP_Definition_id$eq_2.$$arity = 1);
          
          Opal.defn(self, '$index=', TMP_Definition_index$eq_3 = function(value) {
            var self = this;

            return self["native"].index = value
          }, TMP_Definition_index$eq_3.$$arity = 1);
          
          Opal.defn(self, '$at=', TMP_Definition_at$eq_4 = function(value) {
            var self = this;

            return self["native"].timestamp = value
          }, TMP_Definition_at$eq_4.$$arity = 1);
          
          Opal.defn(self, '$axes=', TMP_Definition_axes$eq_5 = function(value) {
            var self = this;

            return self["native"].axes = value
          }, TMP_Definition_axes$eq_5.$$arity = 1);
          return (Opal.defn(self, '$buttons=', TMP_Definition_buttons$eq_6 = function(value) {
            var self = this;

            return self["native"].buttons = value
          }, TMP_Definition_buttons$eq_6.$$arity = 1), nil) && 'buttons=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Gamepad_construct_7 = function $$construct(name, desc) {
              var self = this;

              return new GamepadEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        gamepad:    desc })
            }, TMP_Gamepad_construct_7.$$arity = 2)}};
        
        Opal.defn(self, '$id', TMP_Gamepad_id_8 = function $$id() {
          var self = this;

          return self["native"].gamepad.id
        }, TMP_Gamepad_id_8.$$arity = 0);
        
        Opal.defn(self, '$index', TMP_Gamepad_index_9 = function $$index() {
          var self = this;

          return self["native"].gamepad.index
        }, TMP_Gamepad_index_9.$$arity = 0);
        
        Opal.defn(self, '$at', TMP_Gamepad_at_10 = function $$at() {
          var self = this;

          return self["native"].gamepad.timestamp
        }, TMP_Gamepad_at_10.$$arity = 0);
        
        Opal.defn(self, '$axes', TMP_Gamepad_axes_11 = function $$axes() {
          var self = this;

          return self["native"].gamepad.axes
        }, TMP_Gamepad_axes_11.$$arity = 0);
        return (Opal.defn(self, '$buttons', TMP_Gamepad_buttons_12 = function $$buttons() {
          var self = this;

          return self["native"].gamepad.buttons
        }, TMP_Gamepad_buttons_12.$$arity = 0), nil) && 'buttons';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/hash_change"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $HashChange(){};
        var self = $HashChange = $klass($base, $super, 'HashChange', $HashChange);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HashChange_supported$q_1, TMP_HashChange_construct_4;

        
        Opal.defs(self, '$supported?', TMP_HashChange_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.HashChange")
        }, TMP_HashChange_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_old$eq_2, TMP_Definition_new$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$old=', TMP_Definition_old$eq_2 = function(value) {
            var self = this;

            return self["native"].oldURL = value
          }, TMP_Definition_old$eq_2.$$arity = 1);
          return (Opal.defn(self, '$new=', TMP_Definition_new$eq_3 = function(value) {
            var self = this;

            return self["native"].newURL = value
          }, TMP_Definition_new$eq_3.$$arity = 1), nil) && 'new=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_HashChange_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new HashChangeEvent(name, desc)
            }, TMP_HashChange_construct_4.$$arity = 2)}};
        self.$alias_native("old", "oldURL");
        return self.$alias_native("new", "newURL");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/progress"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Progress(){};
        var self = $Progress = $klass($base, $super, 'Progress', $Progress);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Progress_supported$q_1, TMP_Progress_construct_5, TMP_Progress_construct_6;

        
        Opal.defs(self, '$supported?', TMP_Progress_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Progress")
        }, TMP_Progress_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_computable$eq_2, TMP_Definition_loaded$eq_3, TMP_Definition_total$eq_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$computable=', TMP_Definition_computable$eq_2 = function(value) {
            var self = this;

            return self["native"].computableLength = value
          }, TMP_Definition_computable$eq_2.$$arity = 1);
          
          Opal.defn(self, '$loaded=', TMP_Definition_loaded$eq_3 = function(value) {
            var self = this;

            return self["native"].loaded = value
          }, TMP_Definition_loaded$eq_3.$$arity = 1);
          return (Opal.defn(self, '$total=', TMP_Definition_total$eq_4 = function(value) {
            var self = this;

            return self["native"].total = value
          }, TMP_Definition_total$eq_4.$$arity = 1), nil) && 'total=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Progress_construct_5 = function $$construct(name, desc) {
              var self = this;

              return new ProgressEvent(name, desc)
            }, TMP_Progress_construct_5.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Progress_construct_6 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("ProgressEvent");
            event.initProgressEvent(name, desc.bubbles, desc.cancelable,
              desc.computable, desc.loaded, desc.total);

        return event;
      
            }, TMP_Progress_construct_6.$$arity = 2)}};
        self.$alias_native("computable?", "computableLength");
        self.$alias_native("loaded");
        return self.$alias_native("total");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/page_transition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $PageTransition(){};
        var self = $PageTransition = $klass($base, $super, 'PageTransition', $PageTransition);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PageTransition_supported$q_1, TMP_PageTransition_construct_3;

        
        Opal.defs(self, '$supported?', TMP_PageTransition_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.PageTransition")
        }, TMP_PageTransition_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_persisted$eq_2;

          def["native"] = nil;
          return (Opal.defn(self, '$persisted=', TMP_Definition_persisted$eq_2 = function(value) {
            var self = this;

            return self["native"].persisted = value
          }, TMP_Definition_persisted$eq_2.$$arity = 1), nil) && 'persisted='
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.PageTransition"))) {
            Opal.defs(self, '$construct', TMP_PageTransition_construct_3 = function $$construct(name, desc) {
              var self = this;

              return new PageTransitionEvent(name, desc)
            }, TMP_PageTransition_construct_3.$$arity = 2)}};
        return self.$alias_native("persisted?", "persisted");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/pop_state"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $PopState(){};
        var self = $PopState = $klass($base, $super, 'PopState', $PopState);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PopState_supported$q_1, TMP_PopState_construct_3, TMP_PopState_construct_4;

        
        Opal.defs(self, '$supported?', TMP_PopState_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.PopState")
        }, TMP_PopState_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_state$eq_2;

          def["native"] = nil;
          return (Opal.defn(self, '$state=', TMP_Definition_state$eq_2 = function(value) {
            var self = this;

            return self["native"].state = value
          }, TMP_Definition_state$eq_2.$$arity = 1), nil) && 'state='
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_PopState_construct_3 = function $$construct(name, desc) {
              var self = this;

              return new PopStateEvent(name, desc)
            }, TMP_PopState_construct_3.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_PopState_construct_4 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent('PopStateEvent');
            event.initPopStateEvent(name, desc.bubbles, desc.cancelable,
              desc.state);

        return event;
      
            }, TMP_PopState_construct_4.$$arity = 2)}};
        return self.$alias_native("state");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/storage"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Storage(){};
        var self = $Storage = $klass($base, $super, 'Storage', $Storage);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Storage_supported$q_1, TMP_Storage_construct_7;

        
        Opal.defs(self, '$supported?', TMP_Storage_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Storage")
        }, TMP_Storage_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_key$eq_2, TMP_Definition_new$eq_3, TMP_Definition_old$eq_4, TMP_Definition_area$eq_5, TMP_Definition_url$eq_6;

          def["native"] = nil;
          
          
          Opal.defn(self, '$key=', TMP_Definition_key$eq_2 = function(value) {
            var self = this;

            return self["native"].key = value
          }, TMP_Definition_key$eq_2.$$arity = 1);
          
          Opal.defn(self, '$new=', TMP_Definition_new$eq_3 = function(value) {
            var self = this;

            return self["native"].newValue = value
          }, TMP_Definition_new$eq_3.$$arity = 1);
          
          Opal.defn(self, '$old=', TMP_Definition_old$eq_4 = function(value) {
            var self = this;

            return self["native"].oldValue = value
          }, TMP_Definition_old$eq_4.$$arity = 1);
          
          Opal.defn(self, '$area=', TMP_Definition_area$eq_5 = function(value) {
            var self = this;

            return self["native"].storageArea = value
          }, TMP_Definition_area$eq_5.$$arity = 1);
          return (Opal.defn(self, '$url=', TMP_Definition_url$eq_6 = function(value) {
            var self = this;

            return self["native"].url = value
          }, TMP_Definition_url$eq_6.$$arity = 1), nil) && 'url=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Storage_construct_7 = function $$construct(name, desc) {
              var self = this;

              return new StorageEvent(name, desc)
            }, TMP_Storage_construct_7.$$arity = 2)}};
        self.$alias_native("key");
        self.$alias_native("new", "newValue");
        self.$alias_native("old", "oldValue");
        self.$alias_native("area", "storageArea");
        return self.$alias_native("url");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/touch"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Touch(){};
        var self = $Touch = $klass($base, $super, 'Touch', $Touch);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Touch_supported$q_1, TMP_Touch_construct_6, TMP_Touch_cancel$q_7, TMP_Touch_end$q_8, TMP_Touch_leave$q_9, TMP_Touch_move$q_10, TMP_Touch_start$q_11;

        
        Opal.defs(self, '$supported?', TMP_Touch_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Touch")
        }, TMP_Touch_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_alt$B_2, TMP_Definition_ctrl$B_3, TMP_Definition_meta$B_4, TMP_Definition_shift$B_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$alt!', TMP_Definition_alt$B_2 = function() {
            var self = this;

            return self["native"].altKey = true
          }, TMP_Definition_alt$B_2.$$arity = 0);
          
          Opal.defn(self, '$ctrl!', TMP_Definition_ctrl$B_3 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, TMP_Definition_ctrl$B_3.$$arity = 0);
          
          Opal.defn(self, '$meta!', TMP_Definition_meta$B_4 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, TMP_Definition_meta$B_4.$$arity = 0);
          return (Opal.defn(self, '$shift!', TMP_Definition_shift$B_5 = function() {
            var self = this;

            return self["native"].shiftKey = true
          }, TMP_Definition_shift$B_5.$$arity = 0), nil) && 'shift!';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Touch_construct_6 = function $$construct(name, desc) {
              var self = this;

              return new TouchEvent(name, desc)
            }, TMP_Touch_construct_6.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        
        Opal.defn(self, '$cancel?', TMP_Touch_cancel$q_7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchcancel")
        }, TMP_Touch_cancel$q_7.$$arity = 0);
        
        Opal.defn(self, '$end?', TMP_Touch_end$q_8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchend")
        }, TMP_Touch_end$q_8.$$arity = 0);
        
        Opal.defn(self, '$leave?', TMP_Touch_leave$q_9 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchleave")
        }, TMP_Touch_leave$q_9.$$arity = 0);
        
        Opal.defn(self, '$move?', TMP_Touch_move$q_10 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchmove")
        }, TMP_Touch_move$q_10.$$arity = 0);
        return (Opal.defn(self, '$start?', TMP_Touch_start$q_11 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchstart")
        }, TMP_Touch_start$q_11.$$arity = 0), nil) && 'start?';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/sensor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Sensor(){};
        var self = $Sensor = $klass($base, $super, 'Sensor', $Sensor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Sensor_supported$q_1, TMP_Sensor_construct_2;

        
        Opal.defs(self, '$supported?', TMP_Sensor_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Sensor")
        }, TMP_Sensor_supported$q_1.$$arity = 0);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            return Opal.defs(self, '$construct', TMP_Sensor_construct_2 = function $$construct(name, desc) {
              var self = this;

              return new SensorEvent(name, desc)
            }, TMP_Sensor_construct_2.$$arity = 2)
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["ostruct"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$each_pair', '$new_ostruct_member', '$[]=', '$-', '$[]', '$to_sym', '$>', '$length', '$raise', '$new', '$end_with?', '$!=', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$attr_reader', '$__send__', '$singleton_class', '$delete', '$respond_to?', '$define_singleton_method', '$__id__', '$class', '$any?', '$+', '$join', '$map', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    function $OpenStruct(){};
    var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_OpenStruct_initialize_2, TMP_OpenStruct_$$_3, TMP_OpenStruct_$$$eq_4, TMP_OpenStruct_method_missing_5, TMP_OpenStruct_each_pair_6, TMP_OpenStruct_$eq$eq_8, TMP_OpenStruct_$eq$eq$eq_9, TMP_OpenStruct_eql$q_10, TMP_OpenStruct_to_h_11, TMP_OpenStruct_to_n_12, TMP_OpenStruct_hash_13, TMP_OpenStruct_delete_field_14, TMP_OpenStruct_new_ostruct_member_17, TMP_OpenStruct_inspect_19;

    def.table = nil;
    
    
    Opal.defn(self, '$initialize', TMP_OpenStruct_initialize_2 = function $$initialize(hash) {
      var TMP_1, self = this;

      if (hash == null) {
        hash = nil;
      }
      
      self.table = $hash2([], {});
      if ($truthy(hash)) {
        return $send(hash, 'each_pair', [], (TMP_1 = function(key, value){var self = TMP_1.$$s || this, $writer = nil;
          if (self.table == null) self.table = nil;
if (key == null) key = nil;if (value == null) value = nil;
        
          $writer = [self.$new_ostruct_member(key), value];
          $send(self.table, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1))
        } else {
        return nil
      };
    }, TMP_OpenStruct_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$[]', TMP_OpenStruct_$$_3 = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym())
    }, TMP_OpenStruct_$$_3.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_OpenStruct_$$$eq_4 = function(name, value) {
      var self = this, $writer = nil;

      
      $writer = [self.$new_ostruct_member(name), value];
      $send(self.table, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, TMP_OpenStruct_$$$eq_4.$$arity = 2);
    
    Opal.defn(self, '$method_missing', TMP_OpenStruct_method_missing_5 = function $$method_missing(name, $a_rest) {
      var self = this, args, $writer = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if ($truthy($rb_gt(args.$length(), 2))) {
        self.$raise(Opal.const_get_relative($nesting, 'NoMethodError').$new("" + "undefined method `" + (name) + "' for #<OpenStruct>", name))};
      if ($truthy(name['$end_with?']("="))) {
        
        if ($truthy(args.$length()['$!='](1))) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError').$new("wrong number of arguments (0 for 1)"))};
        
        $writer = [self.$new_ostruct_member(name['$[]']($range(0, -2, false))), args['$[]'](0)];
        $send(self.table, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
        } else {
        return self.table['$[]'](name.$to_sym())
      };
    }, TMP_OpenStruct_method_missing_5.$$arity = -2);
    
    Opal.defn(self, '$each_pair', TMP_OpenStruct_each_pair_6 = function $$each_pair() {
      var TMP_7, self = this, $iter = TMP_OpenStruct_each_pair_6.$$p, $yield = $iter || nil;

      if ($iter) TMP_OpenStruct_each_pair_6.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      return $send(self.table, 'each_pair', [], (TMP_7 = function(pair){var self = TMP_7.$$s || this;
if (pair == null) pair = nil;
      return Opal.yield1($yield, pair);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
    }, TMP_OpenStruct_each_pair_6.$$arity = 0);
    
    Opal.defn(self, '$==', TMP_OpenStruct_$eq$eq_8 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?'](Opal.const_get_relative($nesting, 'OpenStruct')))) {
        } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    }, TMP_OpenStruct_$eq$eq_8.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_OpenStruct_$eq$eq$eq_9 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?'](Opal.const_get_relative($nesting, 'OpenStruct')))) {
        } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    }, TMP_OpenStruct_$eq$eq$eq_9.$$arity = 1);
    
    Opal.defn(self, '$eql?', TMP_OpenStruct_eql$q_10 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?'](Opal.const_get_relative($nesting, 'OpenStruct')))) {
        } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    }, TMP_OpenStruct_eql$q_10.$$arity = 1);
    
    Opal.defn(self, '$to_h', TMP_OpenStruct_to_h_11 = function $$to_h() {
      var self = this;

      return self.table.$dup()
    }, TMP_OpenStruct_to_h_11.$$arity = 0);
    
    Opal.defn(self, '$to_n', TMP_OpenStruct_to_n_12 = function $$to_n() {
      var self = this;

      return self.table.$to_n()
    }, TMP_OpenStruct_to_n_12.$$arity = 0);
    
    Opal.defn(self, '$hash', TMP_OpenStruct_hash_13 = function $$hash() {
      var self = this;

      return self.table.$hash()
    }, TMP_OpenStruct_hash_13.$$arity = 0);
    self.$attr_reader("table");
    
    Opal.defn(self, '$delete_field', TMP_OpenStruct_delete_field_14 = function $$delete_field(name) {
      var self = this, sym = nil;

      
      sym = name.$to_sym();
      
      try {
        self.$singleton_class().$__send__("remove_method", sym, "" + (sym) + "=")
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
          try {
            nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self.table.$delete(sym);
    }, TMP_OpenStruct_delete_field_14.$$arity = 1);
    
    Opal.defn(self, '$new_ostruct_member', TMP_OpenStruct_new_ostruct_member_17 = function $$new_ostruct_member(name) {
      var TMP_15, TMP_16, self = this;

      
      name = name.$to_sym();
      if ($truthy(self['$respond_to?'](name))) {
        } else {
        
        $send(self, 'define_singleton_method', [name], (TMP_15 = function(){var self = TMP_15.$$s || this;
          if (self.table == null) self.table = nil;

        return self.table['$[]'](name)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
        $send(self, 'define_singleton_method', ["" + (name) + "="], (TMP_16 = function(x){var self = TMP_16.$$s || this, $writer = nil;
          if (self.table == null) self.table = nil;
if (x == null) x = nil;
        
          $writer = [name, x];
          $send(self.table, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
      };
      return name;
    }, TMP_OpenStruct_new_ostruct_member_17.$$arity = 1);
    var ostruct_ids;;
    
    Opal.defn(self, '$inspect', TMP_OpenStruct_inspect_19 = function $$inspect() {
      var TMP_18, self = this, result = nil;

      
      
      var top = (ostruct_ids === undefined),
          ostruct_id = self.$__id__();
    ;
      
      return (function() { try {
      
      result = "" + "#<" + (self.$class());
      
        if (top) {
          ostruct_ids = {};
        }
        if (ostruct_ids.hasOwnProperty(ostruct_id)) {
          return result + ' ...>';
        }
        ostruct_ids[ostruct_id] = true;
      ;
      if ($truthy(self.table['$any?']())) {
        result = $rb_plus(result, " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], (TMP_18 = function(name, value){var self = TMP_18.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
      } finally {
        
        if (top) {
          ostruct_ids = undefined;
        }
      
      }; })();;
    }, TMP_OpenStruct_inspect_19.$$arity = 0);
    return Opal.alias(self, "to_s", "inspect");
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/custom"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$require', '$supports?', '$end_with?', '$[]', '$to_n', '$merge!', '$Native', '$new', '$has_key?']);
  
  self.$require("ostruct");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Custom(){};
        var self = $Custom = $klass($base, $super, 'Custom', $Custom);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Custom_supported$q_1, TMP_Custom_construct_3, TMP_Custom_construct_4, TMP_Custom_construct_5, TMP_Custom_construct_6, TMP_Custom_initialize_7, TMP_Custom_method_missing_8;

        def.detail = nil;
        
        Opal.defs(self, '$supported?', TMP_Custom_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Custom")
        }, TMP_Custom_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_method_missing_2;

          def["native"] = nil;
          return (Opal.defn(self, '$method_missing', TMP_Definition_method_missing_2 = function $$method_missing(name, value) {
            var self = this;

            if ($truthy(name['$end_with?']("="))) {
              return self["native"][name['$[]']($range(0, -2, false))] = value
              } else {
              return nil
            }
          }, TMP_Definition_method_missing_2.$$arity = 2), nil) && 'method_missing'
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
          Opal.defs(self, '$construct', TMP_Custom_construct_3 = function $$construct(name, desc) {
            var self = this;

            return new CustomEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc })
          }, TMP_Custom_construct_3.$$arity = 2)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
          Opal.defs(self, '$construct', TMP_Custom_construct_4 = function $$construct(name, desc) {
            var self = this;

            
        var event = document.createEvent("CustomEvent");
            event.initCustomEvent(name, desc.bubbles, desc.cancelable, desc);

        return event;
      
          }, TMP_Custom_construct_4.$$arity = 2)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.createObject"))) {
          Opal.defs(self, '$construct', TMP_Custom_construct_5 = function $$construct(name, desc) {
            var self = this;

            return self.$Native(document.createEventObject())['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n()
          }, TMP_Custom_construct_5.$$arity = 2)
          } else {
          Opal.defs(self, '$construct', TMP_Custom_construct_6 = function $$construct(name, desc) {
            var self = this;

            return self.$Native(desc)['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n()
          }, TMP_Custom_construct_6.$$arity = 2)
        };
        
        Opal.defn(self, '$initialize', TMP_Custom_initialize_7 = function $$initialize(event, callback) {
          var self = this, $iter = TMP_Custom_initialize_7.$$p, $yield = $iter || nil;

          if (callback == null) {
            callback = nil;
          }
          if ($iter) TMP_Custom_initialize_7.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Custom_initialize_7, false), [event, callback], null);
          return (self.detail = Opal.const_get_relative($nesting, 'Hash').$new(event.detail));
        }, TMP_Custom_initialize_7.$$arity = -2);
        return (Opal.defn(self, '$method_missing', TMP_Custom_method_missing_8 = function $$method_missing(id, $a_rest) {
          var self = this, $iter = TMP_Custom_method_missing_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_Custom_method_missing_8.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self.detail['$has_key?'](id))) {
            return self.detail['$[]'](id)};
          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_Custom_method_missing_8, false), $zuper, $iter);
        }, TMP_Custom_method_missing_8.$$arity = -2), nil) && 'method_missing';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["buffer/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$[]', '$name_for', '$attr_reader', '$==', '$for', '$to_n', '$enum_for']);
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Array(){};
      var self = $Array = $klass($base, $super, 'Array', $Array);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_for_1, TMP_Array_initialize_2, TMP_Array_bits_3, TMP_Array_$$_4, TMP_Array_$$$eq_5, TMP_Array_bytesize_6, TMP_Array_each_7, TMP_Array_length_8, TMP_Array_merge$B_9;

      def["native"] = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      Opal.defs(self, '$for', TMP_Array_for_1 = function(bits, type) {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("" + (Opal.const_get_relative($nesting, 'Buffer').$name_for(bits, type)) + "Array")
      }, TMP_Array_for_1.$$arity = 2);
      self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
      self.$attr_reader("buffer", "type");
      
      Opal.defn(self, '$initialize', TMP_Array_initialize_2 = function $$initialize(buffer, bits, type) {
        var self = this, $iter = TMP_Array_initialize_2.$$p, $yield = $iter || nil;

        if (bits == null) {
          bits = nil;
        }
        if (type == null) {
          type = nil;
        }
        if ($iter) TMP_Array_initialize_2.$$p = null;
        
        if (Opal.const_get_relative($nesting, 'Native')['$=='](buffer)) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_2, false), [buffer], null)
          } else {
          
        var klass = Opal.const_get_relative($nesting, 'Array').$for(bits, type);

        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_2, false), [new klass(buffer.$to_n())], null)
      
        };
        self.buffer = buffer;
        return (self.type = type);
      }, TMP_Array_initialize_2.$$arity = -2);
      
      Opal.defn(self, '$bits', TMP_Array_bits_3 = function $$bits() {
        var self = this;

        return self["native"].BYTES_PER_ELEMENT * 8
      }, TMP_Array_bits_3.$$arity = 0);
      
      Opal.defn(self, '$[]', TMP_Array_$$_4 = function(index, offset) {
        var self = this;

        if (offset == null) {
          offset = nil;
        }
        if ($truthy(offset)) {
          return self["native"].subarray(index, offset)
          } else {
          return self["native"][index]
        }
      }, TMP_Array_$$_4.$$arity = -2);
      
      Opal.defn(self, '$[]=', TMP_Array_$$$eq_5 = function(index, value) {
        var self = this;

        return self["native"][index] = value
      }, TMP_Array_$$$eq_5.$$arity = 2);
      
      Opal.defn(self, '$bytesize', TMP_Array_bytesize_6 = function $$bytesize() {
        var self = this;

        return self["native"].byteLength
      }, TMP_Array_bytesize_6.$$arity = 0);
      
      Opal.defn(self, '$each', TMP_Array_each_7 = function $$each() {
        var self = this, $iter = TMP_Array_each_7.$$p, $yield = $iter || nil;

        if ($iter) TMP_Array_each_7.$$p = null;
        
        if (($yield !== nil)) {
          } else {
          return self.$enum_for("each")
        };
        
      for (var i = 0, length = self["native"].length; i < length; i++) {
        Opal.yield1($yield, self["native"][i])
      }
    ;
        return self;
      }, TMP_Array_each_7.$$arity = 0);
      
      Opal.defn(self, '$length', TMP_Array_length_8 = function $$length() {
        var self = this;

        return self["native"].length
      }, TMP_Array_length_8.$$arity = 0);
      
      Opal.defn(self, '$merge!', TMP_Array_merge$B_9 = function(other, offset) {
        var self = this;

        return self["native"].set(other.$to_n(), offset)
      }, TMP_Array_merge$B_9.$$arity = -2);
      return Opal.alias(self, "size", "length");
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["buffer/view"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$!', '$nil?', '$[]', '$attr_reader', '$native?', '$to_n', '$name_for']);
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $View(){};
      var self = $View = $klass($base, $super, 'View', $View);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_View_supported$q_1, TMP_View_initialize_2, TMP_View_length_3, TMP_View_get_4, TMP_View_set_5, TMP_View_get_int8_6, TMP_View_set_int8_7, TMP_View_get_uint8_8, TMP_View_set_uint8_9, TMP_View_get_int16_10, TMP_View_set_int16_11, TMP_View_get_uint16_12, TMP_View_set_uint16_13, TMP_View_get_int32_14, TMP_View_set_int32_15, TMP_View_get_uint32_16, TMP_View_set_uint32_17, TMP_View_get_float32_18, TMP_View_set_float32_19, TMP_View_get_float64_20, TMP_View_set_float64_21;

      def["native"] = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      Opal.defs(self, '$supported?', TMP_View_supported$q_1 = function() {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("DataView")['$nil?']()['$!']()
      }, TMP_View_supported$q_1.$$arity = 0);
      self.$attr_reader("buffer", "offset");
      
      Opal.defn(self, '$initialize', TMP_View_initialize_2 = function $$initialize(buffer, offset, length) {
        var $a, self = this, $iter = TMP_View_initialize_2.$$p, $yield = $iter || nil;

        if (offset == null) {
          offset = nil;
        }
        if (length == null) {
          length = nil;
        }
        if ($iter) TMP_View_initialize_2.$$p = null;
        
        if ($truthy(self['$native?'](buffer))) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [buffer], null)
        } else if ($truthy(($truthy($a = offset) ? length : $a))) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n(), offset.$to_n(), length.$to_n())], null)
        } else if ($truthy(offset)) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n(), offset.$to_n())], null)
          } else {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n())], null)
        };
        self.buffer = buffer;
        return (self.offset = offset);
      }, TMP_View_initialize_2.$$arity = -2);
      
      Opal.defn(self, '$length', TMP_View_length_3 = function $$length() {
        var self = this;

        return self["native"].byteLength
      }, TMP_View_length_3.$$arity = 0);
      Opal.alias(self, "size", "length");
      
      Opal.defn(self, '$get', TMP_View_get_4 = function $$get(offset, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8;
        }
        if (type == null) {
          type = "unsigned";
        }
        if (little == null) {
          little = false;
        }
        return self["native"]["get" + Opal.const_get_relative($nesting, 'Buffer').$name_for(bits, type)](offset, little)
      }, TMP_View_get_4.$$arity = -2);
      Opal.alias(self, "[]", "get");
      
      Opal.defn(self, '$set', TMP_View_set_5 = function $$set(offset, value, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8;
        }
        if (type == null) {
          type = "unsigned";
        }
        if (little == null) {
          little = false;
        }
        return self["native"]["set" + Opal.const_get_relative($nesting, 'Buffer').$name_for(bits, type)](offset, value, little)
      }, TMP_View_set_5.$$arity = -3);
      Opal.alias(self, "[]=", "set");
      
      Opal.defn(self, '$get_int8', TMP_View_get_int8_6 = function $$get_int8(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt8(offset, little)
      }, TMP_View_get_int8_6.$$arity = -2);
      
      Opal.defn(self, '$set_int8', TMP_View_set_int8_7 = function $$set_int8(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt8(offset, value, little)
      }, TMP_View_set_int8_7.$$arity = -3);
      
      Opal.defn(self, '$get_uint8', TMP_View_get_uint8_8 = function $$get_uint8(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint8(offset, little)
      }, TMP_View_get_uint8_8.$$arity = -2);
      
      Opal.defn(self, '$set_uint8', TMP_View_set_uint8_9 = function $$set_uint8(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint8(offset, value, little)
      }, TMP_View_set_uint8_9.$$arity = -3);
      
      Opal.defn(self, '$get_int16', TMP_View_get_int16_10 = function $$get_int16(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt16(offset, little)
      }, TMP_View_get_int16_10.$$arity = -2);
      
      Opal.defn(self, '$set_int16', TMP_View_set_int16_11 = function $$set_int16(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt16(offset, value, little)
      }, TMP_View_set_int16_11.$$arity = -3);
      
      Opal.defn(self, '$get_uint16', TMP_View_get_uint16_12 = function $$get_uint16(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint16(offset, little)
      }, TMP_View_get_uint16_12.$$arity = -2);
      
      Opal.defn(self, '$set_uint16', TMP_View_set_uint16_13 = function $$set_uint16(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint16(offset, value, little)
      }, TMP_View_set_uint16_13.$$arity = -3);
      
      Opal.defn(self, '$get_int32', TMP_View_get_int32_14 = function $$get_int32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt32(offset, little)
      }, TMP_View_get_int32_14.$$arity = -2);
      
      Opal.defn(self, '$set_int32', TMP_View_set_int32_15 = function $$set_int32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt32(offset, value, little)
      }, TMP_View_set_int32_15.$$arity = -3);
      
      Opal.defn(self, '$get_uint32', TMP_View_get_uint32_16 = function $$get_uint32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint32(offset, little)
      }, TMP_View_get_uint32_16.$$arity = -2);
      
      Opal.defn(self, '$set_uint32', TMP_View_set_uint32_17 = function $$set_uint32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint32(offset, value, little)
      }, TMP_View_set_uint32_17.$$arity = -3);
      
      Opal.defn(self, '$get_float32', TMP_View_get_float32_18 = function $$get_float32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getFloat32(offset, little)
      }, TMP_View_get_float32_18.$$arity = -2);
      
      Opal.defn(self, '$set_float32', TMP_View_set_float32_19 = function $$set_float32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setFloat32(offset, value, little)
      }, TMP_View_set_float32_19.$$arity = -3);
      
      Opal.defn(self, '$get_float64', TMP_View_get_float64_20 = function $$get_float64(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getFloat64(offset, little)
      }, TMP_View_get_float64_20.$$arity = -2);
      return (Opal.defn(self, '$set_float64', TMP_View_set_float64_21 = function $$set_float64(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setFloat64(offset, value, little)
      }, TMP_View_set_float64_21.$$arity = -3), nil) && 'set_float64';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["buffer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$!', '$nil?', '$[]', '$===', '$native?', '$new']);
  
  self.$require("native");
  self.$require("buffer/array");
  self.$require("buffer/view");
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Buffer_supported$q_1, TMP_Buffer_name_for_2, TMP_Buffer_initialize_3, TMP_Buffer_length_4, TMP_Buffer_to_a_5, TMP_Buffer_view_6;

    def["native"] = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Native'));
    Opal.defs(self, '$supported?', TMP_Buffer_supported$q_1 = function() {
      var self = this;
      if ($gvars.$ == null) $gvars.$ = nil;

      return $gvars.$['$[]']("ArrayBuffer")['$nil?']()['$!']()
    }, TMP_Buffer_supported$q_1.$$arity = 0);
    Opal.defs(self, '$name_for', TMP_Buffer_name_for_2 = function $$name_for(bits, type) {
      var self = this, $case = nil;

      return "" + ((function() {$case = type;
      if ("unsigned"['$===']($case)) {return "Uint"}
      else if ("signed"['$===']($case)) {return "Int"}
      else if ("float"['$===']($case)) {return "Float"}
      else { return nil }})()) + (bits)
    }, TMP_Buffer_name_for_2.$$arity = 2);
    
    Opal.defn(self, '$initialize', TMP_Buffer_initialize_3 = function $$initialize(size, bits) {
      var self = this, $iter = TMP_Buffer_initialize_3.$$p, $yield = $iter || nil;

      if (bits == null) {
        bits = 8;
      }
      if ($iter) TMP_Buffer_initialize_3.$$p = null;
      if ($truthy(self['$native?'](size))) {
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Buffer_initialize_3, false), [size], null)
        } else {
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Buffer_initialize_3, false), [new ArrayBuffer(size * (bits / 8))], null)
      }
    }, TMP_Buffer_initialize_3.$$arity = -2);
    
    Opal.defn(self, '$length', TMP_Buffer_length_4 = function $$length() {
      var self = this;

      return self["native"].byteLength
    }, TMP_Buffer_length_4.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$to_a', TMP_Buffer_to_a_5 = function $$to_a(bits, type) {
      var self = this;

      if (bits == null) {
        bits = 8;
      }
      if (type == null) {
        type = "unsigned";
      }
      return Opal.const_get_relative($nesting, 'Array').$new(self, bits, type)
    }, TMP_Buffer_to_a_5.$$arity = -1);
    return (Opal.defn(self, '$view', TMP_Buffer_view_6 = function $$view(offset, length) {
      var self = this;

      if (offset == null) {
        offset = nil;
      }
      if (length == null) {
        length = nil;
      }
      return Opal.const_get_relative($nesting, 'View').$new(self, offset, length)
    }, TMP_Buffer_view_6.$$arity = -1), nil) && 'view';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/message"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$supports?', '$convert', '$supported?', '$new', '$alias_native']);
  
  self.$require("buffer");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Message(){};
        var self = $Message = $klass($base, $super, 'Message', $Message);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Message_supported$q_1, TMP_Message_construct_5, TMP_Message_construct_6, TMP_Message_data_7, TMP_Message_source_8;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Message_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Message")
        }, TMP_Message_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_data$eq_2, TMP_Definition_origin$eq_3, TMP_Definition_source$eq_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$data=', TMP_Definition_data$eq_2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, TMP_Definition_data$eq_2.$$arity = 1);
          
          Opal.defn(self, '$origin=', TMP_Definition_origin$eq_3 = function(value) {
            var self = this;

            return self["native"].origin = value
          }, TMP_Definition_origin$eq_3.$$arity = 1);
          return (Opal.defn(self, '$source=', TMP_Definition_source$eq_4 = function(value) {
            var self = this;

            return self["native"].source = Opal.const_get_relative($nesting, 'Native').$convert(value)
          }, TMP_Definition_source$eq_4.$$arity = 1), nil) && 'source=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Message_construct_5 = function $$construct(name, desc) {
              var self = this;

              return new MessageEvent(name, desc)
            }, TMP_Message_construct_5.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Message_construct_6 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MessageEvent");
            event.initMessageEvent(name, desc.bubbles, desc.cancelable,
              desc.data, desc.origin, "", desc.source || window);

        return event;
      
            }, TMP_Message_construct_6.$$arity = 2)}};
        
        Opal.defn(self, '$data', TMP_Message_data_7 = function $$data() {
          var self = this;

          
      if (window.ArrayBuffer && self["native"].data instanceof ArrayBuffer) {
        return Opal.const_get_relative($nesting, 'Buffer').$new(self["native"].data);
      }
      else if (window.Blob && self["native"].data instanceof Blob) {
        return Opal.const_get_relative($nesting, 'Blob').$new(self["native"].data);
      }
      else {
        return self["native"].data;
      }
    
        }, TMP_Message_data_7.$$arity = 0);
        self.$alias_native("origin");
        return (Opal.defn(self, '$source', TMP_Message_source_8 = function $$source() {
          var self = this;

          
      var source = self["native"].source;

      if (window.Window && source instanceof window.Window) {
        return Opal.const_get_relative($nesting, 'Window').$new(source);
      }
      else {
        return nil;
      }
    
        }, TMP_Message_source_8.$$arity = 0), nil) && 'source';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event/close"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Close(){};
        var self = $Close = $klass($base, $super, 'Close', $Close);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Close_supported$q_1, TMP_Close_construct_6, TMP_Close_construct_7;

        
        Opal.defs(self, '$supported?', TMP_Close_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Close")
        }, TMP_Close_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_code$eq_2, TMP_Definition_reason$eq_3, TMP_Definition_clean$B_4, TMP_Definition_not_clean$B_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$code=', TMP_Definition_code$eq_2 = function(value) {
            var self = this;

            return self["native"].code = value
          }, TMP_Definition_code$eq_2.$$arity = 1);
          
          Opal.defn(self, '$reason=', TMP_Definition_reason$eq_3 = function(value) {
            var self = this;

            return self["native"].reason = value
          }, TMP_Definition_reason$eq_3.$$arity = 1);
          
          Opal.defn(self, '$clean!', TMP_Definition_clean$B_4 = function(value) {
            var self = this;

            return self["native"].wasClean = true
          }, TMP_Definition_clean$B_4.$$arity = 1);
          return (Opal.defn(self, '$not_clean!', TMP_Definition_not_clean$B_5 = function(value) {
            var self = this;

            return self["native"].wasClean = false
          }, TMP_Definition_not_clean$B_5.$$arity = 1), nil) && 'not_clean!';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Close_construct_6 = function $$construct(name, desc) {
              var self = this;

              return new CloseEvent(name, desc)
            }, TMP_Close_construct_6.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Close_construct_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CloseEvent");
            event.initCloseEvent(name, desc.bubbles, desc.cancelable,
              desc.wasClean, desc.code, desc.reason);

        return event;
      
            }, TMP_Close_construct_7.$$arity = 2)}};
        self.$alias_native("code");
        self.$alias_native("reason");
        return self.$alias_native("clean?", "wasClean");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/event"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$gsub', '$[]', '$aliases', '$name_for', '$===', '$class_for', '$new', '$construct', '$const_get', '$to_proc', '$arguments=', '$-', '$supports?', '$merge!', '$Native', '$to_n', '$==', '$name', '$attr_reader', '$attr_writer', '$convert', '$alias_native', '$off', '$prevent', '$stop']);
  
  self.$require("browser/event/base");
  self.$require("browser/event/ui");
  self.$require("browser/event/mouse");
  self.$require("browser/event/keyboard");
  self.$require("browser/event/focus");
  self.$require("browser/event/wheel");
  self.$require("browser/event/composition");
  self.$require("browser/event/animation");
  self.$require("browser/event/audio_processing");
  self.$require("browser/event/before_unload");
  self.$require("browser/event/composition");
  self.$require("browser/event/clipboard");
  self.$require("browser/event/device_light");
  self.$require("browser/event/device_motion");
  self.$require("browser/event/device_orientation");
  self.$require("browser/event/device_proximity");
  self.$require("browser/event/drag");
  self.$require("browser/event/gamepad");
  self.$require("browser/event/hash_change");
  self.$require("browser/event/progress");
  self.$require("browser/event/page_transition");
  self.$require("browser/event/pop_state");
  self.$require("browser/event/storage");
  self.$require("browser/event/touch");
  self.$require("browser/event/sensor");
  self.$require("browser/event/custom");
  self.$require("browser/event/message");
  self.$require("browser/event/close");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Event_aliases_1, TMP_Event_name_for_2, TMP_Event_class_for_3, TMP_Event_supported$q_4, TMP_Event_create_5, TMP_Event_construct_6, TMP_Event_construct_7, TMP_Event_construct_8, TMP_Event_construct_9, TMP_Event_new_10, TMP_Event_initialize_11, TMP_Event_name_12, TMP_Event_on_13, TMP_Event_target_14, TMP_Event_arguments_15, TMP_Event_arguments$eq_16, TMP_Event_off_17, TMP_Event_stopped$q_18, TMP_Event_stop_19, TMP_Event_prevent_20, TMP_Event_prevented$q_21, TMP_Event_stop$B_22;

      def["native"] = def.on = def.callback = nil;
      
      Opal.defs(self, '$aliases', TMP_Event_aliases_1 = function $$aliases() {
        var $a, self = this;
        if (self.aliases == null) self.aliases = nil;

        return (self.aliases = ($truthy($a = self.aliases) ? $a : $hash2(["dom:load", "hover"], {"dom:load": "DOMContentLoaded", "hover": "mouse:over"})))
      }, TMP_Event_aliases_1.$$arity = 0);
      Opal.defs(self, '$name_for', TMP_Event_name_for_2 = function $$name_for(name) {
        var $a, self = this;

        return ($truthy($a = self.$aliases()['$[]'](name)) ? $a : name).$gsub(":", "")
      }, TMP_Event_name_for_2.$$arity = 1);
      Opal.defs(self, '$class_for', TMP_Event_class_for_3 = function $$class_for(name) {
        var self = this, $case = nil;

        return (function() {$case = self.$name_for(name);
        if ("animationend"['$===']($case) || "animationiteration"['$===']($case) || "animationstart"['$===']($case)) {return Opal.const_get_relative($nesting, 'Animation')}
        else if ("audioprocess"['$===']($case)) {return Opal.const_get_relative($nesting, 'AudioProcessing')}
        else if ("beforeunload"['$===']($case)) {return Opal.const_get_relative($nesting, 'BeforeUnload')}
        else if ("compositionend"['$===']($case) || "compositionstart"['$===']($case) || "compositionupdate"['$===']($case)) {return Opal.const_get_relative($nesting, 'Composition')}
        else if ("copy"['$===']($case) || "cut"['$===']($case)) {return Opal.const_get_relative($nesting, 'Clipboard')}
        else if ("devicelight"['$===']($case)) {return Opal.const_get_relative($nesting, 'DeviceLight')}
        else if ("devicemotion"['$===']($case)) {return Opal.const_get_relative($nesting, 'DeviceMotion')}
        else if ("deviceorientation"['$===']($case)) {return Opal.const_get_relative($nesting, 'DeviceOrientation')}
        else if ("deviceproximity"['$===']($case)) {return Opal.const_get_relative($nesting, 'DeviceProximity')}
        else if ("drag"['$===']($case) || "dragend"['$===']($case) || "dragleave"['$===']($case) || "dragover"['$===']($case) || "dragstart"['$===']($case) || "drop"['$===']($case)) {return Opal.const_get_relative($nesting, 'Drag')}
        else if ("gamepadconnected"['$===']($case) || "gamepaddisconnected"['$===']($case)) {return Opal.const_get_relative($nesting, 'Gamepad')}
        else if ("hashchange"['$===']($case)) {return Opal.const_get_relative($nesting, 'HashChange')}
        else if ("progress"['$===']($case) || "load"['$===']($case) || "loadend"['$===']($case) || "loadstart"['$===']($case)) {return Opal.const_get_relative($nesting, 'Progress')}
        else if ("pagehide"['$===']($case) || "pageshow"['$===']($case)) {return Opal.const_get_relative($nesting, 'PageTransition')}
        else if ("popstate"['$===']($case)) {return Opal.const_get_relative($nesting, 'PopState')}
        else if ("storage"['$===']($case)) {return Opal.const_get_relative($nesting, 'Storage')}
        else if ("touchcancel"['$===']($case) || "touchend"['$===']($case) || "touchleave"['$===']($case) || "touchmove"['$===']($case) || "touchstart"['$===']($case)) {return Opal.const_get_relative($nesting, 'Touch')}
        else if ("compassneedscalibration"['$===']($case) || "userproximity"['$===']($case)) {return Opal.const_get_relative($nesting, 'Sensor')}
        else if ("message"['$===']($case)) {return Opal.const_get_relative($nesting, 'Message')}
        else if ("close"['$===']($case)) {return Opal.const_get_relative($nesting, 'Close')}
        else if ("click"['$===']($case) || "contextmenu"['$===']($case) || "dblclick"['$===']($case) || "mousedown"['$===']($case) || "mouseenter"['$===']($case) || "mouseleave"['$===']($case) || "mousemove"['$===']($case) || "mouseout"['$===']($case) || "mouseover"['$===']($case) || "mouseup"['$===']($case) || "show"['$===']($case)) {return Opal.const_get_relative($nesting, 'Mouse')}
        else if ("keydown"['$===']($case) || "keypress"['$===']($case) || "keyup"['$===']($case)) {return Opal.const_get_relative($nesting, 'Keyboard')}
        else if ("blur"['$===']($case) || "focus"['$===']($case) || "focusin"['$===']($case) || "focusout"['$===']($case)) {return Opal.const_get_relative($nesting, 'Focus')}
        else if ("wheel"['$===']($case) || "mousewheel"['$===']($case)) {return Opal.const_get_relative($nesting, 'Wheel')}
        else if ("abort"['$===']($case) || "afterprint"['$===']($case) || "beforeprint"['$===']($case) || "cached"['$===']($case) || "canplay"['$===']($case) || "canplaythrough"['$===']($case) || "change"['$===']($case) || "chargingchange"['$===']($case) || "chargingtimechange"['$===']($case) || "checking"['$===']($case) || "close"['$===']($case) || "dischargingtimechange"['$===']($case) || "DOMContentLoaded"['$===']($case) || "downloading"['$===']($case) || "durationchange"['$===']($case) || "emptied"['$===']($case) || "ended"['$===']($case) || "error"['$===']($case) || "fullscreenchange"['$===']($case) || "fullscreenerror"['$===']($case) || "input"['$===']($case) || "invalid"['$===']($case) || "levelchange"['$===']($case) || "loadeddata"['$===']($case) || "loadedmetadata"['$===']($case) || "noupdate"['$===']($case) || "obsolete"['$===']($case) || "offline"['$===']($case) || "online"['$===']($case) || "open"['$===']($case) || "orientationchange"['$===']($case) || "pause"['$===']($case) || "pointerlockchange"['$===']($case) || "pointerlockerror"['$===']($case) || "play"['$===']($case) || "playing"['$===']($case) || "ratechange"['$===']($case) || "readystatechange"['$===']($case) || "reset"['$===']($case) || "seeked"['$===']($case) || "seeking"['$===']($case) || "stalled"['$===']($case) || "submit"['$===']($case) || "success"['$===']($case) || "suspend"['$===']($case) || "timeupdate"['$===']($case) || "updateready"['$===']($case) || "visibilitychange"['$===']($case) || "volumechange"['$===']($case) || "waiting"['$===']($case)) {return Opal.const_get_relative($nesting, 'Event')}
        else {return Opal.const_get_relative($nesting, 'Custom')}})()
      }, TMP_Event_class_for_3.$$arity = 1);
      Opal.defs(self, '$supported?', TMP_Event_supported$q_4 = function() {
        var self = this;

        return true
      }, TMP_Event_supported$q_4.$$arity = 0);
      Opal.defs(self, '$create', TMP_Event_create_5 = function $$create(name, $a_rest) {
        var self = this, args, $iter = TMP_Event_create_5.$$p, block = $iter || nil, klass = nil, event = nil, $writer = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_Event_create_5.$$p = null;
        
        name = self.$name_for(name);
        klass = self.$class_for(name);
        event = klass.$new(klass.$construct(name, $send(klass.$const_get("Definition"), 'new', [], block.$to_proc())));
        
        $writer = [args];
        $send(event, 'arguments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return event;
      }, TMP_Event_create_5.$$arity = -2);
      if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
        Opal.defs(self, '$construct', TMP_Event_construct_6 = function $$construct(name, desc) {
          var self = this;

          return new Event(name, desc)
        }, TMP_Event_construct_6.$$arity = 2)
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
        Opal.defs(self, '$construct', TMP_Event_construct_7 = function $$construct(name, desc) {try {

          var self = this;

          
        var event = document.createEvent("HTMLEvents");
            event.initEvent(name, desc.bubbles, desc.cancelable);

        Opal.ret(self.$Native(event)['$merge!'](desc));
      
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_Event_construct_7.$$arity = 2)
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.createObject"))) {
        Opal.defs(self, '$construct', TMP_Event_construct_8 = function $$construct(name, desc) {
          var self = this;

          return self.$Native(document.createEventObject())['$merge!'](desc)['$merge!']({ type: name }).$to_n()
        }, TMP_Event_construct_8.$$arity = 2)
        } else {
        Opal.defs(self, '$construct', TMP_Event_construct_9 = function $$construct(name, desc) {
          var self = this;

          return self.$Native(desc)['$merge!']({ type: name }).$to_n()
        }, TMP_Event_construct_9.$$arity = 2)
      };
      Opal.defs(self, '$new', TMP_Event_new_10 = function(value, callback) {
        var self = this, $iter = TMP_Event_new_10.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (callback == null) {
          callback = nil;
        }
        if ($iter) TMP_Event_new_10.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        if (self['$=='](Opal.const_get_relative($nesting, 'Event'))) {
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Event_new_10, false, $Event), $zuper, $iter)
        };
        klass = self.$class_for((function() {if ($truthy(callback)) {
          return callback.$name()
          } else {
          return value.type
        }; return nil; })());
        if (klass['$=='](Opal.const_get_relative($nesting, 'Event'))) {
          return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Event_new_10, false, $Event), $zuper, $iter)
          } else {
          return klass.$new(value, callback)
        };
      }, TMP_Event_new_10.$$arity = -2);
      self.$attr_reader("callback");
      self.$attr_writer("on");
      
      Opal.defn(self, '$initialize', TMP_Event_initialize_11 = function $$initialize(event, callback) {
        var self = this, $iter = TMP_Event_initialize_11.$$p, $yield = $iter || nil;

        if (callback == null) {
          callback = nil;
        }
        if ($iter) TMP_Event_initialize_11.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Event_initialize_11, false), [event], null);
        return (self.callback = callback);
      }, TMP_Event_initialize_11.$$arity = -2);
      
      Opal.defn(self, '$name', TMP_Event_name_12 = function $$name() {
        var self = this;

        return self["native"].type
      }, TMP_Event_name_12.$$arity = 0);
      
      Opal.defn(self, '$on', TMP_Event_on_13 = function $$on() {
        var $a, self = this;

        return ($truthy($a = self.on) ? $a : Opal.const_get_relative($nesting, 'Target').$convert(self["native"].currentTarget))
      }, TMP_Event_on_13.$$arity = 0);
      
      Opal.defn(self, '$target', TMP_Event_target_14 = function $$target() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Target').$convert(self["native"].srcElement || self["native"].target)
      }, TMP_Event_target_14.$$arity = 0);
      
      Opal.defn(self, '$arguments', TMP_Event_arguments_15 = function() {
        var self = this;

        return self["native"].arguments || []
      }, TMP_Event_arguments_15.$$arity = 0);
      
      Opal.defn(self, '$arguments=', TMP_Event_arguments$eq_16 = function(args) {
        var self = this;

        return self["native"].arguments = args
      }, TMP_Event_arguments$eq_16.$$arity = 1);
      self.$alias_native("bubbles?", "bubbles");
      self.$alias_native("cancelable?", "cancelable");
      self.$alias_native("data");
      self.$alias_native("phase", "eventPhase");
      self.$alias_native("at", "timeStamp");
      
      Opal.defn(self, '$off', TMP_Event_off_17 = function $$off() {
        var self = this;

        if ($truthy(self.callback)) {
          return self.callback.$off()
          } else {
          return nil
        }
      }, TMP_Event_off_17.$$arity = 0);
      
      Opal.defn(self, '$stopped?', TMP_Event_stopped$q_18 = function() {
        var self = this;

        return !!self["native"].stopped
      }, TMP_Event_stopped$q_18.$$arity = 0);
      
      Opal.defn(self, '$stop', TMP_Event_stop_19 = function $$stop() {
        var self = this;

        
        if ($truthy((typeof(self["native"].stopPropagation) !== "undefined"))) {
          self["native"].stopPropagation()};
        return self["native"].stopped = true;
      }, TMP_Event_stop_19.$$arity = 0);
      
      Opal.defn(self, '$prevent', TMP_Event_prevent_20 = function $$prevent() {
        var self = this;

        
        if ($truthy((typeof(self["native"].preventDefault) !== "undefined"))) {
          self["native"].preventDefault()};
        return self["native"].prevented = true;
      }, TMP_Event_prevent_20.$$arity = 0);
      
      Opal.defn(self, '$prevented?', TMP_Event_prevented$q_21 = function() {
        var self = this;

        return !!self["native"].prevented
      }, TMP_Event_prevented$q_21.$$arity = 0);
      return (Opal.defn(self, '$stop!', TMP_Event_stop$B_22 = function() {
        var self = this;

        
        self.$prevent();
        return self.$stop();
      }, TMP_Event_stop$B_22.$$arity = 0), nil) && 'stop!';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/window/view"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$supports?', '$raise']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $View(){};
        var self = $View = $klass($base, $super, 'View', $View);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_View_initialize_1, TMP_View_width_2, TMP_View_height_3, TMP_View_height_4, TMP_View_width_5, TMP_View_width_6, TMP_View_height_7;

        def["native"] = nil;
        
        
        Opal.defn(self, '$initialize', TMP_View_initialize_1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, TMP_View_initialize_1.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.innerSize"))) {
          
          
          Opal.defn(self, '$width', TMP_View_width_2 = function $$width() {
            var self = this;

            return self["native"].innerWidth
          }, TMP_View_width_2.$$arity = 0);
          return (Opal.defn(self, '$height', TMP_View_height_3 = function $$height() {
            var self = this;

            return self["native"].innerHeight
          }, TMP_View_height_3.$$arity = 0), nil) && 'height';
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.clientSize"))) {
          
          
          Opal.defn(self, '$height', TMP_View_height_4 = function $$height() {
            var self = this;

            return self["native"].document.documentElement.clientHeight
          }, TMP_View_height_4.$$arity = 0);
          return (Opal.defn(self, '$width', TMP_View_width_5 = function $$width() {
            var self = this;

            return self["native"].document.documentElement.clientWidth
          }, TMP_View_width_5.$$arity = 0), nil) && 'width';
          } else {
          
          
          Opal.defn(self, '$width', TMP_View_width_6 = function $$width() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window size unsupported")
          }, TMP_View_width_6.$$arity = 0);
          return (Opal.defn(self, '$height', TMP_View_height_7 = function $$height() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window size unsupported")
          }, TMP_View_height_7.$$arity = 0), nil) && 'height';
        };
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/window/size"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$to_n', '$===', '$first', '$values_at', '$width', '$height', '$supports?', '$raise', '$set']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Size(){};
        var self = $Size = $klass($base, $super, 'Size', $Size);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Size_initialize_1, TMP_Size_set_2, TMP_Size_width_3, TMP_Size_height_4, TMP_Size_width_5, TMP_Size_height_6, TMP_Size_width$eq_7, TMP_Size_height$eq_8;

        def["native"] = nil;
        
        
        Opal.defn(self, '$initialize', TMP_Size_initialize_1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, TMP_Size_initialize_1.$$arity = 1);
        
        Opal.defn(self, '$set', TMP_Size_set_2 = function $$set($a_rest) {
          var $b, $c, self = this, args, width = nil, height = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
            $c = args.$first().$values_at("width", "height"), $b = Opal.to_ary($c), (width = ($b[0] == null ? nil : $b[0])), (height = ($b[1] == null ? nil : $b[1])), $c
            } else {
            $c = args, $b = Opal.to_ary($c), (width = ($b[0] == null ? nil : $b[0])), (height = ($b[1] == null ? nil : $b[1])), $c
          };
          width = ($truthy($b = width) ? $b : self.$width());
          height = ($truthy($b = height) ? $b : self.$height());
          self["native"].resizeTo(width, height);
          return self;
        }, TMP_Size_set_2.$$arity = -1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.outerSize"))) {
          
          
          Opal.defn(self, '$width', TMP_Size_width_3 = function $$width() {
            var self = this;

            return self["native"].outerWidth
          }, TMP_Size_width_3.$$arity = 0);
          
          Opal.defn(self, '$height', TMP_Size_height_4 = function $$height() {
            var self = this;

            return self["native"].outerHeight
          }, TMP_Size_height_4.$$arity = 0);
          } else {
          
          
          Opal.defn(self, '$width', TMP_Size_width_5 = function $$width() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window outer size not supported")
          }, TMP_Size_width_5.$$arity = 0);
          
          Opal.defn(self, '$height', TMP_Size_height_6 = function $$height() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window outer size not supported")
          }, TMP_Size_height_6.$$arity = 0);
        };
        
        Opal.defn(self, '$width=', TMP_Size_width$eq_7 = function(value) {
          var self = this;

          return self.$set($hash2(["width"], {"width": value}))
        }, TMP_Size_width$eq_7.$$arity = 1);
        return (Opal.defn(self, '$height=', TMP_Size_height$eq_8 = function(value) {
          var self = this;

          return self.$set($hash2(["height"], {"height": value}))
        }, TMP_Size_height$eq_8.$$arity = 1), nil) && 'height=';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/window/scroll"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$supports?', '$new', '$raise', '$x', '$position', '$y', '$[]']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Scroll(){};
        var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Scroll_initialize_1, TMP_Scroll_position_2, TMP_Scroll_position_3, TMP_Scroll_position_4, TMP_Scroll_x_5, TMP_Scroll_y_6, TMP_Scroll_to_7, TMP_Scroll_by_8;

        def["native"] = nil;
        
        
        Opal.defn(self, '$initialize', TMP_Scroll_initialize_1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, TMP_Scroll_initialize_1.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.scroll"))) {
          
          Opal.defn(self, '$position', TMP_Scroll_position_2 = function $$position() {
            var self = this;

            
            
        var doc  = self["native"].document,
            root = doc.documentElement,
            body = doc.body;

        var x = root.scrollLeft || body.scrollLeft,
            y = root.scrollTop  || body.scrollTop;
      ;
            return Opal.const_get_relative($nesting, 'Position').$new(x, y);
          }, TMP_Scroll_position_2.$$arity = 0)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.pageOffset"))) {
          
          Opal.defn(self, '$position', TMP_Scroll_position_3 = function $$position() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].pageXOffset, self["native"].pageYOffset)
          }, TMP_Scroll_position_3.$$arity = 0)
          } else {
          
          Opal.defn(self, '$position', TMP_Scroll_position_4 = function $$position() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window scroll unsupported")
          }, TMP_Scroll_position_4.$$arity = 0)
        };
        
        Opal.defn(self, '$x', TMP_Scroll_x_5 = function $$x() {
          var self = this;

          return self.$position().$x()
        }, TMP_Scroll_x_5.$$arity = 0);
        
        Opal.defn(self, '$y', TMP_Scroll_y_6 = function $$y() {
          var self = this;

          return self.$position().$y()
        }, TMP_Scroll_y_6.$$arity = 0);
        
        Opal.defn(self, '$to', TMP_Scroll_to_7 = function $$to(what) {
          var $a, self = this, x = nil, y = nil;

          
          x = ($truthy($a = what['$[]']("x")) ? $a : self.$x());
          y = ($truthy($a = what['$[]']("y")) ? $a : self.$y());
          self["native"].scrollTo(x, y);
          return self;
        }, TMP_Scroll_to_7.$$arity = 1);
        return (Opal.defn(self, '$by', TMP_Scroll_by_8 = function $$by(what) {
          var $a, self = this, x = nil, y = nil;

          
          x = ($truthy($a = what['$[]']("x")) ? $a : 0);
          y = ($truthy($a = what['$[]']("y")) ? $a : 0);
          self["native"].scrollBy(x, y);
          return self;
        }, TMP_Scroll_by_8.$$arity = 1), nil) && 'by';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/window"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$delete', '$join', '$map', '$===', '$new', '$include', '$target', '$supports?', '$[]', '$raise', '$alert', '$prompt', '$confirm']);
  
  self.$require("browser/window/view");
  self.$require("browser/window/size");
  self.$require("browser/window/scroll");
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_open_2, TMP_Window_3, TMP_Window_alert_4, TMP_Window_prompt_5, TMP_Window_confirm_6, TMP_Window_view_7, TMP_Window_size_8, TMP_Window_scroll_9, TMP_Window_send_10, TMP_Window_send_11, TMP_Window_close_12;

      def["native"] = nil;
      
      Opal.defs(self, '$open', TMP_Window_open_2 = function $$open(url, options) {
        var TMP_1, self = this, name = nil, features = nil;

        
        name = options.$delete("name");
        features = $send(options, 'map', [], (TMP_1 = function(key, value){var self = TMP_1.$$s || this, $case = nil;
if (key == null) key = nil;if (value == null) value = nil;
        
          value = (function() {$case = value;
          if (true['$===']($case)) {return "yes"}
          else if (false['$===']($case)) {return "no"}
          else {return value}})();
          return "" + (key) + "=" + (value);}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1)).$join(",");
        
      var win = window.open(url, name, features);

      if (win == null) {
        return nil;
      }

      return self.$new(win);
    ;
      }, TMP_Window_open_2.$$arity = 2);
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'Target'));
      $send(self, 'target', [], (TMP_Window_3 = function(value){var self = TMP_Window_3.$$s || this;
        if ($gvars.window == null) $gvars.window = nil;
if (value == null) value = nil;
      if ($truthy(value == window)) {
          return $gvars.window
          } else {
          return nil
        }}, TMP_Window_3.$$s = self, TMP_Window_3.$$arity = 1, TMP_Window_3));
      
      Opal.defn(self, '$alert', TMP_Window_alert_4 = function $$alert(value) {
        var self = this;

        
        self["native"].alert(value);
        return value;
      }, TMP_Window_alert_4.$$arity = 1);
      
      Opal.defn(self, '$prompt', TMP_Window_prompt_5 = function $$prompt(value) {
        var self = this;

        return self["native"].prompt(value) || nil
      }, TMP_Window_prompt_5.$$arity = 1);
      
      Opal.defn(self, '$confirm', TMP_Window_confirm_6 = function $$confirm(value) {
        var self = this;

        return self["native"].confirm(value) || false
      }, TMP_Window_confirm_6.$$arity = 1);
      
      Opal.defn(self, '$view', TMP_Window_view_7 = function $$view() {
        var self = this;

        return Opal.const_get_relative($nesting, 'View').$new(self)
      }, TMP_Window_view_7.$$arity = 0);
      
      Opal.defn(self, '$size', TMP_Window_size_8 = function $$size() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Size').$new(self)
      }, TMP_Window_size_8.$$arity = 0);
      
      Opal.defn(self, '$scroll', TMP_Window_scroll_9 = function $$scroll() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Scroll').$new(self)
      }, TMP_Window_scroll_9.$$arity = 0);
      if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.send"))) {
        
        Opal.defn(self, '$send', TMP_Window_send_10 = function $$send(message, options) {
          var $a, self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self["native"].postMessage(message, ($truthy($a = options['$[]']("to")) ? $a : "*"))
        }, TMP_Window_send_10.$$arity = -2)
        } else {
        
        Opal.defn(self, '$send', TMP_Window_send_11 = function $$send(message, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "message sending unsupported")
        }, TMP_Window_send_11.$$arity = -2)
      };
      return (Opal.defn(self, '$close', TMP_Window_close_12 = function $$close() {
        var self = this;

        return self["native"].close()
      }, TMP_Window_close_12.$$arity = 0), nil) && 'close';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  $gvars.window = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Window').$new(window);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_alert_13, TMP_Kernel_prompt_14, TMP_Kernel_confirm_15;

    
    
    Opal.defn(self, '$alert', TMP_Kernel_alert_13 = function $$alert(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$alert(value)
    }, TMP_Kernel_alert_13.$$arity = 1);
    
    Opal.defn(self, '$prompt', TMP_Kernel_prompt_14 = function $$prompt(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$prompt(value)
    }, TMP_Kernel_prompt_14.$$arity = 1);
    
    Opal.defn(self, '$confirm', TMP_Kernel_confirm_15 = function $$confirm(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$confirm(value)
    }, TMP_Kernel_confirm_15.$$arity = 1);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/node_set"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$uniq', '$map', '$flatten', '$DOM', '$convert', '$respond_to?', '$each', '$__send__', '$to_proc', '$===', '$at_css', '$at_xpath', '$[]', '$css', '$select', '$=~', '$search', '$xpath']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $NodeSet(){};
        var self = $NodeSet = $klass($base, $super, 'NodeSet', $NodeSet);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NodeSet_$$_2, TMP_NodeSet_initialize_3, TMP_NodeSet_method_missing_4, TMP_NodeSet_respond_to_missing$q_6, TMP_NodeSet_at_css_8, TMP_NodeSet_at_xpath_10, TMP_NodeSet_css_12, TMP_NodeSet_filter_14, TMP_NodeSet_search_16, TMP_NodeSet_xpath_18, TMP_NodeSet_to_ary_19;

        def.literal = nil;
        
        Opal.defs(self, '$[]', TMP_NodeSet_$$_2 = function($a_rest) {
          var TMP_1, self = this, nodes;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          nodes = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            nodes[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$new($send(nodes.$flatten(), 'map', [], (TMP_1 = function(x){var self = TMP_1.$$s || this;
if (x == null) x = nil;
          return self.$DOM(Opal.const_get_relative($nesting, 'Native').$convert(x))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1)).$uniq())
        }, TMP_NodeSet_$$_2.$$arity = -1);
        
        Opal.defn(self, '$initialize', TMP_NodeSet_initialize_3 = function $$initialize(literal) {
          var self = this;

          return (self.literal = literal)
        }, TMP_NodeSet_initialize_3.$$arity = 1);
        
        Opal.defn(self, '$method_missing', TMP_NodeSet_method_missing_4 = function $$method_missing(name, $a_rest) {
          var TMP_5, self = this, args, $iter = TMP_NodeSet_method_missing_4.$$p, block = $iter || nil, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_NodeSet_method_missing_4.$$p = null;
          
          if ($truthy(self.literal['$respond_to?'](name))) {
            } else {
            
            $send(self, 'each', [], (TMP_5 = function(el){var self = TMP_5.$$s || this;
if (el == null) el = nil;
            return $send(el, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc())}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
            return self;
          };
          result = $send(self.literal, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());
          if ($truthy(result === self.literal)) {
            return self
          } else if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](result))) {
            return Opal.const_get_relative($nesting, 'NodeSet').$new(result)
            } else {
            return result
          };
        }, TMP_NodeSet_method_missing_4.$$arity = -2);
        
        Opal.defn(self, '$respond_to_missing?', TMP_NodeSet_respond_to_missing$q_6 = function(name, $a_rest) {
          var self = this;

          return self.literal['$respond_to?'](name)
        }, TMP_NodeSet_respond_to_missing$q_6.$$arity = -2);
        
        Opal.defn(self, '$at_css', TMP_NodeSet_at_css_8 = function $$at_css($a_rest) {try {

          var TMP_7, self = this, rules;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          rules = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            rules[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          $send(self, 'each', [], (TMP_7 = function(node){var self = TMP_7.$$s || this;
if (node == null) node = nil;
          if ($truthy((node = $send(node, 'at_css', Opal.to_a(rules))))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_NodeSet_at_css_8.$$arity = -1);
        
        Opal.defn(self, '$at_xpath', TMP_NodeSet_at_xpath_10 = function $$at_xpath($a_rest) {try {

          var TMP_9, self = this, paths;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          $send(self, 'each', [], (TMP_9 = function(node){var self = TMP_9.$$s || this;
if (node == null) node = nil;
          if ($truthy((node = $send(node, 'at_xpath', Opal.to_a(paths))))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_NodeSet_at_xpath_10.$$arity = -1);
        
        Opal.defn(self, '$css', TMP_NodeSet_css_12 = function $$css(path) {
          var TMP_11, self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], (TMP_11 = function(node){var self = TMP_11.$$s || this;
if (node == null) node = nil;
          return node.$css(path)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11)))
        }, TMP_NodeSet_css_12.$$arity = 1);
        
        Opal.defn(self, '$filter', TMP_NodeSet_filter_14 = function $$filter(expression) {
          var TMP_13, self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(self.literal, 'select', [], (TMP_13 = function(node){var self = TMP_13.$$s || this;
if (node == null) node = nil;
          return node['$=~'](expression)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13)))
        }, TMP_NodeSet_filter_14.$$arity = 1);
        
        Opal.defn(self, '$search', TMP_NodeSet_search_16 = function $$search($a_rest) {
          var TMP_15, self = this, what;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          what = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            what[$arg_idx - 0] = arguments[$arg_idx];
          }
          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], (TMP_15 = function(node){var self = TMP_15.$$s || this;
if (node == null) node = nil;
          return $send(node, 'search', Opal.to_a(what))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15)))
        }, TMP_NodeSet_search_16.$$arity = -1);
        
        Opal.defn(self, '$xpath', TMP_NodeSet_xpath_18 = function $$xpath(path) {
          var TMP_17, self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], (TMP_17 = function(node){var self = TMP_17.$$s || this;
if (node == null) node = nil;
          return node.$xpath(path)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17)))
        }, TMP_NodeSet_xpath_18.$$arity = 1);
        return (Opal.defn(self, '$to_ary', TMP_NodeSet_to_ary_19 = function $$to_ary() {
          var self = this;

          return self.literal
        }, TMP_NodeSet_to_ary_19.$$arity = 0), nil) && 'to_ary';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/node"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$convert', '$respond_to?', '$each', '$<<', '$native?', '$===', '$>>', '$DOM', '$to_proc', '$parent', '$last', '$pop', '$select!', '$=~', '$remove_child', '$remove', '$children', '$supports?', '$node_type', '$first', '$select', '$element_children', '$to_s', '$next', '$!', '$element?', '$previous', '$try_convert', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Node(){};
        var self = $Node = $klass($base, $super, 'Node', $Node);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Node_new_1, TMP_Node_$eq$eq_2, TMP_Node_$lt$lt_4, TMP_Node_$gt$gt_6, TMP_Node_add_child_7, TMP_Node_add_next_sibling_8, TMP_Node_add_previous_sibling_9, TMP_Node_append_to_10, TMP_Node_ancestors_12, TMP_Node_remove_13, TMP_Node_clear_14, TMP_Node_content_15, TMP_Node_content$eq_16, TMP_Node_content_17, TMP_Node_content$eq_18, TMP_Node_content_19, TMP_Node_content$eq_20, TMP_Node_blank$q_21, TMP_Node_cdata$q_22, TMP_Node_child_23, TMP_Node_children_24, TMP_Node_children$eq_25, TMP_Node_comment$q_26, TMP_Node_document_27, TMP_Node_document$q_28, TMP_Node_elem$q_29, TMP_Node_element_children_30, TMP_Node_first_element_child_31, TMP_Node_fragment$q_32, TMP_Node_inner_html_33, TMP_Node_inner_html$eq_34, TMP_Node_last_element_child_35, TMP_Node_name_36, TMP_Node_name$eq_37, TMP_Node_namespace_38, TMP_Node_next_39, TMP_Node_next_element_40, TMP_Node_node_type_41, TMP_Node_parent_42, TMP_Node_parent$eq_43, TMP_Node_parse_44, TMP_Node_path_45, TMP_Node_prepend_to_46, TMP_Node_previous_47, TMP_Node_previous_element_48, TMP_Node_remove_child_49, TMP_Node_replace_50, TMP_Node_text$q_51, TMP_Node_traverse_52, TMP_Node_value_53, TMP_Node_value$eq_54, TMP_Node_inspect_55;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        Opal.const_set($nesting[0], 'ELEMENT_NODE', 1);
        Opal.const_set($nesting[0], 'ATTRIBUTE_NODE', 2);
        Opal.const_set($nesting[0], 'TEXT_NODE', 3);
        Opal.const_set($nesting[0], 'CDATA_SECTION_NODE', 4);
        Opal.const_set($nesting[0], 'ENTITY_REFERENCE_NOCE', 5);
        Opal.const_set($nesting[0], 'ENTITY_NODE', 6);
        Opal.const_set($nesting[0], 'PROCESSING_INSTRUCTION_NODE', 7);
        Opal.const_set($nesting[0], 'COMMENT_NODE', 8);
        Opal.const_set($nesting[0], 'DOCUMENT_NODE', 9);
        Opal.const_set($nesting[0], 'DOCUMENT_TYPE_NODE', 10);
        Opal.const_set($nesting[0], 'DOCUMENT_FRAGMENT_NODE', 11);
        Opal.const_set($nesting[0], 'NOTATION_NODE', 12);
        Opal.defs(self, '$new', TMP_Node_new_1 = function(value) {
          var $a, self = this, $iter = TMP_Node_new_1.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;
          if (self.classes == null) self.classes = nil;

          if ($iter) TMP_Node_new_1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if (self['$=='](Opal.const_get_relative($nesting, 'Node'))) {
            
            self.classes = ($truthy($a = self.classes) ? $a : [nil, Opal.const_get_relative($nesting, 'Element'), Opal.const_get_relative($nesting, 'Attribute'), Opal.const_get_relative($nesting, 'Text'), Opal.const_get_relative($nesting, 'CDATA'), nil, nil, nil, Opal.const_get_relative($nesting, 'Comment'), Opal.const_get_relative($nesting, 'Document'), nil, Opal.const_get_relative($nesting, 'DocumentFragment')]);
            if ($truthy((klass = self.classes['$[]'](value.nodeType)))) {
              return klass.$new(value)
              } else {
              return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "cannot instantiate a non derived Node object")
            };
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Node_new_1, false, $Node), $zuper, $iter)
          }
        }, TMP_Node_new_1.$$arity = 1);
        
        Opal.defn(self, '$==', TMP_Node_$eq$eq_2 = function(other) {
          var self = this;

          return self["native"] === Opal.const_get_relative($nesting, 'Native').$convert(other)
        }, TMP_Node_$eq$eq_2.$$arity = 1);
        
        Opal.defn(self, '$<<', TMP_Node_$lt$lt_4 = function(node) {
          var TMP_3, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](node, "each"))) {
            
            $send(node, 'each', [], (TMP_3 = function(n){var self = TMP_3.$$s || this;
if (n == null) n = nil;
            return self['$<<'](n)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
            return self;};
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          self["native"].appendChild(node);
          return self;
        }, TMP_Node_$lt$lt_4.$$arity = 1);
        
        Opal.defn(self, '$>>', TMP_Node_$gt$gt_6 = function(node) {
          var TMP_5, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](node, "each"))) {
            
            $send(node, 'each', [], (TMP_5 = function(n){var self = TMP_5.$$s || this;
if (n == null) n = nil;
            return self['$>>'](n)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
            return self;};
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          if ($truthy(self["native"].firstChild == null)) {
            self["native"].appendChild(node)
            } else {
            self["native"].insertBefore(node, self["native"].firstChild)
          };
          return self;
        }, TMP_Node_$gt$gt_6.$$arity = 1);
        
        Opal.defn(self, '$add_child', TMP_Node_add_child_7 = function $$add_child(node) {
          var self = this, $iter = TMP_Node_add_child_7.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          if ($iter) TMP_Node_add_child_7.$$p = null;
          
          if ($truthy(node)) {
            } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          return self['$<<'](node);
        }, TMP_Node_add_child_7.$$arity = -1);
        
        Opal.defn(self, '$add_next_sibling', TMP_Node_add_next_sibling_8 = function $$add_next_sibling(node) {
          var self = this, $iter = TMP_Node_add_next_sibling_8.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          if ($iter) TMP_Node_add_next_sibling_8.$$p = null;
          
          if ($truthy(node)) {
            } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"].nextSibling);
        }, TMP_Node_add_next_sibling_8.$$arity = -1);
        
        Opal.defn(self, '$add_previous_sibling', TMP_Node_add_previous_sibling_9 = function $$add_previous_sibling(node) {
          var self = this, $iter = TMP_Node_add_previous_sibling_9.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          if ($iter) TMP_Node_add_previous_sibling_9.$$p = null;
          
          if ($truthy(node)) {
            } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"]);
        }, TMP_Node_add_previous_sibling_9.$$arity = -1);
        Opal.alias(self, "after", "add_next_sibling");
        
        Opal.defn(self, '$append_to', TMP_Node_append_to_10 = function $$append_to(node) {
          var self = this;

          return node['$<<'](self)
        }, TMP_Node_append_to_10.$$arity = 1);
        
        Opal.defn(self, '$ancestors', TMP_Node_ancestors_12 = function $$ancestors(expression) {
          var $a, TMP_11, self = this, parents = nil, parent = nil;

          if (expression == null) {
            expression = nil;
          }
          
          if ($truthy(self.$parent())) {
            } else {
            return Opal.const_get_relative($nesting, 'NodeSet')['$[]']()
          };
          parents = [self.$parent()];
          while ($truthy((parent = parents.$last().$parent()))) {
            parents['$<<'](parent)
          };
          if ($truthy(Opal.const_get_relative($nesting, 'Document')['$==='](parents.$last()))) {
            parents.$pop()};
          if ($truthy(expression)) {
            $send(parents, 'select!', [], (TMP_11 = function(p){var self = TMP_11.$$s || this;
if (p == null) p = nil;
            return p['$=~'](expression)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))};
          return Opal.const_get_relative($nesting, 'NodeSet').$new(parents);
        }, TMP_Node_ancestors_12.$$arity = -1);
        Opal.alias(self, "before", "add_previous_sibling");
        
        Opal.defn(self, '$remove', TMP_Node_remove_13 = function $$remove() {
          var self = this;

          if ($truthy(self.$parent())) {
            return self.$parent().$remove_child(self)
            } else {
            return nil
          }
        }, TMP_Node_remove_13.$$arity = 0);
        
        Opal.defn(self, '$clear', TMP_Node_clear_14 = function $$clear() {
          var self = this;

          return self.$children().$remove()
        }, TMP_Node_clear_14.$$arity = 0);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.textContent"))) {
          
          
          Opal.defn(self, '$content', TMP_Node_content_15 = function $$content() {
            var self = this;

            return self["native"].textContent
          }, TMP_Node_content_15.$$arity = 0);
          
          Opal.defn(self, '$content=', TMP_Node_content$eq_16 = function(value) {
            var self = this;

            return self["native"].textContent = value
          }, TMP_Node_content$eq_16.$$arity = 1);
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.innerText"))) {
          
          
          Opal.defn(self, '$content', TMP_Node_content_17 = function $$content() {
            var self = this;

            return self["native"].innerText
          }, TMP_Node_content_17.$$arity = 0);
          
          Opal.defn(self, '$content=', TMP_Node_content$eq_18 = function(value) {
            var self = this;

            return self["native"].innerText = value
          }, TMP_Node_content$eq_18.$$arity = 1);
          } else {
          
          
          Opal.defn(self, '$content', TMP_Node_content_19 = function $$content() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "node text content unsupported")
          }, TMP_Node_content_19.$$arity = 0);
          
          Opal.defn(self, '$content=', TMP_Node_content$eq_20 = function(value) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "node text content unsupported")
          }, TMP_Node_content$eq_20.$$arity = 1);
        };
        
        Opal.defn(self, '$blank?', TMP_Node_blank$q_21 = function() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_blank$q_21.$$arity = 0);
        
        Opal.defn(self, '$cdata?', TMP_Node_cdata$q_22 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'CDATA_SECTION_NODE'))
        }, TMP_Node_cdata$q_22.$$arity = 0);
        
        Opal.defn(self, '$child', TMP_Node_child_23 = function $$child() {
          var self = this;

          return self.$children().$first()
        }, TMP_Node_child_23.$$arity = 0);
        
        Opal.defn(self, '$children', TMP_Node_children_24 = function $$children() {
          var self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].childNodes))
        }, TMP_Node_children_24.$$arity = 0);
        
        Opal.defn(self, '$children=', TMP_Node_children$eq_25 = function(node) {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_children$eq_25.$$arity = 1);
        
        Opal.defn(self, '$comment?', TMP_Node_comment$q_26 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'COMMENT_NODE'))
        }, TMP_Node_comment$q_26.$$arity = 0);
        
        Opal.defn(self, '$document', TMP_Node_document_27 = function $$document() {
          var self = this;

          if ($truthy((typeof(self["native"].ownerDocument) !== "undefined"))) {
            return self.$DOM(self["native"].ownerDocument)
            } else {
            return nil
          }
        }, TMP_Node_document_27.$$arity = 0);
        
        Opal.defn(self, '$document?', TMP_Node_document$q_28 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'DOCUMENT_NODE'))
        }, TMP_Node_document$q_28.$$arity = 0);
        
        Opal.defn(self, '$elem?', TMP_Node_elem$q_29 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'ELEMENT_NODE'))
        }, TMP_Node_elem$q_29.$$arity = 0);
        Opal.alias(self, "element?", "elem?");
        
        Opal.defn(self, '$element_children', TMP_Node_element_children_30 = function $$element_children() {
          var self = this;

          return $send(self.$children(), 'select', [], "element?".$to_proc())
        }, TMP_Node_element_children_30.$$arity = 0);
        Opal.alias(self, "elements", "element_children");
        
        Opal.defn(self, '$first_element_child', TMP_Node_first_element_child_31 = function $$first_element_child() {
          var self = this;

          return self.$element_children().$first()
        }, TMP_Node_first_element_child_31.$$arity = 0);
        
        Opal.defn(self, '$fragment?', TMP_Node_fragment$q_32 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'DOCUMENT_FRAGMENT_NODE'))
        }, TMP_Node_fragment$q_32.$$arity = 0);
        
        Opal.defn(self, '$inner_html', TMP_Node_inner_html_33 = function $$inner_html() {
          var self = this;

          return self["native"].innerHTML
        }, TMP_Node_inner_html_33.$$arity = 0);
        
        Opal.defn(self, '$inner_html=', TMP_Node_inner_html$eq_34 = function(value) {
          var self = this;

          return self["native"].innerHTML = value
        }, TMP_Node_inner_html$eq_34.$$arity = 1);
        Opal.alias(self, "inner_text", "content");
        Opal.alias(self, "inner_text=", "content=");
        
        Opal.defn(self, '$last_element_child', TMP_Node_last_element_child_35 = function $$last_element_child() {
          var self = this;

          return self.$element_children().$last()
        }, TMP_Node_last_element_child_35.$$arity = 0);
        
        Opal.defn(self, '$name', TMP_Node_name_36 = function $$name() {
          var self = this;

          return self["native"].nodeName || nil
        }, TMP_Node_name_36.$$arity = 0);
        
        Opal.defn(self, '$name=', TMP_Node_name$eq_37 = function(value) {
          var self = this;

          return self["native"].nodeName = value.$to_s()
        }, TMP_Node_name$eq_37.$$arity = 1);
        
        Opal.defn(self, '$namespace', TMP_Node_namespace_38 = function $$namespace() {
          var self = this;

          return self["native"].namespaceURI || nil
        }, TMP_Node_namespace_38.$$arity = 0);
        
        Opal.defn(self, '$next', TMP_Node_next_39 = function $$next() {
          var self = this;

          if ($truthy(self["native"].nextSibling != null)) {
            return self.$DOM(self["native"].nextSibling)
            } else {
            return nil
          }
        }, TMP_Node_next_39.$$arity = 0);
        Opal.alias(self, "next=", "add_next_sibling");
        
        Opal.defn(self, '$next_element', TMP_Node_next_element_40 = function $$next_element() {
          var $a, $b, self = this, current = nil;

          
          current = self.$next();
          while ($truthy(($truthy($b = current) ? current['$element?']()['$!']() : $b))) {
            current = current.$next()
          };
          return current;
        }, TMP_Node_next_element_40.$$arity = 0);
        Opal.alias(self, "next_sibling", "next");
        Opal.alias(self, "node_name", "name");
        Opal.alias(self, "node_name=", "name=");
        
        Opal.defn(self, '$node_type', TMP_Node_node_type_41 = function $$node_type() {
          var self = this;

          return self["native"].nodeType
        }, TMP_Node_node_type_41.$$arity = 0);
        
        Opal.defn(self, '$parent', TMP_Node_parent_42 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentNode != null)) {
            return self.$DOM(self["native"].parentNode)
            } else {
            return nil
          }
        }, TMP_Node_parent_42.$$arity = 0);
        
        Opal.defn(self, '$parent=', TMP_Node_parent$eq_43 = function(node) {
          var self = this;

          return self["native"].parentNode = Opal.const_get_relative($nesting, 'Native').$convert(node)
        }, TMP_Node_parent$eq_43.$$arity = 1);
        
        Opal.defn(self, '$parse', TMP_Node_parse_44 = function $$parse(text, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_parse_44.$$arity = -2);
        
        Opal.defn(self, '$path', TMP_Node_path_45 = function $$path() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_path_45.$$arity = 0);
        
        Opal.defn(self, '$prepend_to', TMP_Node_prepend_to_46 = function $$prepend_to(node) {
          var self = this;

          return node['$>>'](self)
        }, TMP_Node_prepend_to_46.$$arity = 1);
        
        Opal.defn(self, '$previous', TMP_Node_previous_47 = function $$previous() {
          var self = this;

          if ($truthy(self["native"].previousSibling != null)) {
            return self.$DOM(self["native"].previousSibling)
            } else {
            return nil
          }
        }, TMP_Node_previous_47.$$arity = 0);
        Opal.alias(self, "previous=", "add_previous_sibling");
        
        Opal.defn(self, '$previous_element', TMP_Node_previous_element_48 = function $$previous_element() {
          var $a, $b, self = this, current = nil;

          
          current = self.$previous();
          while ($truthy(($truthy($b = current) ? current['$element?']()['$!']() : $b))) {
            current = current.$previous()
          };
          return current;
        }, TMP_Node_previous_element_48.$$arity = 0);
        Opal.alias(self, "previous_sibling", "previous");
        
        Opal.defn(self, '$remove_child', TMP_Node_remove_child_49 = function $$remove_child(node) {
          var self = this;

          return self["native"].removeChild(Opal.const_get_relative($nesting, 'Native').$try_convert(node))
        }, TMP_Node_remove_child_49.$$arity = 1);
        
        Opal.defn(self, '$replace', TMP_Node_replace_50 = function $$replace(node) {
          var self = this;

          
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          self["native"].parentNode.replaceChild(node, self["native"]);
          return node;
        }, TMP_Node_replace_50.$$arity = 1);
        Opal.alias(self, "replace_with", "replace");
        Opal.alias(self, "text", "content");
        Opal.alias(self, "text=", "content=");
        
        Opal.defn(self, '$text?', TMP_Node_text$q_51 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'TEXT_NODE'))
        }, TMP_Node_text$q_51.$$arity = 0);
        
        Opal.defn(self, '$traverse', TMP_Node_traverse_52 = function $$traverse() {
          var self = this, $iter = TMP_Node_traverse_52.$$p, block = $iter || nil;

          if ($iter) TMP_Node_traverse_52.$$p = null;
          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_traverse_52.$$arity = 0);
        Opal.alias(self, "type", "node_type");
        
        Opal.defn(self, '$value', TMP_Node_value_53 = function $$value() {
          var self = this;

          return self["native"].nodeValue || nil
        }, TMP_Node_value_53.$$arity = 0);
        
        Opal.defn(self, '$value=', TMP_Node_value$eq_54 = function(value) {
          var self = this;

          return self["native"].nodeValue = value
        }, TMP_Node_value$eq_54.$$arity = 1);
        return (Opal.defn(self, '$inspect', TMP_Node_inspect_55 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Node: " + (self.$name()) + ">"
        }, TMP_Node_inspect_55.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/attribute"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$alias_native', '$supports?', '$==', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Attribute(){};
        var self = $Attribute = $klass($base, $super, 'Attribute', $Attribute);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Attribute_id$q_1;

        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        self.$alias_native("name");
        self.$alias_native("value");
        self.$alias_native("value=");
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Attr.isId"))) {
          return self.$alias_native("id?", "isId")
          } else {
          return (Opal.defn(self, '$id?', TMP_Attribute_id$q_1 = function() {
            var self = this;

            return self.$name()['$==']("id")
          }, TMP_Attribute_id$q_1.$$arity = 0), nil) && 'id?'
        };
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/character_data"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $CharacterData(){};
        var self = $CharacterData = $klass($base, $super, 'CharacterData', $CharacterData);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CharacterData_append_1, TMP_CharacterData_data_2, TMP_CharacterData_delete_3, TMP_CharacterData_insert_4, TMP_CharacterData_replace_5, TMP_CharacterData_substring_6;

        def["native"] = nil;
        
        
        Opal.defn(self, '$append', TMP_CharacterData_append_1 = function $$append(string) {
          var self = this;

          
          self["native"].appendData(string);
          return self;
        }, TMP_CharacterData_append_1.$$arity = 1);
        
        Opal.defn(self, '$data', TMP_CharacterData_data_2 = function $$data() {
          var self = this;

          return self["native"].data
        }, TMP_CharacterData_data_2.$$arity = 0);
        
        Opal.defn(self, '$delete', TMP_CharacterData_delete_3 = function(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          
          self["native"].deleteData(offset, count);
          return self;
        }, TMP_CharacterData_delete_3.$$arity = -2);
        
        Opal.defn(self, '$insert', TMP_CharacterData_insert_4 = function $$insert(string, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          
          self["native"].insertData(offset, string);
          return self;
        }, TMP_CharacterData_insert_4.$$arity = -2);
        self.$alias_native("length");
        
        Opal.defn(self, '$replace', TMP_CharacterData_replace_5 = function $$replace(string, offset, count) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          if (count == null) {
            count = self["native"].length;
          }
          
          self["native"].replaceData(offset, count, string);
          return self;
        }, TMP_CharacterData_replace_5.$$arity = -2);
        return (Opal.defn(self, '$substring', TMP_CharacterData_substring_6 = function $$substring(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          return self["native"].substringData(offset, count)
        }, TMP_CharacterData_substring_6.$$arity = -2), nil) && 'substring';
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/text"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$create_text', '$DOM', '$data']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Text(){};
        var self = $Text = $klass($base, $super, 'Text', $Text);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Text_create_1, TMP_Text_whole_2, TMP_Text_split_3, TMP_Text_inspect_4;

        def["native"] = nil;
        
        Opal.defs(self, '$create', TMP_Text_create_1 = function $$create($a_rest) {
          var self = this, args;
          if ($gvars.document == null) $gvars.document = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send($gvars.document, 'create_text', Opal.to_a(args))
        }, TMP_Text_create_1.$$arity = -1);
        
        Opal.defn(self, '$whole', TMP_Text_whole_2 = function $$whole() {
          var self = this;

          return self["native"].wholeText
        }, TMP_Text_whole_2.$$arity = 0);
        
        Opal.defn(self, '$split', TMP_Text_split_3 = function $$split(offset) {
          var self = this;

          return self.$DOM(self["native"].splitText(offset))
        }, TMP_Text_split_3.$$arity = 1);
        return (Opal.defn(self, '$inspect', TMP_Text_inspect_4 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Text: " + (self.$data()) + ">"
        }, TMP_Text_inspect_4.$$arity = 0), nil) && 'inspect';
      })($nesting[0], Opal.const_get_relative($nesting, 'CharacterData'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/cdata"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $CDATA(){};
        var self = $CDATA = $klass($base, $super, 'CDATA', $CDATA);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CDATA_inspect_1;

        return (Opal.defn(self, '$inspect', TMP_CDATA_inspect_1 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::CDATA: " + (self.$value()) + ">"
        }, TMP_CDATA_inspect_1.$$arity = 0), nil) && 'inspect'
      })($nesting[0], Opal.const_get_relative($nesting, 'Text'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/comment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Comment(){};
        var self = $Comment = $klass($base, $super, 'Comment', $Comment);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Comment_inspect_1;

        return (Opal.defn(self, '$inspect', TMP_Comment_inspect_1 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Comment: " + (self.$value()) + ">"
        }, TMP_Comment_inspect_1.$$arity = 0), nil) && 'inspect'
      })($nesting[0], Opal.const_get_relative($nesting, 'CharacterData'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/attributes"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]', '$supports?', '$==', '$to_s', '$include', '$enum_for', '$each', '$attribute_nodes', '$name', '$value', '$!', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Attributes(){};
          var self = $Attributes = $klass($base, $super, 'Attributes', $Attributes);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Attributes_initialize_1, $a, TMP_Attributes_$$_2, TMP_Attributes_$$$eq_3, TMP_Attributes_$$_4, TMP_Attributes_$$$eq_5, TMP_Attributes_each_6, TMP_Attributes_has_key$q_8, TMP_Attributes_merge$B_10;

          def.namespace = def["native"] = def.element = nil;
          
          self.$attr_reader("namespace");
          
          Opal.defn(self, '$initialize', TMP_Attributes_initialize_1 = function $$initialize(element, options) {
            var self = this;

            
            self.element = element;
            self["native"] = element.$to_n();
            return (self.namespace = options['$[]']("namespace"));
          }, TMP_Attributes_initialize_1.$$arity = 2);
          if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className")) ? $a : Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor")))) {
            
            
            Opal.defn(self, '$[]', TMP_Attributes_$$_2 = function(name, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              
              if ($truthy((($a = name['$==']("class")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className") : name['$==']("class")))) {
                name = "className"
              } else if ($truthy((($a = name['$==']("for")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor") : name['$==']("for")))) {
                name = "htmlFor"};
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil
              };
            }, TMP_Attributes_$$_2.$$arity = -2);
            
            Opal.defn(self, '$[]=', TMP_Attributes_$$$eq_3 = function(name, value, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              
              if ($truthy((($a = name['$==']("class")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className") : name['$==']("class")))) {
                name = "className"
              } else if ($truthy((($a = name['$==']("for")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor") : name['$==']("for")))) {
                name = "htmlFor"};
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value)
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s())
              };
            }, TMP_Attributes_$$$eq_3.$$arity = -3);
            } else {
            
            
            Opal.defn(self, '$[]', TMP_Attributes_$$_4 = function(name, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil
              }
            }, TMP_Attributes_$$_4.$$arity = -2);
            
            Opal.defn(self, '$[]=', TMP_Attributes_$$$eq_5 = function(name, value, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value)
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s())
              }
            }, TMP_Attributes_$$$eq_5.$$arity = -3);
          };
          self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
          
          Opal.defn(self, '$each', TMP_Attributes_each_6 = function $$each() {
            var TMP_7, self = this, $iter = TMP_Attributes_each_6.$$p, block = $iter || nil;

            if ($iter) TMP_Attributes_each_6.$$p = null;
            
            if ((block !== nil)) {
              } else {
              return self.$enum_for("each")
            };
            $send(self.element.$attribute_nodes(), 'each', [], (TMP_7 = function(attr){var self = TMP_7.$$s || this;
if (attr == null) attr = nil;
            return Opal.yieldX(block, [attr.$name(), attr.$value()]);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
            return self;
          }, TMP_Attributes_each_6.$$arity = 0);
          Opal.alias(self, "get", "[]");
          
          Opal.defn(self, '$has_key?', TMP_Attributes_has_key$q_8 = function(name) {
            var self = this;

            return self['$[]'](name)['$!']()['$!']()
          }, TMP_Attributes_has_key$q_8.$$arity = 1);
          
          Opal.defn(self, '$merge!', TMP_Attributes_merge$B_10 = function(hash) {
            var TMP_9, self = this;

            
            $send(hash, 'each', [], (TMP_9 = function(name, value){var self = TMP_9.$$s || this, $writer = nil;
if (name == null) name = nil;if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9));
            return self;
          }, TMP_Attributes_merge$B_10.$$arity = 1);
          return Opal.alias(self, "set", "[]=");
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/data"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$to_n', '$include', '$enum_for', '$call', '$each', '$attributes', '$=~', '$[]']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Data(){};
          var self = $Data = $klass($base, $super, 'Data', $Data);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Data_initialize_1, TMP_Data_each_2, TMP_Data_assign_5, TMP_Data_$$_6, TMP_Data_$$$eq_7;

          def["native"] = def.element = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Data_initialize_1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            self["native"] = element.$to_n();
            if ($truthy((typeof(self["native"].$data) !== "undefined"))) {
              return nil
              } else {
              return self["native"].$data = {}
            };
          }, TMP_Data_initialize_1.$$arity = 1);
          self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
          
          Opal.defn(self, '$each', TMP_Data_each_2 = function $$each() {
            var TMP_3, self = this, $iter = TMP_Data_each_2.$$p, block = $iter || nil;

            if ($iter) TMP_Data_each_2.$$p = null;
            
            if ($truthy(block)) {
              } else {
              return self.$enum_for("each")
            };
            
      var data = self["native"].$data;

      for (var key in data) {
        block.$call(key, data[key]);
      }
    ;
            $send(self.element.$attributes(), 'each', [], (TMP_3 = function(name, value){var self = TMP_3.$$s || this, $a;
if (name == null) name = nil;if (value == null) value = nil;
            if ($truthy(name['$=~'](/^data-(.*)$/))) {
                return block.$call((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), value)
                } else {
                return nil
              }}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3));
            return self;
          }, TMP_Data_each_2.$$arity = 0);
          
          Opal.defn(self, '$assign', TMP_Data_assign_5 = function $$assign(data) {
            var TMP_4, self = this;

            
            $send(data, 'each', [], (TMP_4 = function(name, value){var self = TMP_4.$$s || this;
              if (self["native"] == null) self["native"] = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return self["native"].$data[name] = value}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4));
            return self;
          }, TMP_Data_assign_5.$$arity = 1);
          
          Opal.defn(self, '$[]', TMP_Data_$$_6 = function(name) {
            var self = this, data = nil;

            
            if ($truthy((data = self.element['$[]']("" + "data-" + (name))))) {
              return data};
            
      var value = self["native"].$data[name];

      if (value === undefined) {
        return nil;
      }
      else {
        return value;
      }
    ;
          }, TMP_Data_$$_6.$$arity = 1);
          return (Opal.defn(self, '$[]=', TMP_Data_$$$eq_7 = function(name, value) {
            var self = this;

            return self["native"].$data[name] = value
          }, TMP_Data_$$$eq_7.$$arity = 2), nil) && '[]=';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/position"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$offset', '$get', '$parent', '$new', '$==', '$[]', '$style', '$=~', '$+', '$x', '$to_i', '$x=', '$-', '$y', '$y=']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Position(){};
          var self = $Position = $klass($base, $super, 'Position', $Position);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Position_initialize_1, TMP_Position_get_2, TMP_Position_x_3, TMP_Position_y_4;

          def.element = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Position_initialize_1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, TMP_Position_initialize_1.$$arity = 1);
          
          Opal.defn(self, '$get', TMP_Position_get_2 = function $$get() {
            var self = this, offset = nil, position = nil, parent = nil, parent_offset = nil, $writer = nil;

            
            offset = self.element.$offset();
            position = offset.$get();
            parent = offset.$parent();
            parent_offset = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new(0, 0);
            if (self.element.$style()['$[]']("position")['$==']("fixed")) {
              
              if ($truthy(parent['$=~']("html"))) {
                } else {
                parent_offset = parent.$offset()
              };
              
              $writer = [$rb_plus(parent_offset.$x(), parent.$style()['$[]']("border-top-width").$to_i())];
              $send(parent_offset, 'x=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_plus(parent_offset.$y(), parent.$style()['$[]']("border-left-width").$to_i())];
              $send(parent_offset, 'y=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new($rb_minus($rb_minus(position.$x(), parent_offset.$x()), self.element.$style()['$[]']("margin-left").$to_i()), $rb_minus($rb_minus(position.$y(), parent_offset.$y()), self.element.$style()['$[]']("margin-top").$to_i()));
          }, TMP_Position_get_2.$$arity = 0);
          
          Opal.defn(self, '$x', TMP_Position_x_3 = function $$x() {
            var self = this;

            return self.$get().$x()
          }, TMP_Position_x_3.$$arity = 0);
          return (Opal.defn(self, '$y', TMP_Position_y_4 = function $$y() {
            var self = this;

            return self.$get().$y()
          }, TMP_Position_y_4.$$arity = 0), nil) && 'y';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/offset"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$DOM', '$root', '$document', '$x', '$get', '$set', '$y', '$supports?', '$window', '$new', '$[]', '$style!', '$==', '$[]=', '$style', '$-', '$to_u', '$===', '$first', '$+', '$px']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Offset(){};
          var self = $Offset = $klass($base, $super, 'Offset', $Offset);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Offset_initialize_1, TMP_Offset_parent_2, TMP_Offset_x_3, TMP_Offset_x$eq_4, TMP_Offset_y_5, TMP_Offset_y$eq_6, TMP_Offset_get_7, TMP_Offset_get_8, TMP_Offset_set_9;

          def["native"] = def.element = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Offset_initialize_1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, TMP_Offset_initialize_1.$$arity = 1);
          
          Opal.defn(self, '$parent', TMP_Offset_parent_2 = function $$parent() {
            var self = this;

            return self.$DOM(self["native"].offsetParent || self.element.$document().$root().$to_n())
          }, TMP_Offset_parent_2.$$arity = 0);
          
          Opal.defn(self, '$x', TMP_Offset_x_3 = function $$x() {
            var self = this;

            return self.$get().$x()
          }, TMP_Offset_x_3.$$arity = 0);
          
          Opal.defn(self, '$x=', TMP_Offset_x$eq_4 = function(value) {
            var self = this;

            return self.$set(value, nil)
          }, TMP_Offset_x$eq_4.$$arity = 1);
          
          Opal.defn(self, '$y', TMP_Offset_y_5 = function $$y() {
            var self = this;

            return self.$get().$y()
          }, TMP_Offset_y_5.$$arity = 0);
          
          Opal.defn(self, '$y=', TMP_Offset_y$eq_6 = function(value) {
            var self = this;

            return self.$set(nil, value)
          }, TMP_Offset_y$eq_6.$$arity = 1);
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.getBoundingClientRect"))) {
            
            Opal.defn(self, '$get', TMP_Offset_get_7 = function $$get() {
              var self = this, doc = nil, root = nil, win = nil;

              
              doc = self.element.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var box = self["native"].getBoundingClientRect(),
            y   = box.top + (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x   = box.left + (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new(x, y);
            }, TMP_Offset_get_7.$$arity = 0)
            } else {
            
            Opal.defn(self, '$get', TMP_Offset_get_8 = function $$get() {
              var self = this, doc = nil, root = nil, win = nil;

              
              doc = self.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var y = (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x = (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new(x, y);
            }, TMP_Offset_get_8.$$arity = 0)
          };
          return (Opal.defn(self, '$set', TMP_Offset_set_9 = function $$set($a_rest) {
            var $b, $c, self = this, value, position = nil, $writer = nil, offset = nil, top = nil, left = nil, x = nil, y = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            value = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              value[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            position = self.element['$style!']()['$[]']("position");
            if (position['$==']("static")) {
              
              $writer = ["position", "relative"];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            offset = self.$get();
            top = self.element['$style!']()['$[]']("top").$to_u();
            left = self.element['$style!']()['$[]']("left").$to_u();
            if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position')['$==='](value.$first()))) {
              $b = [value.$first().$x(), value.$first().$y()], (x = $b[0]), (y = $b[1]), $b
            } else if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](value.$first()))) {
              $b = [value.$first()['$[]']("x"), value.$first()['$[]']("y")], (x = $b[0]), (y = $b[1]), $b
              } else {
              $c = value, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
            };
            if ($truthy(x)) {
              
              $writer = ["left", $rb_plus($rb_minus(x.$px(), offset.$x()), left)];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(y)) {
              
              $writer = ["top", $rb_plus($rb_minus(y.$px(), offset.$y()), top)];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              } else {
              return nil
            };
          }, TMP_Offset_set_9.$$arity = -1), nil) && 'set';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/scroll"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$to_n', '$supports?', '$===', '$first', '$[]', '$x', '$y', '$new', '$raise', '$position']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Scroll(){};
          var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Scroll_initialize_1, TMP_Scroll_to_2, TMP_Scroll_position_3, TMP_Scroll_to_4, TMP_Scroll_position_5, TMP_Scroll_to_6, TMP_Scroll_position_7, TMP_Scroll_x_8, TMP_Scroll_y_9, TMP_Scroll_height_10, TMP_Scroll_width_11, TMP_Scroll_by_12, TMP_Scroll_to_13, TMP_Scroll_to_14, TMP_Scroll_to$B_15;

          def["native"] = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Scroll_initialize_1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, TMP_Scroll_initialize_1.$$arity = 1);
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.scroll"))) {
            
            
            Opal.defn(self, '$to', TMP_Scroll_to_2 = function $$to($a_rest) {
              var $b, $c, self = this, args, x = nil, y = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              
              if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
                
                x = ($truthy($b = args.$first()['$[]']("x")) ? $b : self.$x());
                y = ($truthy($b = args.$first()['$[]']("y")) ? $b : self.$y());
                } else {
                $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
              };
              self["native"].scrollTop  = y;
              return self["native"].scrollLeft = x;
            }, TMP_Scroll_to_2.$$arity = -1);
            
            Opal.defn(self, '$position', TMP_Scroll_position_3 = function $$position() {
              var self = this;

              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new(self["native"].scrollLeft, self["native"].scrollTop)
            }, TMP_Scroll_position_3.$$arity = 0);
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.pageOffset"))) {
            
            
            Opal.defn(self, '$to', TMP_Scroll_to_4 = function $$to($a_rest) {
              var $b, $c, self = this, args, x = nil, y = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              
              if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
                
                x = ($truthy($b = args.$first()['$[]']("x")) ? $b : self.$x());
                y = ($truthy($b = args.$first()['$[]']("y")) ? $b : self.$y());
                } else {
                $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
              };
              self["native"].pageYOffset = y;
              return self["native"].pageXOffset = x;
            }, TMP_Scroll_to_4.$$arity = -1);
            
            Opal.defn(self, '$position', TMP_Scroll_position_5 = function $$position() {
              var self = this;

              return Opal.const_get_relative($nesting, 'Position').$new(self["native"].pageXOffset, self["native"].pageYOffset)
            }, TMP_Scroll_position_5.$$arity = 0);
            } else {
            
            
            Opal.defn(self, '$to', TMP_Scroll_to_6 = function $$to($a_rest) {
              var self = this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "scroll on element unsupported")
            }, TMP_Scroll_to_6.$$arity = -1);
            
            Opal.defn(self, '$position', TMP_Scroll_position_7 = function $$position() {
              var self = this;

              return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "scroll on element unsupported")
            }, TMP_Scroll_position_7.$$arity = 0);
          };
          
          Opal.defn(self, '$x', TMP_Scroll_x_8 = function $$x() {
            var self = this;

            return self.$position().$x()
          }, TMP_Scroll_x_8.$$arity = 0);
          
          Opal.defn(self, '$y', TMP_Scroll_y_9 = function $$y() {
            var self = this;

            return self.$position().$y()
          }, TMP_Scroll_y_9.$$arity = 0);
          
          Opal.defn(self, '$height', TMP_Scroll_height_10 = function $$height() {
            var self = this;

            return self["native"].scrollHeight
          }, TMP_Scroll_height_10.$$arity = 0);
          
          Opal.defn(self, '$width', TMP_Scroll_width_11 = function $$width() {
            var self = this;

            return self["native"].scrollWidth
          }, TMP_Scroll_width_11.$$arity = 0);
          
          Opal.defn(self, '$by', TMP_Scroll_by_12 = function $$by($a_rest) {
            var $b, $c, self = this, args, x = nil, y = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
              
              x = ($truthy($b = args.$first()['$[]']("x")) ? $b : 0);
              y = ($truthy($b = args.$first()['$[]']("y")) ? $b : 0);
              } else {
              $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
            };
            self["native"].scrollBy(x, y);
            return self;
          }, TMP_Scroll_by_12.$$arity = -1);
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.scrollIntoViewIfNeeded"))) {
            
            Opal.defn(self, '$to', TMP_Scroll_to_13 = function $$to(align) {
              var self = this;

              if (align == null) {
                align = true;
              }
              return self["native"].scrollIntoViewIfNeeded(align)
            }, TMP_Scroll_to_13.$$arity = -1)
            } else {
            
            Opal.defn(self, '$to', TMP_Scroll_to_14 = function $$to(align) {
              var self = this;

              if (align == null) {
                align = true;
              }
              return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
            }, TMP_Scroll_to_14.$$arity = -1)
          };
          return (Opal.defn(self, '$to!', TMP_Scroll_to$B_15 = function(align) {
            var self = this;

            if (align == null) {
              align = true;
            }
            return self["native"].scrollIntoView(align)
          }, TMP_Scroll_to$B_15.$$arity = -1), nil) && 'to!';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/size"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]=', '$style', '$-']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Size(){};
          var self = $Size = $klass($base, $super, 'Size', $Size);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Size_initialize_1, TMP_Size_width_2, TMP_Size_width$eq_3, TMP_Size_height_4, TMP_Size_height$eq_5;

          def["native"] = def.element = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Size_initialize_1 = function $$initialize(element, $a_rest) {
            var self = this, inc;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            inc = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              inc[$arg_idx - 1] = arguments[$arg_idx];
            }
            
            self.element = element;
            self["native"] = element.$to_n();
            return (self.include = inc);
          }, TMP_Size_initialize_1.$$arity = -2);
          
          Opal.defn(self, '$width', TMP_Size_width_2 = function $$width() {
            var self = this;

            return self["native"].offsetWidth
          }, TMP_Size_width_2.$$arity = 0);
          
          Opal.defn(self, '$width=', TMP_Size_width$eq_3 = function(value) {
            var self = this, $writer = nil;

            
            $writer = ["width", value];
            $send(self.element.$style(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_Size_width$eq_3.$$arity = 1);
          
          Opal.defn(self, '$height', TMP_Size_height_4 = function $$height() {
            var self = this;

            return self["native"].offsetHeight
          }, TMP_Size_height_4.$$arity = 0);
          return (Opal.defn(self, '$height=', TMP_Size_height$eq_5 = function(value) {
            var self = this, $writer = nil;

            
            $writer = ["height", value];
            $send(self.element.$style(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_Size_height$eq_5.$$arity = 1), nil) && 'height=';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/button"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Button(){};
          var self = $Button = $klass($base, $super, 'Button', $Button);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Button_disabled$q_1, TMP_Button_disabled$eq_2, TMP_Button_autofocus$q_3, TMP_Button_autofocus$eq_4, TMP_Button_name_5, TMP_Button_name$eq_6;

          def["native"] = nil;
          
          
          Opal.defn(self, '$disabled?', TMP_Button_disabled$q_1 = function() {
            var self = this;

            return self["native"].disabled
          }, TMP_Button_disabled$q_1.$$arity = 0);
          
          Opal.defn(self, '$disabled=', TMP_Button_disabled$eq_2 = function(value) {
            var self = this;

            return self["native"].disabled = value
          }, TMP_Button_disabled$eq_2.$$arity = 1);
          
          Opal.defn(self, '$autofocus?', TMP_Button_autofocus$q_3 = function() {
            var self = this;

            return self["native"].autofocus
          }, TMP_Button_autofocus$q_3.$$arity = 0);
          
          Opal.defn(self, '$autofocus=', TMP_Button_autofocus$eq_4 = function(value) {
            var self = this;

            return self["native"].autofocus = value
          }, TMP_Button_autofocus$eq_4.$$arity = 1);
          
          Opal.defn(self, '$name', TMP_Button_name_5 = function $$name() {
            var self = this;

            return self["native"].name
          }, TMP_Button_name_5.$$arity = 0);
          return (Opal.defn(self, '$name=', TMP_Button_name$eq_6 = function(value) {
            var self = this;

            return self["native"].name = value
          }, TMP_Button_name$eq_6.$$arity = 1), nil) && 'name=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/image"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        
        (function($base, $super, $parent_nesting) {
          function $Image(){};
          var self = $Image = $klass($base, $super, 'Image', $Image);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Image_complete$q_1, TMP_Image_cross$q_2, TMP_Image_height_3, TMP_Image_width_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$complete?', TMP_Image_complete$q_1 = function() {
            var self = this;

            return self["native"].complete
          }, TMP_Image_complete$q_1.$$arity = 0);
          
          Opal.defn(self, '$cross?', TMP_Image_cross$q_2 = function() {
            var self = this;

            return self["native"].crossOrigin
          }, TMP_Image_cross$q_2.$$arity = 0);
          
          Opal.defn(self, '$height', TMP_Image_height_3 = function $$height() {
            var self = this;

            return self["native"].naturalHeight
          }, TMP_Image_height_3.$$arity = 0);
          return (Opal.defn(self, '$width', TMP_Image_width_4 = function $$width() {
            var self = this;

            return self["native"].naturalWidth
          }, TMP_Image_width_4.$$arity = 0), nil) && 'width';
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting);
        return Opal.const_set($nesting[0], 'Img', Opal.const_get_relative($nesting, 'Image'));
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/input"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Input_value_1, TMP_Input_value$eq_2, TMP_Input_checked$q_3, TMP_Input_clear_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$value', TMP_Input_value_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, TMP_Input_value_1.$$arity = 0);
          
          Opal.defn(self, '$value=', TMP_Input_value$eq_2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, TMP_Input_value$eq_2.$$arity = 1);
          
          Opal.defn(self, '$checked?', TMP_Input_checked$q_3 = function() {
            var self = this;

            return self["native"].checked
          }, TMP_Input_checked$q_3.$$arity = 0);
          return (Opal.defn(self, '$clear', TMP_Input_clear_4 = function $$clear() {
            var self = this;

            return self["native"].value = ''
          }, TMP_Input_clear_4.$$arity = 0), nil) && 'clear';
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/select"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$new', '$DOM', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Select_value_1, TMP_Select_labels_2, TMP_Select_options_3, TMP_Select_option_4, TMP_Select_index_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$value', TMP_Select_value_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, TMP_Select_value_1.$$arity = 0);
          
          Opal.defn(self, '$labels', TMP_Select_labels_2 = function $$labels() {
            var self = this;

            return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].labels))
          }, TMP_Select_labels_2.$$arity = 0);
          
          Opal.defn(self, '$options', TMP_Select_options_3 = function $$options() {
            var self = this;

            return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].options))
          }, TMP_Select_options_3.$$arity = 0);
          
          Opal.defn(self, '$option', TMP_Select_option_4 = function $$option() {
            var self = this;

            return self.$DOM(self["native"].options[self["native"].selectedIndex])
          }, TMP_Select_option_4.$$arity = 0);
          
          Opal.defn(self, '$index', TMP_Select_index_5 = function $$index() {
            var self = this;

            return self["native"].selectedIndex
          }, TMP_Select_index_5.$$arity = 0);
          self.$alias_native("multiple?", "multiple");
          self.$alias_native("required?", "required");
          return self.$alias_native("length");
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/template"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$DOM']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Template(){};
          var self = $Template = $klass($base, $super, 'Template', $Template);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Template_content_1;

          def["native"] = nil;
          return (Opal.defn(self, '$content', TMP_Template_content_1 = function $$content() {
            var self = this;

            return self.$DOM(self["native"].content)
          }, TMP_Template_content_1.$$arity = 0), nil) && 'content'
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element/textarea"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Textarea(){};
          var self = $Textarea = $klass($base, $super, 'Textarea', $Textarea);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Textarea_value_1, TMP_Textarea_value$eq_2, TMP_Textarea_clear_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$value', TMP_Textarea_value_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, TMP_Textarea_value_1.$$arity = 0);
          
          Opal.defn(self, '$value=', TMP_Textarea_value$eq_2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, TMP_Textarea_value$eq_2.$$arity = 1);
          return (Opal.defn(self, '$clear', TMP_Textarea_clear_3 = function $$clear() {
            var self = this;

            return self["native"].value = ''
          }, TMP_Textarea_clear_3.$$arity = 0), nil) && 'clear';
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/element"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$create_element', '$==', '$capitalize', '$include?', '$constants', '$new', '$const_get', '$include', '$target', '$DOM', '$supports?', '$loaded?', '$raise', '$[]', '$map', '$xpath', '$get', '$attributes', '$set', '$+', '$class_names', '$empty?', '$join', '$uniq', '$first', '$css', '$each', '$alias_native', '$reject', '$split', '$to_proc', '$===', '$assign', '$height', '$size', '$height=', '$-', '$to_s', '$clear', '$document', '$<<', '$to_a', '$downcase', '$name', '$id', '$offset', '$flatten', '$concat', '$replace', '$apply', '$to_n', '$window', '$width', '$width=']);
  
  self.$require("browser/dom/element/attributes");
  self.$require("browser/dom/element/data");
  self.$require("browser/dom/element/position");
  self.$require("browser/dom/element/offset");
  self.$require("browser/dom/element/scroll");
  self.$require("browser/dom/element/size");
  self.$require("browser/dom/element/button");
  self.$require("browser/dom/element/image");
  self.$require("browser/dom/element/input");
  self.$require("browser/dom/element/select");
  self.$require("browser/dom/element/template");
  self.$require("browser/dom/element/textarea");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_create_1, TMP_Element_new_2, TMP_Element_3, TMP_Element_$eq$_4, TMP_Element_$eq$_5, TMP_Element_$eq$_6, TMP_Element_$eq$_7, TMP_Element_$eq$_8, TMP_Element_$eq$_9, TMP_Element_$eq$_10, TMP_Element_$_12, TMP_Element_$$_13, TMP_Element_$$$eq_14, TMP_Element_add_class_15, TMP_Element_at_16, TMP_Element_at_css_18, TMP_Element_at_xpath_20, TMP_Element_attributes_21, TMP_Element_attribute_nodes_22, TMP_Element_class_names_23, TMP_Element_css_24, TMP_Element_css_25, TMP_Element_css_26, TMP_Element_data_27, TMP_Element_height_28, TMP_Element_height$eq_29, TMP_Element_id_30, TMP_Element_id$eq_31, TMP_Element_inner_dom_32, TMP_Element_inner_dom$eq_33, TMP_Element_inspect_34, TMP_Element_offset_35, TMP_Element_offset$eq_36, TMP_Element_position_37, TMP_Element_scroll_38, TMP_Element_search_40, TMP_Element_style_41, TMP_Element_style$B_42, TMP_Element_style$B_43, TMP_Element_style$B_44, TMP_Element_remove_attribute_45, TMP_Element_remove_class_46, TMP_Element_size_47, TMP_Element_width_48, TMP_Element_width$eq_49, TMP_Element_window_50, $a, TMP_Element_xpath_51, TMP_Element_xpath_52;

        def["native"] = nil;
        
        Opal.defs(self, '$create', TMP_Element_create_1 = function $$create($a_rest) {
          var self = this, args;
          if ($gvars.document == null) $gvars.document = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send($gvars.document, 'create_element', Opal.to_a(args))
        }, TMP_Element_create_1.$$arity = -1);
        Opal.defs(self, '$new', TMP_Element_new_2 = function(node) {
          var self = this, $iter = TMP_Element_new_2.$$p, $yield = $iter || nil, name = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_Element_new_2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if (self['$=='](Opal.const_get_relative($nesting, 'Element'))) {
            
            name = (node.nodeName).$capitalize();
            if ($truthy(Opal.const_get_relative($nesting, 'Element').$constants()['$include?'](name))) {
              return Opal.const_get_relative($nesting, 'Element').$const_get(name).$new(node)
              } else {
              return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Element_new_2, false, $Element), $zuper, $iter)
            };
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Element_new_2, false, $Element), $zuper, $iter)
          }
        }, TMP_Element_new_2.$$arity = 1);
        self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'Target'));
        $send(self, 'target', [], (TMP_Element_3 = function(value){var self = TMP_Element_3.$$s || this;
if (value == null) value = nil;
        try {
            return self.$DOM(value)
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }}, TMP_Element_3.$$s = self, TMP_Element_3.$$arity = 1, TMP_Element_3));
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_4 = function(selector) {
            var self = this;

            return self["native"].matches(selector)
          }, TMP_Element_$eq$_4.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches (Opera)"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_5 = function(selector) {
            var self = this;

            return self["native"].oMatchesSelector(selector)
          }, TMP_Element_$eq$_5.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches (Internet Explorer)"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_6 = function(selector) {
            var self = this;

            return self["native"].msMatchesSelector(selector)
          }, TMP_Element_$eq$_6.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches (Firefox)"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_7 = function(selector) {
            var self = this;

            return self["native"].mozMatchesSelector(selector)
          }, TMP_Element_$eq$_7.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches (Chrome)"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_8 = function(selector) {
            var self = this;

            return self["native"].webkitMatchesSelector(selector)
          }, TMP_Element_$eq$_8.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$loaded?']("Sizzle"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_9 = function(selector) {
            var self = this;

            return Sizzle.matchesSelector(self["native"], selector)
          }, TMP_Element_$eq$_9.$$arity = 1)
          } else {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_10 = function(selector) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "selector matching unsupported")
          }, TMP_Element_$eq$_10.$$arity = 1)
        };
        
        Opal.defn(self, '$/', TMP_Element_$_12 = function($a_rest) {
          var TMP_11, self = this, paths;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(paths, 'map', [], (TMP_11 = function(path){var self = TMP_11.$$s || this;
if (path == null) path = nil;
          return self.$xpath(path)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11)))
        }, TMP_Element_$_12.$$arity = -1);
        
        Opal.defn(self, '$[]', TMP_Element_$$_13 = function(name, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$attributes().$get(name, options)
        }, TMP_Element_$$_13.$$arity = -2);
        
        Opal.defn(self, '$[]=', TMP_Element_$$$eq_14 = function(name, value, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$attributes().$set(name, value, options)
        }, TMP_Element_$$$eq_14.$$arity = -3);
        
        Opal.defn(self, '$add_class', TMP_Element_add_class_15 = function $$add_class($a_rest) {
          var self = this, names, classes = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          classes = $rb_plus(self.$class_names(), names);
          if ($truthy(classes['$empty?']())) {
            } else {
            self["native"].className = classes.$uniq().$join(" ")
          };
          return self;
        }, TMP_Element_add_class_15.$$arity = -1);
        
        Opal.defn(self, '$at', TMP_Element_at_16 = function $$at(path_or_selector) {
          var $a, self = this;

          return ($truthy($a = self.$xpath(path_or_selector).$first()) ? $a : self.$css(path_or_selector).$first())
        }, TMP_Element_at_16.$$arity = 1);
        
        Opal.defn(self, '$at_css', TMP_Element_at_css_18 = function $$at_css($a_rest) {
          var TMP_17, self = this, rules, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          rules = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            rules[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(rules, 'each', [], (TMP_17 = function(rule){var self = TMP_17.$$s || this;
if (rule == null) rule = nil;
          if ($truthy((result = self.$css(rule).$first()))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            }}, TMP_17.$$s = self, TMP_17.$$brk = $brk, TMP_17.$$arity = 1, TMP_17))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, TMP_Element_at_css_18.$$arity = -1);
        
        Opal.defn(self, '$at_xpath', TMP_Element_at_xpath_20 = function $$at_xpath($a_rest) {
          var TMP_19, self = this, paths, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(paths, 'each', [], (TMP_19 = function(path){var self = TMP_19.$$s || this;
if (path == null) path = nil;
          if ($truthy((result = self.$xpath(path).$first()))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            }}, TMP_19.$$s = self, TMP_19.$$brk = $brk, TMP_19.$$arity = 1, TMP_19))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, TMP_Element_at_xpath_20.$$arity = -1);
        Opal.alias(self, "attr", "[]");
        Opal.alias(self, "attribute", "[]");
        
        Opal.defn(self, '$attributes', TMP_Element_attributes_21 = function $$attributes(options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return Opal.const_get_relative($nesting, 'Attributes').$new(self, options)
        }, TMP_Element_attributes_21.$$arity = -1);
        
        Opal.defn(self, '$attribute_nodes', TMP_Element_attribute_nodes_22 = function $$attribute_nodes() {
          var self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].attributes, $hash2(["get"], {"get": "item"})))
        }, TMP_Element_attribute_nodes_22.$$arity = 0);
        self.$alias_native("class_name", "className");
        
        Opal.defn(self, '$class_names', TMP_Element_class_names_23 = function $$class_names() {
          var self = this;

          return $send((self["native"].className).$split(/\s+/), 'reject', [], "empty?".$to_proc())
        }, TMP_Element_class_names_23.$$arity = 0);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Query.css"))) {
          
          Opal.defn(self, '$css', TMP_Element_css_24 = function $$css(path) {
            var self = this;

            try {
              return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].querySelectorAll(path)))
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  return Opal.const_get_relative($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_Element_css_24.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$loaded?']("Sizzle"))) {
          
          Opal.defn(self, '$css', TMP_Element_css_25 = function $$css(path) {
            var self = this;

            try {
              return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Sizzle(path, self["native"]))
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  return Opal.const_get_relative($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_Element_css_25.$$arity = 1)
          } else {
          
          Opal.defn(self, '$css', TMP_Element_css_26 = function $$css(selector) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "query by CSS selector unsupported")
          }, TMP_Element_css_26.$$arity = 1)
        };
        
        Opal.defn(self, '$data', TMP_Element_data_27 = function $$data(value) {
          var self = this, data = nil;

          if (value == null) {
            value = nil;
          }
          
          data = Opal.const_get_relative($nesting, 'Data').$new(self);
          if ($truthy(value)) {
            } else {
            return data
          };
          if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](value))) {
            data.$assign(value)
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "unknown data type")
          };
          return self;
        }, TMP_Element_data_27.$$arity = -1);
        Opal.alias(self, "get_attribute", "[]");
        Opal.alias(self, "get", "[]");
        
        Opal.defn(self, '$height', TMP_Element_height_28 = function $$height() {
          var self = this;

          return self.$size().$height()
        }, TMP_Element_height_28.$$arity = 0);
        
        Opal.defn(self, '$height=', TMP_Element_height$eq_29 = function(value) {
          var self = this, $writer = nil;

          
          $writer = [value];
          $send(self.$size(), 'height=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_Element_height$eq_29.$$arity = 1);
        
        Opal.defn(self, '$id', TMP_Element_id_30 = function $$id() {
          var self = this;

          
      var id = self["native"].id;

      if (id === "") {
        return nil;
      }
      else {
        return id;
      }
    
        }, TMP_Element_id_30.$$arity = 0);
        
        Opal.defn(self, '$id=', TMP_Element_id$eq_31 = function(value) {
          var self = this;

          return self["native"].id = value.$to_s()
        }, TMP_Element_id$eq_31.$$arity = 1);
        
        Opal.defn(self, '$inner_dom', TMP_Element_inner_dom_32 = function $$inner_dom() {
          var self = this, $iter = TMP_Element_inner_dom_32.$$p, block = $iter || nil, doc = nil;

          if ($iter) TMP_Element_inner_dom_32.$$p = null;
          
          self.$clear();
          doc = self.$document();
          return self['$<<']($send(Opal.const_get_relative($nesting, 'Builder'), 'new', [doc, self], block.$to_proc()).$to_a());
        }, TMP_Element_inner_dom_32.$$arity = 0);
        
        Opal.defn(self, '$inner_dom=', TMP_Element_inner_dom$eq_33 = function(node) {
          var self = this;

          
          self.$clear();
          return self['$<<'](node);
        }, TMP_Element_inner_dom$eq_33.$$arity = 1);
        
        Opal.defn(self, '$inspect', TMP_Element_inspect_34 = function $$inspect() {
          var self = this, inspect = nil;

          
          inspect = self.$name().$downcase();
          if ($truthy(self.$id())) {
            inspect = $rb_plus(inspect, $rb_plus($rb_plus(".", self.$id()), "!"))};
          if ($truthy(self.$class_names()['$empty?']())) {
            } else {
            inspect = $rb_plus(inspect, $rb_plus(".", self.$class_names().$join(".")))
          };
          return "" + "#<DOM::Element: " + (inspect) + ">";
        }, TMP_Element_inspect_34.$$arity = 0);
        
        Opal.defn(self, '$offset', TMP_Element_offset_35 = function $$offset($a_rest) {
          var self = this, values, off = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          values = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            values[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          off = Opal.const_get_relative($nesting, 'Offset').$new(self);
          if ($truthy(values['$empty?']())) {
            } else {
            $send(off, 'set', Opal.to_a(values))
          };
          return off;
        }, TMP_Element_offset_35.$$arity = -1);
        
        Opal.defn(self, '$offset=', TMP_Element_offset$eq_36 = function(value) {
          var self = this;

          return $send(self.$offset(), 'set', Opal.to_a(value))
        }, TMP_Element_offset$eq_36.$$arity = 1);
        
        Opal.defn(self, '$position', TMP_Element_position_37 = function $$position() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Position').$new(self)
        }, TMP_Element_position_37.$$arity = 0);
        
        Opal.defn(self, '$scroll', TMP_Element_scroll_38 = function $$scroll() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Scroll').$new(self)
        }, TMP_Element_scroll_38.$$arity = 0);
        
        Opal.defn(self, '$search', TMP_Element_search_40 = function $$search($a_rest) {
          var TMP_39, self = this, selectors;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          selectors = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            selectors[$arg_idx - 0] = arguments[$arg_idx];
          }
          return Opal.const_get_relative($nesting, 'NodeSet').$new($send(selectors, 'map', [], (TMP_39 = function(selector){var self = TMP_39.$$s || this;
if (selector == null) selector = nil;
          return self.$xpath(selector).$to_a().$concat(self.$css(selector).$to_a())}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39)).$flatten().$uniq())
        }, TMP_Element_search_40.$$arity = -1);
        Opal.alias(self, "set", "[]=");
        Opal.alias(self, "set_attribute", "[]=");
        
        Opal.defn(self, '$style', TMP_Element_style_41 = function $$style(data) {
          var $a, self = this, $iter = TMP_Element_style_41.$$p, block = $iter || nil, style = nil;

          if (data == null) {
            data = nil;
          }
          if ($iter) TMP_Element_style_41.$$p = null;
          
          style = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'Declaration').$new(self["native"].style);
          if ($truthy(($truthy($a = data) ? $a : block))) {
            } else {
            return style
          };
          if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](data))) {
            style.$replace(data)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](data))) {
            style.$assign(data)
          } else if ($truthy(block)) {
            $send(style, 'apply', [], block.$to_proc())
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "unknown data type")
          };
          return self;
        }, TMP_Element_style_41.$$arity = -1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("CSS.computed"))) {
          
          Opal.defn(self, '$style!', TMP_Element_style$B_42 = function() {
            var self = this;

            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'Declaration').$new(self.$window().$to_n().getComputedStyle(self["native"], null))
          }, TMP_Element_style$B_42.$$arity = 0)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("CSS.current"))) {
          
          Opal.defn(self, '$style!', TMP_Element_style$B_43 = function() {
            var self = this;

            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'Declaration').$new(self["native"].currentStyle)
          }, TMP_Element_style$B_43.$$arity = 0)
          } else {
          
          Opal.defn(self, '$style!', TMP_Element_style$B_44 = function() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "computed style unsupported")
          }, TMP_Element_style$B_44.$$arity = 0)
        };
        
        Opal.defn(self, '$remove_attribute', TMP_Element_remove_attribute_45 = function $$remove_attribute(name) {
          var self = this;

          return self["native"].removeAttribute(name)
        }, TMP_Element_remove_attribute_45.$$arity = 1);
        
        Opal.defn(self, '$remove_class', TMP_Element_remove_class_46 = function $$remove_class($a_rest) {
          var self = this, names, classes = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          classes = $rb_minus(self.$class_names(), names);
          if ($truthy(classes['$empty?']())) {
            self["native"].removeAttribute('class')
            } else {
            self["native"].className = classes.$join(" ")
          };
          return self;
        }, TMP_Element_remove_class_46.$$arity = -1);
        
        Opal.defn(self, '$size', TMP_Element_size_47 = function $$size($a_rest) {
          var self = this, inc;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          inc = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            inc[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(Opal.const_get_relative($nesting, 'Size'), 'new', [self].concat(Opal.to_a(inc)))
        }, TMP_Element_size_47.$$arity = -1);
        
        Opal.defn(self, '$width', TMP_Element_width_48 = function $$width() {
          var self = this;

          return self.$size().$width()
        }, TMP_Element_width_48.$$arity = 0);
        
        Opal.defn(self, '$width=', TMP_Element_width$eq_49 = function(value) {
          var self = this, $writer = nil;

          
          $writer = [value];
          $send(self.$size(), 'width=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_Element_width$eq_49.$$arity = 1);
        
        Opal.defn(self, '$window', TMP_Element_window_50 = function $$window() {
          var self = this;

          return self.$document().$window()
        }, TMP_Element_window_50.$$arity = 0);
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Browser')['$supports?']("Query.xpath")) ? $a : Opal.const_get_relative($nesting, 'Browser')['$loaded?']("wicked-good-xpath")))) {
          
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$loaded?']("wicked-good-xpath"))) {
            wgxpath.install()};
          return (Opal.defn(self, '$xpath', TMP_Element_xpath_51 = function $$xpath(path) {
            var self = this;

            try {
              return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new((self["native"].ownerDocument || self["native"]).evaluate(path,
           self["native"], null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null), $hash2(["get", "length"], {"get": "snapshotItem", "length": "snapshotLength"})))
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  return Opal.const_get_relative($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_Element_xpath_51.$$arity = 1), nil) && 'xpath';
          } else {
          return (Opal.defn(self, '$xpath', TMP_Element_xpath_52 = function $$xpath(path) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "query by XPath unsupported")
          }, TMP_Element_xpath_52.$$arity = 1), nil) && 'xpath'
        };
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/document"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$DOM', '$first', '$css', '$xpath', '$[]', '$supports?', '$raise', '$ready?', '$call', '$on', '$off', '$convert', '$new']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Document(){};
        var self = $Document = $klass($base, $super, 'Document', $Document);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Document_$$_1, TMP_Document_body_2, TMP_Document_create_element_3, TMP_Document_create_text_4, TMP_Document_document_5, TMP_Document_head_6, TMP_Document_inspect_7, TMP_Document_ready_8, TMP_Document_ready_10, TMP_Document_ready_12, TMP_Document_ready$q_13, TMP_Document_root_14, TMP_Document_root$eq_15, TMP_Document_style_sheets_17, TMP_Document_title_18, TMP_Document_title$eq_19, TMP_Document_window_20, TMP_Document_window_21, TMP_Document_window_22;

        def["native"] = nil;
        
        
        Opal.defn(self, '$[]', TMP_Document_$$_1 = function(what) {
          var $a, self = this;

          
          
      var result = self["native"].getElementById(what);

      if (result) {
        return self.$DOM(result);
      }
    ;
          return ($truthy($a = self.$css(what).$first()) ? $a : self.$xpath(what).$first());
        }, TMP_Document_$$_1.$$arity = 1);
        Opal.alias(self, "at", "[]");
        
        Opal.defn(self, '$body', TMP_Document_body_2 = function $$body() {
          var self = this;

          return self.$DOM(self["native"].body)
        }, TMP_Document_body_2.$$arity = 0);
        
        Opal.defn(self, '$create_element', TMP_Document_create_element_3 = function $$create_element(name, options) {
          var self = this, ns = nil;

          if (options == null) {
            options = $hash2([], {});
          }
          if ($truthy((ns = options['$[]']("namespace")))) {
            return self.$DOM(self["native"].createElementNS(ns, name))
            } else {
            return self.$DOM(self["native"].createElement(name))
          }
        }, TMP_Document_create_element_3.$$arity = -2);
        
        Opal.defn(self, '$create_text', TMP_Document_create_text_4 = function $$create_text(content) {
          var self = this;

          return self.$DOM(self["native"].createTextNode(content))
        }, TMP_Document_create_text_4.$$arity = 1);
        
        Opal.defn(self, '$document', TMP_Document_document_5 = function $$document() {
          var self = this;

          return self
        }, TMP_Document_document_5.$$arity = 0);
        
        Opal.defn(self, '$head', TMP_Document_head_6 = function $$head() {
          var self = this;

          return self.$DOM(self["native"].getElementsByTagName("head")[0])
        }, TMP_Document_head_6.$$arity = 0);
        
        Opal.defn(self, '$inspect', TMP_Document_inspect_7 = function $$inspect() {
          var self = this;

          return "#<DOM::Document>"
        }, TMP_Document_inspect_7.$$arity = 0);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.addListener"))) {
          
          Opal.defn(self, '$ready', TMP_Document_ready_8 = function $$ready() {
            var TMP_9, self = this, $iter = TMP_Document_ready_8.$$p, block = $iter || nil;

            if ($iter) TMP_Document_ready_8.$$p = null;
            
            if ($truthy(block)) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
            };
            if ($truthy(self['$ready?']())) {
              return block.$call()};
            return $send(self, 'on', ["dom:load"], (TMP_9 = function(e){var self = TMP_9.$$s || this;
if (e == null) e = nil;
            
              e.$off();
              return block.$call();}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
          }, TMP_Document_ready_8.$$arity = 0)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.attach"))) {
          
          Opal.defn(self, '$ready', TMP_Document_ready_10 = function $$ready() {
            var TMP_11, self = this, $iter = TMP_Document_ready_10.$$p, block = $iter || nil;

            if ($iter) TMP_Document_ready_10.$$p = null;
            
            if ($truthy(block)) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
            };
            if ($truthy(self['$ready?']())) {
              return block.$call()};
            return $send(self, 'on', ["ready:state:change"], (TMP_11 = function(e){var self = TMP_11.$$s || this;
if (e == null) e = nil;
            if ($truthy(self['$ready?']())) {
                
                e.$off();
                return block.$call();
                } else {
                return nil
              }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
          }, TMP_Document_ready_10.$$arity = 0)
          } else {
          
          Opal.defn(self, '$ready', TMP_Document_ready_12 = function $$ready() {
            var self = this, $iter = TMP_Document_ready_12.$$p, block = $iter || nil;

            if ($iter) TMP_Document_ready_12.$$p = null;
            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "document ready unsupported")
          }, TMP_Document_ready_12.$$arity = 0)
        };
        
        Opal.defn(self, '$ready?', TMP_Document_ready$q_13 = function() {
          var self = this;

          return self["native"].readyState === "complete"
        }, TMP_Document_ready$q_13.$$arity = 0);
        
        Opal.defn(self, '$root', TMP_Document_root_14 = function $$root() {
          var self = this;

          return self.$DOM(self["native"].documentElement)
        }, TMP_Document_root_14.$$arity = 0);
        
        Opal.defn(self, '$root=', TMP_Document_root$eq_15 = function(element) {
          var self = this;

          return self["native"].documentElement = Opal.const_get_relative($nesting, 'Native').$convert(element)
        }, TMP_Document_root$eq_15.$$arity = 1);
        
        Opal.defn(self, '$style_sheets', TMP_Document_style_sheets_17 = function $$style_sheets() {
          var TMP_16, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [self["native"].styleSheets], (TMP_16 = function(e){var self = TMP_16.$$s || this;
if (e == null) e = nil;
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'StyleSheet').$new(e)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))
        }, TMP_Document_style_sheets_17.$$arity = 0);
        
        Opal.defn(self, '$title', TMP_Document_title_18 = function $$title() {
          var self = this;

          return self["native"].title
        }, TMP_Document_title_18.$$arity = 0);
        
        Opal.defn(self, '$title=', TMP_Document_title$eq_19 = function(value) {
          var self = this;

          return self["native"].title = value
        }, TMP_Document_title$eq_19.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Document.view"))) {
          return (Opal.defn(self, '$window', TMP_Document_window_20 = function $$window() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Window').$new(self["native"].defaultView)
          }, TMP_Document_window_20.$$arity = 0), nil) && 'window'
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Document.window"))) {
          return (Opal.defn(self, '$window', TMP_Document_window_21 = function $$window() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Window').$new(self["native"].parentWindow)
          }, TMP_Document_window_21.$$arity = 0), nil) && 'window'
          } else {
          return (Opal.defn(self, '$window', TMP_Document_window_22 = function $$window() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window from document unsupported")
          }, TMP_Document_window_22.$$arity = 0), nil) && 'window'
        };
      })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/document_fragment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $DocumentFragment(){};
        var self = $DocumentFragment = $klass($base, $super, 'DocumentFragment', $DocumentFragment);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/builder"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$<<', '$[]=', '$to_h', '$-', '$[]', '$each', '$===', '$call', '$raise', '$attr_reader', '$new', '$to_proc', '$map', '$build', '$for', '$create_text', '$document', '$create_element', '$merge!', '$attributes', '$add_class', '$on', '$inner_html=']);
  
  (function($base, $parent_nesting) {
    var $Utils, self = $Utils = $module($base, 'Utils');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Utils_heredoc_1;

    Opal.defs(self, '$heredoc', TMP_Utils_heredoc_1 = function $$heredoc(string) {
      var self = this;

      return string
    }, TMP_Utils_heredoc_1.$$arity = 1)
  })(Opal.const_get_relative($nesting, 'Paggio'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_on_2;

    def.on = nil;
    return (Opal.defn(self, '$on', TMP_Element_on_2 = function $$on($a_rest) {
      var $b, self = this, args, $iter = TMP_Element_on_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Element_on_2.$$p = null;
      return (self.on = ($truthy($b = self.on) ? $b : []))['$<<']([args, block])
    }, TMP_Element_on_2.$$arity = -1), nil) && 'on'
  })(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'HTML'), Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DOM_10, TMP_DOM_11, TMP_DOM_15;

      
      (function($base, $super, $parent_nesting) {
        function $Builder(){};
        var self = $Builder = $klass($base, $super, 'Builder', $Builder);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Builder_to_h_3, TMP_Builder_for_4, TMP_Builder_build_6, TMP_Builder_initialize_7, TMP_Builder_to_a_9;

        def.builder = def.roots = nil;
        
        Opal.defs(self, '$to_h', TMP_Builder_to_h_3 = function $$to_h() {
          var $a, self = this;
          if (self.builders == null) self.builders = nil;

          return (self.builders = ($truthy($a = self.builders) ? $a : $hash2([], {})))
        }, TMP_Builder_to_h_3.$$arity = 0);
        Opal.defs(self, '$for', TMP_Builder_for_4 = function(klass) {
          var self = this, $iter = TMP_Builder_for_4.$$p, block = $iter || nil, $writer = nil;

          if ($iter) TMP_Builder_for_4.$$p = null;
          if ($truthy(block)) {
            
            $writer = [klass, block];
            $send(self.$to_h(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return self.$to_h()['$[]'](klass)
          }
        }, TMP_Builder_for_4.$$arity = 1);
        Opal.defs(self, '$build', TMP_Builder_build_6 = function $$build(builder, item) {try {

          var TMP_5, self = this;

          
          $send(self.$to_h(), 'each', [], (TMP_5 = function(klass, block){var self = TMP_5.$$s || this;
if (klass == null) klass = nil;if (block == null) block = nil;
          if ($truthy(klass['$==='](item))) {
              Opal.ret(block.$call(builder, item))
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5));
          return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "cannot build unknown item " + (item));
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_Builder_build_6.$$arity = 2);
        self.$attr_reader("document", "element");
        
        Opal.defn(self, '$initialize', TMP_Builder_initialize_7 = function $$initialize(document) {
          var TMP_8, self = this, $iter = TMP_Builder_initialize_7.$$p, block = $iter || nil;

          if ($iter) TMP_Builder_initialize_7.$$p = null;
          
          self.document = document;
          self.builder = $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'HTML'), 'new', [], block.$to_proc());
          return (self.roots = $send(self.builder.$each(), 'map', [], (TMP_8 = function(e){var self = TMP_8.$$s || this;
if (e == null) e = nil;
          return Opal.const_get_relative($nesting, 'Builder').$build(self, e)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8)));
        }, TMP_Builder_initialize_7.$$arity = 1);
        return (Opal.defn(self, '$to_a', TMP_Builder_to_a_9 = function $$to_a() {
          var self = this;

          return self.roots
        }, TMP_Builder_to_a_9.$$arity = 0), nil) && 'to_a';
      })($nesting[0], null, $nesting);
      $send(Opal.const_get_relative($nesting, 'Builder'), 'for', [Opal.const_get_relative($nesting, 'String')], (TMP_DOM_10 = function(b, item){var self = TMP_DOM_10.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return b.$document().$create_text(item)}, TMP_DOM_10.$$s = self, TMP_DOM_10.$$arity = 2, TMP_DOM_10));
      $send(Opal.const_get_relative($nesting, 'Builder'), 'for', [Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'HTML'), 'Element')], (TMP_DOM_11 = function(b, item){var self = TMP_DOM_11.$$s || this, TMP_12, TMP_13, TMP_14, dom = nil, on = nil, inner = nil, $writer = nil;
if (b == null) b = nil;if (item == null) item = nil;
      
        dom = b.$document().$create_element(item.name);
        if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](item.attributes))) {
          dom.$attributes()['$merge!'](item.attributes)};
        $send((item.class_names), 'each', [], (TMP_12 = function(value){var self = TMP_12.$$s || this;
if (value == null) value = nil;
        return dom.$add_class(value)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
        if ($truthy((on = item.on || nil))) {
          $send(on, 'each', [], (TMP_13 = function(args, block){var self = TMP_13.$$s || this;
if (args == null) args = nil;if (block == null) block = nil;
          return $send(dom, 'on', Opal.to_a(args), block.$to_proc())}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13))};
        if ($truthy((inner = item.inner_html || nil))) {
          
          $writer = [inner];
          $send(dom, 'inner_html=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          $send(item, 'each', [], (TMP_14 = function(child){var self = TMP_14.$$s || this;
if (child == null) child = nil;
          return dom['$<<'](Opal.const_get_relative($nesting, 'Builder').$build(b, child))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))
        };
        return dom;}, TMP_DOM_11.$$s = self, TMP_DOM_11.$$arity = 2, TMP_DOM_11));
      $send(Opal.const_get_relative($nesting, 'Builder'), 'for', [Opal.const_get_qualified(Opal.const_get_relative($nesting, 'DOM'), 'Node')], (TMP_DOM_15 = function(b, item){var self = TMP_DOM_15.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return item}, TMP_DOM_15.$$s = self, TMP_DOM_15.$$arity = 2, TMP_DOM_15));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom/mutation_observer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$supports?', '$include', '$===', '$==', '$type', '$new', '$[]', '$DOM', '$alias_native', '$call', '$map', '$convert', '$private', '$Native', '$[]=', '$-', '$to_n']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $MutationObserver(){};
        var self = $MutationObserver = $klass($base, $super, 'MutationObserver', $MutationObserver);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MutationObserver_supported$q_1, TMP_MutationObserver_initialize_9, TMP_MutationObserver_observe_11, TMP_MutationObserver_take_13, TMP_MutationObserver_disconnect_14, TMP_MutationObserver_convert_15;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_MutationObserver_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("MutationObserver")
        }, TMP_MutationObserver_supported$q_1.$$arity = 0);
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        (function($base, $super, $parent_nesting) {
          function $Record(){};
          var self = $Record = $klass($base, $super, 'Record', $Record);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Record_type_2, TMP_Record_attribute$q_3, TMP_Record_tree$q_4, TMP_Record_cdata$q_5, TMP_Record_added_6, TMP_Record_removed_7, TMP_Record_target_8;

          def["native"] = nil;
          
          self.$include(Opal.const_get_relative($nesting, 'Native'));
          
          Opal.defn(self, '$type', TMP_Record_type_2 = function $$type() {
            var self = this, $case = nil;

            return (function() {$case = self["native"].type;
            if ("attributes"['$===']($case)) {return "attribute"}
            else if ("childList"['$===']($case)) {return "tree"}
            else if ("characterData"['$===']($case)) {return "cdata"}
            else { return nil }})()
          }, TMP_Record_type_2.$$arity = 0);
          
          Opal.defn(self, '$attribute?', TMP_Record_attribute$q_3 = function() {
            var self = this;

            return self.$type()['$==']("attribute")
          }, TMP_Record_attribute$q_3.$$arity = 0);
          
          Opal.defn(self, '$tree?', TMP_Record_tree$q_4 = function() {
            var self = this;

            return self.$type()['$==']("tree")
          }, TMP_Record_tree$q_4.$$arity = 0);
          
          Opal.defn(self, '$cdata?', TMP_Record_cdata$q_5 = function() {
            var self = this;

            return self.$type()['$==']("cdata")
          }, TMP_Record_cdata$q_5.$$arity = 0);
          
          Opal.defn(self, '$added', TMP_Record_added_6 = function $$added() {
            var self = this, array = nil;

            
            array = (function() {if ($truthy(self["native"].addedNodes != null)) {
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].addedNodes)
              } else {
              return []
            }; return nil; })();
            return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](array);
          }, TMP_Record_added_6.$$arity = 0);
          
          Opal.defn(self, '$removed', TMP_Record_removed_7 = function $$removed() {
            var self = this, array = nil;

            
            array = (function() {if ($truthy(self["native"].removedNodes != null)) {
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].removedNodes)
              } else {
              return []
            }; return nil; })();
            return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](array);
          }, TMP_Record_removed_7.$$arity = 0);
          
          Opal.defn(self, '$target', TMP_Record_target_8 = function $$target() {
            var self = this;

            return self.$DOM(self["native"].target)
          }, TMP_Record_target_8.$$arity = 0);
          self.$alias_native("old", "oldValue");
          self.$alias_native("name", "attributeName");
          return self.$alias_native("namespace", "attributeNamespace");
        })($nesting[0], null, $nesting);
        
        Opal.defn(self, '$initialize', TMP_MutationObserver_initialize_9 = function $$initialize() {
          var TMP_10, self = this, $iter = TMP_MutationObserver_initialize_9.$$p, block = $iter || nil;

          if ($iter) TMP_MutationObserver_initialize_9.$$p = null;
          
          
      var func = function(records) {
        return block.$call($send((records), 'map', [], (TMP_10 = function(r){var self = TMP_10.$$s || this;
if (r == null) r = nil;
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'MutationObserver'), 'Record').$new(r)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10)));
      }
    ;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_MutationObserver_initialize_9, false), [new window.MutationObserver(func)], null);
        }, TMP_MutationObserver_initialize_9.$$arity = 0);
        
        Opal.defn(self, '$observe', TMP_MutationObserver_observe_11 = function $$observe(target, options) {
          var self = this;

          if (options == null) {
            options = nil;
          }
          
          if ($truthy(options)) {
            } else {
            options = $hash2(["children", "tree", "attributes", "cdata"], {"children": true, "tree": true, "attributes": "old", "cdata": "old"})
          };
          self["native"].observe(Opal.const_get_relative($nesting, 'Native').$convert(target), self.$convert(options));
          return self;
        }, TMP_MutationObserver_observe_11.$$arity = -2);
        
        Opal.defn(self, '$take', TMP_MutationObserver_take_13 = function $$take() {
          var TMP_12, self = this;

          return $send((self["native"].takeRecords()), 'map', [], (TMP_12 = function(r){var self = TMP_12.$$s || this;
if (r == null) r = nil;
          return Opal.const_get_relative($nesting, 'Record').$new(r)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
        }, TMP_MutationObserver_take_13.$$arity = 0);
        
        Opal.defn(self, '$disconnect', TMP_MutationObserver_disconnect_14 = function $$disconnect() {
          var self = this;

          return self["native"].disconnect()
        }, TMP_MutationObserver_disconnect_14.$$arity = 0);
        self.$private();
        return (Opal.defn(self, '$convert', TMP_MutationObserver_convert_15 = function $$convert(hash) {
          var self = this, options = nil, $writer = nil, attrs = nil, filter = nil, cdata = nil;

          
          options = self.$Native({});
          if ($truthy(hash['$[]']("children"))) {
            
            $writer = ["childList", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(hash['$[]']("tree"))) {
            
            $writer = ["subtree", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((attrs = hash['$[]']("attributes")))) {
            
            
            $writer = ["attributes", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (attrs['$==']("old")) {
              
              $writer = ["attributeOldValue", true];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};
          if ($truthy((filter = hash['$[]']("filter")))) {
            
            $writer = ["attributeFilter", filter];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((cdata = hash['$[]']("cdata")))) {
            
            
            $writer = ["characterData", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (cdata['$==']("old")) {
              
              $writer = ["characterDataOldValue", true];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};
          return options.$to_n();
        }, TMP_MutationObserver_convert_15.$$arity = 1), nil) && 'convert';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/dom"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send, $klass = Opal.klass;
  if ($gvars.window == null) $gvars.window = nil;

  Opal.add_stubs(['$require', '$DOM', '$shift', '$to_a', '$new', '$to_proc', '$==', '$length', '$first', '$native?', '$===', '$try_convert', '$raise', '$document']);
  
  self.$require("browser/dom/node_set");
  self.$require("browser/dom/node");
  self.$require("browser/dom/attribute");
  self.$require("browser/dom/character_data");
  self.$require("browser/dom/text");
  self.$require("browser/dom/cdata");
  self.$require("browser/dom/comment");
  self.$require("browser/dom/element");
  self.$require("browser/dom/document");
  self.$require("browser/dom/document_fragment");
  self.$require("browser/dom/builder");
  self.$require("browser/dom/mutation_observer");
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_XML_1, TMP_Kernel_DOM_2;

    
    
    Opal.defn(self, '$XML', TMP_Kernel_XML_1 = function $$XML(what) {
      var self = this;

      
      
      var doc;

      if (window.DOMParser) {
        doc = new DOMParser().parseFromString(what, 'text/xml');
      }
      else {
        doc       = new ActiveXObject('Microsoft.XMLDOM');
        doc.async = 'false';
        doc.loadXML(what);
      }
    ;
      return self.$DOM(doc);
    }, TMP_Kernel_XML_1.$$arity = 1);
    
    Opal.defn(self, '$DOM', TMP_Kernel_DOM_2 = function $$DOM($a_rest) {
      var $b, self = this, args, $iter = TMP_Kernel_DOM_2.$$p, block = $iter || nil, document = nil, roots = nil, what = nil;
      if ($gvars.document == null) $gvars.document = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_DOM_2.$$p = null;
      if ($truthy(block)) {
        
        document = ($truthy($b = args.$shift()) ? $b : $gvars.document);
        roots = $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'Builder'), 'new', [document], block.$to_proc()).$to_a();
        if (roots.$length()['$=='](1)) {
          return roots.$first()
          } else {
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'NodeSet').$new(roots)
        };
        } else {
        
        what = args.$shift();
        document = ($truthy($b = args.$shift()) ? $b : $gvars.document);
        if ($truthy(self['$native?'](what))) {
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'Node').$new(what)
        } else if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'Node')['$==='](what))) {
          return what
        } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](what))) {
          
          var doc = Opal.const_get_relative($nesting, 'Native').$try_convert(document).createElement('div');
          doc.innerHTML = what;

          return self.$DOM(doc.childNodes.length == 1 ? doc.childNodes[0] : doc);
        
          } else {
          return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "argument not DOM convertible")
        };
      }
    }, TMP_Kernel_DOM_2.$$arity = -1);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_document_3;

      def["native"] = nil;
      return (Opal.defn(self, '$document', TMP_Window_document_3 = function $$document() {
        var self = this;

        return self.$DOM(self["native"].document)
      }, TMP_Window_document_3.$$arity = 0), nil) && 'document'
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  return ($gvars.document = $gvars.window.$document());
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/css/declaration"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$each', '$[]=', '$-', '$to_proc', '$important', '$name', '$value', '$to_s', '$enum_for', '$[]', '$alias_native', '$end_with?']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Declaration(){};
        var self = $Declaration = $klass($base, $super, 'Declaration', $Declaration);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Declaration_rule_1, TMP_Declaration_assign_3, TMP_Declaration_replace_4, TMP_Declaration_apply_5, TMP_Declaration_delete_7, TMP_Declaration_$$_8, TMP_Declaration_$$$eq_9, TMP_Declaration_important$q_10, TMP_Declaration_each_11, TMP_Declaration_method_missing_12;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
        
        Opal.defn(self, '$rule', TMP_Declaration_rule_1 = function $$rule() {
          var self = this;

          if ($truthy((typeof(self["native"].parentRule) !== "undefined"))) {
            return Opal.const_get_relative($nesting, 'Rule').$new(self["native"].parentRule)
            } else {
            return nil
          }
        }, TMP_Declaration_rule_1.$$arity = 0);
        
        Opal.defn(self, '$assign', TMP_Declaration_assign_3 = function $$assign(data) {
          var TMP_2, self = this;

          
          $send(data, 'each', [], (TMP_2 = function(name, value){var self = TMP_2.$$s || this, $writer = nil;
if (name == null) name = nil;if (value == null) value = nil;
          
            $writer = [name, value];
            $send(self, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2));
          return self;
        }, TMP_Declaration_assign_3.$$arity = 1);
        
        Opal.defn(self, '$replace', TMP_Declaration_replace_4 = function $$replace(string) {
          var self = this;

          return self["native"].cssText = string
        }, TMP_Declaration_replace_4.$$arity = 1);
        
        Opal.defn(self, '$apply', TMP_Declaration_apply_5 = function $$apply() {
          var TMP_6, self = this, $iter = TMP_Declaration_apply_5.$$p, block = $iter || nil;

          if ($iter) TMP_Declaration_apply_5.$$p = null;
          return $send($send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Definition'), 'new', [], block.$to_proc()), 'each', [], (TMP_6 = function(style){var self = TMP_6.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (style == null) style = nil;
          if ($truthy(style.$important())) {
              return self["native"].setProperty(style.$name(), style.$value(), "important")
              } else {
              return self["native"].setProperty(style.$name(), style.$value(), "")
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
        }, TMP_Declaration_apply_5.$$arity = 0);
        
        Opal.defn(self, '$delete', TMP_Declaration_delete_7 = function(name) {
          var self = this;

          return self["native"].removeProperty(name)
        }, TMP_Declaration_delete_7.$$arity = 1);
        
        Opal.defn(self, '$[]', TMP_Declaration_$$_8 = function(name) {
          var self = this;

          
      var result = self["native"].getPropertyValue(name);

      if (result == null || result === "") {
        return nil;
      }

      return result;
    
        }, TMP_Declaration_$$_8.$$arity = 1);
        
        Opal.defn(self, '$[]=', TMP_Declaration_$$$eq_9 = function(name, value) {
          var self = this;

          return self["native"].setProperty(name, value.$to_s(), "")
        }, TMP_Declaration_$$$eq_9.$$arity = 2);
        
        Opal.defn(self, '$important?', TMP_Declaration_important$q_10 = function(name) {
          var self = this;

          return self["native"].getPropertyPriority(name) == "important"
        }, TMP_Declaration_important$q_10.$$arity = 1);
        
        Opal.defn(self, '$each', TMP_Declaration_each_11 = function $$each() {
          var self = this, $iter = TMP_Declaration_each_11.$$p, block = $iter || nil;

          if ($iter) TMP_Declaration_each_11.$$p = null;
          
          if ((block !== nil)) {
            } else {
            return self.$enum_for("each")
          };
          
      for (var i = 0, length = self["native"].length; i < length; i++) {
        var name  = self["native"].item(i);

        Opal.yieldX(block, [name, self['$[]'](name)])
      }
    ;
          return self;
        }, TMP_Declaration_each_11.$$arity = 0);
        self.$alias_native("length");
        self.$alias_native("to_s", "cssText");
        return (Opal.defn(self, '$method_missing', TMP_Declaration_method_missing_12 = function $$method_missing(name, value) {
          var self = this, $writer = nil;

          if (value == null) {
            value = nil;
          }
          if ($truthy(name['$end_with?']("="))) {
            
            $writer = [name['$[]']($range(0, -2, false)), value];
            $send(self, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return self['$[]'](name)
          }
        }, TMP_Declaration_method_missing_12.$$arity = -2), nil) && 'method_missing';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/css/style_sheet"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$is_a?', '$to_n', '$alias_native', '$new', '$DOM', '$===', '$join', '$map', '$insert', '$length', '$find', '$rules', '$log', '$==', '$id', '$__send__', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $StyleSheet(){};
        var self = $StyleSheet = $klass($base, $super, 'StyleSheet', $StyleSheet);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StyleSheet_initialize_1, TMP_StyleSheet_media_2, TMP_StyleSheet_owner_3, TMP_StyleSheet_parent_4, TMP_StyleSheet_rules_6, TMP_StyleSheet_delete_7, TMP_StyleSheet_insert_8, TMP_StyleSheet_rule_10, TMP_StyleSheet_$$_12, TMP_StyleSheet_method_missing_13;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        
        Opal.defn(self, '$initialize', TMP_StyleSheet_initialize_1 = function $$initialize(what) {
          var self = this, $iter = TMP_StyleSheet_initialize_1.$$p, $yield = $iter || nil;

          if ($iter) TMP_StyleSheet_initialize_1.$$p = null;
          if ($truthy(what['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'DOM'), 'Element')))) {
            return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_StyleSheet_initialize_1, false), [what.$to_n().sheet], null)
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_StyleSheet_initialize_1, false), [what], null)
          }
        }, TMP_StyleSheet_initialize_1.$$arity = 1);
        self.$alias_native("disabled?", "disabled");
        self.$alias_native("href");
        self.$alias_native("title");
        self.$alias_native("type");
        
        Opal.defn(self, '$media', TMP_StyleSheet_media_2 = function $$media() {
          var self = this;

          if ($truthy(self["native"].media != null)) {
            return Opal.const_get_relative($nesting, 'Media').$new(self["native"].media)
            } else {
            return nil
          }
        }, TMP_StyleSheet_media_2.$$arity = 0);
        
        Opal.defn(self, '$owner', TMP_StyleSheet_owner_3 = function $$owner() {
          var self = this;

          return self.$DOM(self["native"].ownerNode)
        }, TMP_StyleSheet_owner_3.$$arity = 0);
        
        Opal.defn(self, '$parent', TMP_StyleSheet_parent_4 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentStyleSheet != null)) {
            return Opal.const_get_relative($nesting, 'Sheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          }
        }, TMP_StyleSheet_parent_4.$$arity = 0);
        
        Opal.defn(self, '$rules', TMP_StyleSheet_rules_6 = function $$rules() {
          var TMP_5, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [self["native"].cssRules], (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
          return Opal.const_get_relative($nesting, 'Rule').$new(e)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))
        }, TMP_StyleSheet_rules_6.$$arity = 0);
        
        Opal.defn(self, '$delete', TMP_StyleSheet_delete_7 = function(index) {
          var self = this;

          return self["native"].deleteRule(index)
        }, TMP_StyleSheet_delete_7.$$arity = 1);
        
        Opal.defn(self, '$insert', TMP_StyleSheet_insert_8 = function $$insert(index, rule) {
          var self = this;

          return self["native"].insertRule(rule, index)
        }, TMP_StyleSheet_insert_8.$$arity = 2);
        
        Opal.defn(self, '$rule', TMP_StyleSheet_rule_10 = function $$rule(selector, body) {
          var TMP_9, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](selector))) {
            } else {
            selector = selector.$join(", ")
          };
          if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](body))) {
            } else {
            body = $send(body, 'map', [], (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return "" + (name) + ": " + (value) + ";"}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9)).$join("\n")
          };
          return self.$insert(self.$length(), "" + (selector) + " { " + (body) + " }");
        }, TMP_StyleSheet_rule_10.$$arity = 2);
        
        Opal.defn(self, '$[]', TMP_StyleSheet_$$_12 = function(id) {
          var TMP_11, self = this;

          return $send(self.$rules(), 'find', [], (TMP_11 = function(r){var self = TMP_11.$$s || this;
if (r == null) r = nil;
          
            self.$log(r);
            return r.$id()['$=='](id);}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))
        }, TMP_StyleSheet_$$_12.$$arity = 1);
        
        Opal.defn(self, '$method_missing', TMP_StyleSheet_method_missing_13 = function $$method_missing($a_rest) {
          var self = this, args, $iter = TMP_StyleSheet_method_missing_13.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_StyleSheet_method_missing_13.$$p = null;
          return $send(self.$rules(), '__send__', Opal.to_a(args), block.$to_proc())
        }, TMP_StyleSheet_method_missing_13.$$arity = -1);
        return (function($base, $super, $parent_nesting) {
          function $Media(){};
          var self = $Media = $klass($base, $super, 'Media', $Media);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Media_push_14, TMP_Media_delete_15;

          def["native"] = nil;
          
          self.$alias_native("text", "mediaText");
          self.$alias_native("to_s", "mediaText");
          
          Opal.defn(self, '$push', TMP_Media_push_14 = function $$push(medium) {
            var self = this;

            
            self["native"].appendMedium(medium);
            return self;
          }, TMP_Media_push_14.$$arity = 1);
          return (Opal.defn(self, '$delete', TMP_Media_delete_15 = function(medium) {
            var self = this;

            return self["native"].deleteMedium(medium)
          }, TMP_Media_delete_15.$$arity = 1), nil) && 'delete';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), $nesting);
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/css/rule"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Rule_new_1, TMP_Rule_parent_2, TMP_Rule_style_sheet_3;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        Opal.const_set($nesting[0], 'STYLE_RULE', 1);
        Opal.const_set($nesting[0], 'CHARSET_RULE', 2);
        Opal.const_set($nesting[0], 'IMPORT_RULE', 3);
        Opal.const_set($nesting[0], 'MEDIA_RULE', 4);
        Opal.const_set($nesting[0], 'FONT_FACE_RULE', 5);
        Opal.const_set($nesting[0], 'PAGE_RULE', 6);
        Opal.const_set($nesting[0], 'KEYFRAMES_RULE', 7);
        Opal.const_set($nesting[0], 'KEYFRAME_RULE', 8);
        Opal.const_set($nesting[0], 'NAMESPACE_RULE', 10);
        Opal.const_set($nesting[0], 'COUNTER_STYLE_RULE', 11);
        Opal.const_set($nesting[0], 'SUPPORTS_RULE', 12);
        Opal.const_set($nesting[0], 'DOCUMENT_RULE', 13);
        Opal.const_set($nesting[0], 'FONT_FEATURE_VALUES_RULE', 14);
        Opal.const_set($nesting[0], 'VIEWPORT_RULE', 15);
        Opal.const_set($nesting[0], 'REGION_STYLE_RULE', 16);
        Opal.defs(self, '$new', TMP_Rule_new_1 = function(rule) {
          var $a, self = this, $iter = TMP_Rule_new_1.$$p, $yield = $iter || nil, klass = nil;
          if (self.classes == null) self.classes = nil;

          if ($iter) TMP_Rule_new_1.$$p = null;
          if (self['$=='](Opal.const_get_relative($nesting, 'Rule'))) {
            
            self.classes = ($truthy($a = self.classes) ? $a : [nil, Opal.const_get_relative($nesting, 'Style')]);
            if ($truthy((klass = self.classes['$[]'](rule.type)))) {
              return klass.$new(rule)
              } else {
              return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "cannot instantiate a non derived Rule object")
            };
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Rule_new_1, false, $Rule), [rule], null)
          }
        }, TMP_Rule_new_1.$$arity = 1);
        self.$alias_native("text", "cssText");
        self.$alias_native("to_s", "cssText");
        
        Opal.defn(self, '$parent', TMP_Rule_parent_2 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentRule != null)) {
            return Opal.const_get_relative($nesting, 'Rule').$new(self["native"].parentRule)
            } else {
            return nil
          }
        }, TMP_Rule_parent_2.$$arity = 0);
        return (Opal.defn(self, '$style_sheet', TMP_Rule_style_sheet_3 = function $$style_sheet() {
          var self = this;

          if ($truthy(self["native"].parentStyleSheet != null)) {
            return Opal.const_get_relative($nesting, 'StyleSheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          }
        }, TMP_Rule_style_sheet_3.$$arity = 0), nil) && 'style_sheet';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/css/rule/style"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$alias_native', '$new', '$__send__', '$declaration', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Style(){};
          var self = $Style = $klass($base, $super, 'Style', $Style);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Style_declaration_1, TMP_Style_method_missing_2;

          def["native"] = nil;
          
          self.$alias_native("selector", "selectorText");
          self.$alias_native("id", "selectorText");
          
          Opal.defn(self, '$declaration', TMP_Style_declaration_1 = function $$declaration() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Declaration').$new(self["native"].style)
          }, TMP_Style_declaration_1.$$arity = 0);
          return (Opal.defn(self, '$method_missing', TMP_Style_method_missing_2 = function $$method_missing($a_rest) {
            var self = this, args, $iter = TMP_Style_method_missing_2.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_Style_method_missing_2.$$p = null;
            return $send(self.$declaration(), '__send__', Opal.to_a(args), block.$to_proc())
          }, TMP_Style_method_missing_2.$$arity = -1), nil) && 'method_missing';
        })($nesting[0], Opal.const_get_relative($nesting, 'Rule'), $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/css"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$create_element', '$[]=', '$-', '$css', '$to_proc', '$inner_text=']);
  
  self.$require("browser/css/declaration");
  self.$require("browser/css/style_sheet");
  self.$require("browser/css/rule");
  self.$require("browser/css/rule/style");
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_CSS_1;

    
    Opal.defn(self, '$CSS', TMP_Kernel_CSS_1 = function $$CSS(text) {
      var self = this, $iter = TMP_Kernel_CSS_1.$$p, block = $iter || nil, style = nil, $writer = nil;
      if ($gvars.document == null) $gvars.document = nil;

      if (text == null) {
        text = nil;
      }
      if ($iter) TMP_Kernel_CSS_1.$$p = null;
      
      style = $gvars.document.$create_element("style");
      
      $writer = ["type", "text/css"];
      $send(style, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      if ($truthy(block)) {
        
        $writer = [$send(Opal.const_get_relative($nesting, 'Paggio'), 'css', [], block.$to_proc())];
        $send(style, 'inner_text=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        } else {
        
        $writer = [text];
        $send(style, 'inner_text=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return style;
    }, TMP_Kernel_CSS_1.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("native");
  self.$require("paggio");
  self.$require("browser/version");
  self.$require("browser/utils");
  self.$require("browser/support");
  self.$require("browser/event");
  self.$require("browser/window");
  self.$require("browser/dom");
  return self.$require("browser/css");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal-browser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("browser")
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/animation_frame"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$any?', '$supports?', '$to_n', '$request', '$raise', '$new', '$to_proc']);
  
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $AnimationFrame(){};
      var self = $AnimationFrame = $klass($base, $super, 'AnimationFrame', $AnimationFrame);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AnimationFrame_supported$q_2, TMP_AnimationFrame_initialize_3, TMP_AnimationFrame_request_4, TMP_AnimationFrame_request_5, TMP_AnimationFrame_request_6, TMP_AnimationFrame_request_7, TMP_AnimationFrame_request_8, TMP_AnimationFrame_request_9, TMP_AnimationFrame_cancel_10, TMP_AnimationFrame_cancel_11, TMP_AnimationFrame_cancel_12, TMP_AnimationFrame_cancel_13, TMP_AnimationFrame_cancel_14, TMP_AnimationFrame_cancel_15, TMP_AnimationFrame_cancel_16, TMP_AnimationFrame_cancel_17, TMP_AnimationFrame_cancel_18, TMP_AnimationFrame_cancel_19;

      def["native"] = def.id = nil;
      
      Opal.defs(self, '$supported?', TMP_AnimationFrame_supported$q_2 = function() {
        var TMP_1, self = this;

        return $send(["Animation.request", "Animation.request (Chrome)", "Animation.request (Firefox)", "Animation.request (Opera)", "Animation.request (Internet Explorer)"], 'any?', [], (TMP_1 = function(feature){var self = TMP_1.$$s || this;
if (feature == null) feature = nil;
        return Opal.const_get_relative($nesting, 'Browser')['$supports?'](feature)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1))
      }, TMP_AnimationFrame_supported$q_2.$$arity = 0);
      
      Opal.defn(self, '$initialize', TMP_AnimationFrame_initialize_3 = function $$initialize(window) {
        var self = this, $iter = TMP_AnimationFrame_initialize_3.$$p, block = $iter || nil;

        if ($iter) TMP_AnimationFrame_initialize_3.$$p = null;
        
        self.window = window;
        self["native"] = window.$to_n();
        return (self.id = self.$request(block));
      }, TMP_AnimationFrame_initialize_3.$$arity = 1);
      if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.request"))) {
        
        Opal.defn(self, '$request', TMP_AnimationFrame_request_4 = function $$request(block) {
          var self = this;

          return self["native"].requestAnimationFrame(block.$to_n())
        }, TMP_AnimationFrame_request_4.$$arity = 1)
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.request (Chrome)"))) {
        
        Opal.defn(self, '$request', TMP_AnimationFrame_request_5 = function $$request(block) {
          var self = this;

          return self["native"].webkitRequestAnimationFrame(block.$to_n())
        }, TMP_AnimationFrame_request_5.$$arity = 1)
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.request (Firefox)"))) {
        
        Opal.defn(self, '$request', TMP_AnimationFrame_request_6 = function $$request(block) {
          var self = this;

          return self["native"].mozRequestAnimationFrame(block.$to_n())
        }, TMP_AnimationFrame_request_6.$$arity = 1)
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.request (Opera)"))) {
        
        Opal.defn(self, '$request', TMP_AnimationFrame_request_7 = function $$request(block) {
          var self = this;

          return self["native"].oRequestAnimationFrame(block.$to_n())
        }, TMP_AnimationFrame_request_7.$$arity = 1)
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.request (Internet Explorer)"))) {
        
        Opal.defn(self, '$request', TMP_AnimationFrame_request_8 = function $$request(block) {
          var self = this;

          return self["native"].msRequestAnimationFrame(block.$to_n())
        }, TMP_AnimationFrame_request_8.$$arity = 1)
        } else {
        
        Opal.defn(self, '$request', TMP_AnimationFrame_request_9 = function $$request() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window requestAnimationFrame unsupported")
        }, TMP_AnimationFrame_request_9.$$arity = 0)
      };
      if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancel"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_10 = function $$cancel() {
          var self = this;

          return self["native"].cancelAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_10.$$arity = 0), nil) && 'cancel'
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancel (Chrome)"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_11 = function $$cancel() {
          var self = this;

          return self["native"].webkitCancelAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_11.$$arity = 0), nil) && 'cancel'
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancelRequest (Chrome)"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_12 = function $$cancel() {
          var self = this;

          return self["native"].webkitCancelRequestAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_12.$$arity = 0), nil) && 'cancel'
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancel (Firefox)"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_13 = function $$cancel() {
          var self = this;

          return self["native"].mozCancelAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_13.$$arity = 0), nil) && 'cancel'
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancelRequest (Firefox)"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_14 = function $$cancel() {
          var self = this;

          return self["native"].mozCancelRequestAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_14.$$arity = 0), nil) && 'cancel'
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancel (Opera)"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_15 = function $$cancel() {
          var self = this;

          return self["native"].oCancelAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_15.$$arity = 0), nil) && 'cancel'
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancelRequest (Opera)"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_16 = function $$cancel() {
          var self = this;

          return self["native"].oCancelRequestAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_16.$$arity = 0), nil) && 'cancel'
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancel (Internet Explorer)"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_17 = function $$cancel() {
          var self = this;

          return self["native"].msCancelAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_17.$$arity = 0), nil) && 'cancel'
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Animation.cancelRequest (Internet Explorer)"))) {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_18 = function $$cancel() {
          var self = this;

          return self["native"].msCancelRequestAnimationFrame(self.id)
        }, TMP_AnimationFrame_cancel_18.$$arity = 0), nil) && 'cancel'
        } else {
        return (Opal.defn(self, '$cancel', TMP_AnimationFrame_cancel_19 = function $$cancel() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window cancelAnimationFrame unsupported")
        }, TMP_AnimationFrame_cancel_19.$$arity = 0), nil) && 'cancel'
      };
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_animation_frame_20;

    
    Opal.defn(self, '$animation_frame', TMP_Kernel_animation_frame_20 = function $$animation_frame() {
      var self = this, $iter = TMP_Kernel_animation_frame_20.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) TMP_Kernel_animation_frame_20.$$p = null;
      return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'AnimationFrame'), 'new', [$gvars.window], block.$to_proc())
    }, TMP_Kernel_animation_frame_20.$$arity = 0)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_animation_frame_21;

    return (Opal.defn(self, '$animation_frame', TMP_Proc_animation_frame_21 = function $$animation_frame() {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'AnimationFrame'), 'new', [$gvars.window], self.$to_proc())
    }, TMP_Proc_animation_frame_21.$$arity = 0), nil) && 'animation_frame'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/location"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$to_s', '$alias_native', '$new']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Location(){};
      var self = $Location = $klass($base, $super, 'Location', $Location);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Location_assign_1, TMP_Location_replace_2, TMP_Location_reload_3, TMP_Location_to_s_4;

      def["native"] = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      
      Opal.defn(self, '$assign', TMP_Location_assign_1 = function $$assign(url) {
        var self = this;

        return self["native"].assign(url.$to_s())
      }, TMP_Location_assign_1.$$arity = 1);
      
      Opal.defn(self, '$replace', TMP_Location_replace_2 = function $$replace(url) {
        var self = this;

        return self["native"].replace(url.$to_s())
      }, TMP_Location_replace_2.$$arity = 1);
      
      Opal.defn(self, '$reload', TMP_Location_reload_3 = function $$reload(force) {
        var self = this;

        if (force == null) {
          force = false;
        }
        return self["native"].reload(force)
      }, TMP_Location_reload_3.$$arity = -1);
      
      Opal.defn(self, '$to_s', TMP_Location_to_s_4 = function $$to_s() {
        var self = this;

        return self["native"].toString()
      }, TMP_Location_to_s_4.$$arity = 0);
      self.$alias_native("fragment", "hash");
      self.$alias_native("fragment=", "hash=");
      self.$alias_native("host");
      self.$alias_native("host=");
      self.$alias_native("uri", "href");
      self.$alias_native("uri=", "href=");
      self.$alias_native("path", "pathname");
      self.$alias_native("path=", "pathname=");
      self.$alias_native("port");
      self.$alias_native("port=");
      self.$alias_native("scheme", "protocol");
      self.$alias_native("scheme=", "protocol=");
      self.$alias_native("query", "search");
      return self.$alias_native("query=", "search=");
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_location_5;

      def["native"] = nil;
      return (Opal.defn(self, '$location', TMP_Window_location_5 = function $$location() {
        var self = this;

        if ($truthy(self["native"].location)) {
          return Opal.const_get_relative($nesting, 'Location').$new(self["native"].location)
          } else {
          return nil
        }
      }, TMP_Window_location_5.$$arity = 0), nil) && 'location'
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Document(){};
      var self = $Document = $klass($base, $super, 'Document', $Document);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Document_location_6;

      def["native"] = nil;
      return (Opal.defn(self, '$location', TMP_Document_location_6 = function $$location() {
        var self = this;

        if ($truthy(self["native"].location)) {
          return Opal.const_get_relative($nesting, 'Location').$new(self["native"].location)
          } else {
          return nil
        }
      }, TMP_Document_location_6.$$arity = 0), nil) && 'location'
    })(Opal.const_get_relative($nesting, 'DOM'), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'DOM'), 'Element'), $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/history"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$supports?', '$include', '$alias_native', '$nil?', '$path', '$location', '$raise', '$new']);
  
  self.$require("browser/location");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $History(){};
      var self = $History = $klass($base, $super, 'History', $History);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_History_supported$q_1, TMP_History_back_2, TMP_History_forward_3, TMP_History_push_4, TMP_History_replace_5, TMP_History_current_6, TMP_History_state_7, TMP_History_state_8;

      def["native"] = nil;
      
      Opal.defs(self, '$supported?', TMP_History_supported$q_1 = function() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Browser')['$supports?']("History")
      }, TMP_History_supported$q_1.$$arity = 0);
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      self.$alias_native("length");
      
      Opal.defn(self, '$back', TMP_History_back_2 = function $$back(number) {
        var self = this;

        if (number == null) {
          number = 1;
        }
        return self["native"].go(-number)
      }, TMP_History_back_2.$$arity = -1);
      
      Opal.defn(self, '$forward', TMP_History_forward_3 = function $$forward(number) {
        var self = this;

        if (number == null) {
          number = 1;
        }
        return self["native"].go(number)
      }, TMP_History_forward_3.$$arity = -1);
      
      Opal.defn(self, '$push', TMP_History_push_4 = function $$push(item, data) {
        var self = this;

        if (data == null) {
          data = nil;
        }
        
        if ($truthy(data['$nil?']())) {
          data = null};
        return self["native"].pushState(data, null, item);
      }, TMP_History_push_4.$$arity = -2);
      
      Opal.defn(self, '$replace', TMP_History_replace_5 = function $$replace(item, data) {
        var self = this;

        if (data == null) {
          data = nil;
        }
        
        if ($truthy(data['$nil?']())) {
          data = null};
        return self["native"].replaceState(data, null, item);
      }, TMP_History_replace_5.$$arity = -2);
      
      Opal.defn(self, '$current', TMP_History_current_6 = function $$current() {
        var self = this;
        if ($gvars.window == null) $gvars.window = nil;

        return $gvars.window.$location().$path()
      }, TMP_History_current_6.$$arity = 0);
      if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("History.state"))) {
        return (Opal.defn(self, '$state', TMP_History_state_7 = function $$state() {
          var self = this;

          
        var state = self["native"].state;

        if (state == null) {
          return nil;
        }
        else {
          return state;
        }
      
        }, TMP_History_state_7.$$arity = 0), nil) && 'state'
        } else {
        return (Opal.defn(self, '$state', TMP_History_state_8 = function $$state() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "history state unsupported")
        }, TMP_History_state_8.$$arity = 0), nil) && 'state'
      };
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_history_9;

      def["native"] = nil;
      return (Opal.defn(self, '$history', TMP_Window_history_9 = function $$history() {
        var self = this;

        if ($truthy(self["native"].history)) {
          return Opal.const_get_relative($nesting, 'History').$new(self["native"].history)
          } else {
          return nil
        }
      }, TMP_Window_history_9.$$arity = 0), nil) && 'history'
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/browser_ext/patches"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$*']);
  return (function($base, $super, $parent_nesting) {
    function $Fixnum(){};
    var self = $Fixnum = $klass($base, $super, 'Fixnum', $Fixnum);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Fixnum_day_1;

    return (Opal.defn(self, '$day', TMP_Fixnum_day_1 = function $$day() {
      var self = this;

      return $rb_times($rb_times(self, 24), 3600)
    }, TMP_Fixnum_day_1.$$arity = 0), nil) && 'day'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/browser_ext/window"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$delay', '$/', '$to_proc', '$alias_method', '$lambda', '$call', '$hash', '$location', '$module_function']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Browser_window_25;

    
    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_animation_frame_1, TMP_Window_animation_frame_2, TMP_Window_delay_3, TMP_Window_interval_4, TMP_Window_scroll_5, TMP_Window_location_6, TMP_Window_on_hash_change_7;
      if (self["native"] == null) self["native"] = nil;

      
      self["native"] = window;
      if ($truthy(self["native"].requestAnimationFrame !== undefined)) {
        
        Opal.defn(self, '$animation_frame', TMP_Window_animation_frame_1 = function $$animation_frame() {
          var self = this, $iter = TMP_Window_animation_frame_1.$$p, block = $iter || nil;

          if ($iter) TMP_Window_animation_frame_1.$$p = null;
          
          requestAnimationFrame(block);
          return self;
        }, TMP_Window_animation_frame_1.$$arity = 0)
        } else {
        
        Opal.defn(self, '$animation_frame', TMP_Window_animation_frame_2 = function $$animation_frame() {
          var self = this, $iter = TMP_Window_animation_frame_2.$$p, block = $iter || nil;

          if ($iter) TMP_Window_animation_frame_2.$$p = null;
          
          $send(self, 'delay', [$rb_divide(1.0, 60)], block.$to_proc());
          return self;
        }, TMP_Window_animation_frame_2.$$arity = 0)
      };
      
      Opal.defn(self, '$delay', TMP_Window_delay_3 = function $$delay(duration) {
        var self = this, $iter = TMP_Window_delay_3.$$p, block = $iter || nil;

        if ($iter) TMP_Window_delay_3.$$p = null;
        
        setTimeout(block, duration * 1000);
        return self;
      }, TMP_Window_delay_3.$$arity = 1);
      self.$alias_method("timeout", "delay");
      
      Opal.defn(self, '$interval', TMP_Window_interval_4 = function $$interval(duration) {
        var self = this, $iter = TMP_Window_interval_4.$$p, block = $iter || nil;

        if ($iter) TMP_Window_interval_4.$$p = null;
        
        setInterval(block, duration * 1000);
        return self;
      }, TMP_Window_interval_4.$$arity = 1);
      self.$alias_method("every", "interval");
      
      Opal.defn(self, '$scroll', TMP_Window_scroll_5 = function $$scroll(x, y) {
        var self = this;

        return window.scrollTo(x, y)
      }, TMP_Window_scroll_5.$$arity = 2);
      self.$alias_method("scroll_to", "scroll");
      
      Opal.defn(self, '$location', TMP_Window_location_6 = function $$location() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Location')
      }, TMP_Window_location_6.$$arity = 0);
      
      Opal.defn(self, '$on_hash_change', TMP_Window_on_hash_change_7 = function $$on_hash_change() {
        var TMP_8, self = this, $iter = TMP_Window_on_hash_change_7.$$p, block = $iter || nil, listener = nil;

        if ($iter) TMP_Window_on_hash_change_7.$$p = null;
        
        listener = $send(self, 'lambda', [], (TMP_8 = function(_event){var self = TMP_8.$$s || this;
if (_event == null) _event = nil;
        return block.$call(self.$location().$hash())}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
        return window.addEventListener("hashchange", listener, false);
      }, TMP_Window_on_hash_change_7.$$arity = 0);
      return (function($base, $parent_nesting) {
        var $Location, self = $Location = $module($base, 'Location');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Location_hash_9, TMP_Location_hash$eq_10, TMP_Location_host_11, TMP_Location_hostname_12, TMP_Location_protocol_13, TMP_Location_path_14, TMP_Location_href_15, TMP_Location_hash_16, TMP_Location_username_17, TMP_Location_password_18, TMP_Location_origin_19, TMP_Location_search_20, TMP_Location_href$eq_21, TMP_Location_reload_22, TMP_Location_replace_23, TMP_Location_assign_24;

        
        self.$module_function();
        
        Opal.defn(self, '$hash', TMP_Location_hash_9 = function $$hash() {
          var self = this;

          return window.location.hash
        }, TMP_Location_hash_9.$$arity = 0);
        
        Opal.defn(self, '$hash=', TMP_Location_hash$eq_10 = function(hash) {
          var self = this;

          return window.location.hash = hash
        }, TMP_Location_hash$eq_10.$$arity = 1);
        
        Opal.defn(self, '$host', TMP_Location_host_11 = function $$host() {
          var self = this;

          return window.location.host
        }, TMP_Location_host_11.$$arity = 0);
        
        Opal.defn(self, '$hostname', TMP_Location_hostname_12 = function $$hostname() {
          var self = this;

          return window.location.hostname
        }, TMP_Location_hostname_12.$$arity = 0);
        
        Opal.defn(self, '$protocol', TMP_Location_protocol_13 = function $$protocol() {
          var self = this;

          return window.location.protocol
        }, TMP_Location_protocol_13.$$arity = 0);
        
        Opal.defn(self, '$path', TMP_Location_path_14 = function $$path() {
          var self = this;

          return window.location.pathname
        }, TMP_Location_path_14.$$arity = 0);
        
        Opal.defn(self, '$href', TMP_Location_href_15 = function $$href() {
          var self = this;

          return window.location.href
        }, TMP_Location_href_15.$$arity = 0);
        
        Opal.defn(self, '$hash', TMP_Location_hash_16 = function $$hash() {
          var self = this;

          return window.location.hash
        }, TMP_Location_hash_16.$$arity = 0);
        
        Opal.defn(self, '$username', TMP_Location_username_17 = function $$username() {
          var self = this;

          return window.location.username
        }, TMP_Location_username_17.$$arity = 0);
        
        Opal.defn(self, '$password', TMP_Location_password_18 = function $$password() {
          var self = this;

          return window.location.password
        }, TMP_Location_password_18.$$arity = 0);
        
        Opal.defn(self, '$origin', TMP_Location_origin_19 = function $$origin() {
          var self = this;

          return window.location.origin
        }, TMP_Location_origin_19.$$arity = 0);
        
        Opal.defn(self, '$search', TMP_Location_search_20 = function $$search() {
          var self = this;

          return window.location.search
        }, TMP_Location_search_20.$$arity = 0);
        
        Opal.defn(self, '$href=', TMP_Location_href$eq_21 = function(href) {
          var self = this;

          return window.location.href = href
        }, TMP_Location_href$eq_21.$$arity = 1);
        
        Opal.defn(self, '$reload', TMP_Location_reload_22 = function $$reload(force) {
          var self = this;

          if (force == null) {
            force = true;
          }
          return window.location.reload(force)
        }, TMP_Location_reload_22.$$arity = -1);
        
        Opal.defn(self, '$replace', TMP_Location_replace_23 = function $$replace(url) {
          var self = this;

          return window.location.replace(url)
        }, TMP_Location_replace_23.$$arity = 1);
        
        Opal.defn(self, '$assign', TMP_Location_assign_24 = function $$assign(url) {
          var self = this;

          return window.location.assign(url)
        }, TMP_Location_assign_24.$$arity = 1);
      })($nesting[0], $nesting);
    })($nesting[0], null, $nesting);
    self.$module_function();
    
    Opal.defn(self, '$window', TMP_Browser_window_25 = function $$window() {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window
    }, TMP_Browser_window_25.$$arity = 0);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/browser_ext/document"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Document(){};
        var self = $Document = $klass($base, $super, 'Document', $Document);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Document_URL_1, TMP_Document_active_element_2;

        def["native"] = nil;
        
        
        Opal.defn(self, '$URL', TMP_Document_URL_1 = function $$URL() {
          var self = this;

          return self["native"].URL
        }, TMP_Document_URL_1.$$arity = 0);
        return (Opal.defn(self, '$active_element', TMP_Document_active_element_2 = function $$active_element() {
          var self = this, el = nil;

          
          el = self["native"].activeElement();
          if ($truthy(el)) {
            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'Node').$new(el)
            } else {
            return nil
          };
        }, TMP_Document_active_element_2.$$arity = 0), nil) && 'active_element';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/browser_ext/node"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$is_a?', '$check_bootstrap', '$to_n', '$as_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Node(){};
        var self = $Node = $klass($base, $super, 'Node', $Node);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Node_as_native_1, TMP_Node_check_jquery_2, TMP_Node_check_bootstrap_3, TMP_Node_tooltip_4, TMP_Node_popover_5, TMP_Node_replace_child_6;

        def["native"] = nil;
        
        
        Opal.defn(self, '$as_native', TMP_Node_as_native_1 = function $$as_native() {
          var self = this;

          return self["native"]
        }, TMP_Node_as_native_1.$$arity = 0);
        
        Opal.defn(self, '$check_jquery', TMP_Node_check_jquery_2 = function $$check_jquery() {
          var self = this;

          
          if (typeof jQuery === 'undefined') {
            throw new Error('Bootstrap\'s JavaScript requires jQuery');
          }
        
        }, TMP_Node_check_jquery_2.$$arity = 0);
        
        Opal.defn(self, '$check_bootstrap', TMP_Node_check_bootstrap_3 = function $$check_bootstrap() {
          var self = this;

          
          if (typeof($.fn.tooltip) === 'undefined') {
            throw new Error('Bootstrap.js not loaded');
          }
        
        }, TMP_Node_check_bootstrap_3.$$arity = 0);
        
        Opal.defn(self, '$tooltip', TMP_Node_tooltip_4 = function $$tooltip(arg) {
          var self = this;

          if (arg == null) {
            arg = nil;
          }
          
          if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            arg = $hash2(["title", "trigger"], {"title": arg, "trigger": "hover focus"})};
          self.$check_bootstrap();
          return $(self["native"]).tooltip(arg.$to_n());
        }, TMP_Node_tooltip_4.$$arity = -1);
        
        Opal.defn(self, '$popover', TMP_Node_popover_5 = function $$popover(arg) {
          var self = this;

          if (arg == null) {
            arg = nil;
          }
          
          if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            arg = $hash2(["title", "trigger"], {"title": arg, "trigger": "hover focus"})};
          self.$check_bootstrap();
          return $(self["native"]).popover(arg.$to_n());
        }, TMP_Node_popover_5.$$arity = -1);
        return (Opal.defn(self, '$replace_child', TMP_Node_replace_child_6 = function $$replace_child(new_child, old_child) {
          var self = this, parent = nil;

          
          parent = self.$as_native();
          new_child = new_child.$as_native();
          old_child = old_child.$as_native();
          parent.replaceChild(new_child, old_child);
          return self;
        }, TMP_Node_replace_child_6.$$arity = 2), nil) && 'replace_child';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/browser_ext/element"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$!', '$attr_reader', '$to_n', '$[]', '$supports?', '$==', '$to_s', '$include', '$enum_for', '$each', '$attribute_nodes', '$name', '$value', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_hidden$q_1, TMP_Element_focus_2, TMP_Element_select_3, TMP_Element_selected$eq_4, TMP_Element_checked$eq_5;

        def["native"] = nil;
        
        
        Opal.defn(self, '$hidden?', TMP_Element_hidden$q_1 = function() {
          var self = this;

          return (self["native"].hidden)['$!']()['$!']()
        }, TMP_Element_hidden$q_1.$$arity = 0);
        
        Opal.defn(self, '$focus', TMP_Element_focus_2 = function $$focus() {
          var self = this;

          return self["native"].focus()
        }, TMP_Element_focus_2.$$arity = 0);
        
        Opal.defn(self, '$select', TMP_Element_select_3 = function $$select() {
          var self = this;

          return self["native"].select()
        }, TMP_Element_select_3.$$arity = 0);
        
        Opal.defn(self, '$selected=', TMP_Element_selected$eq_4 = function(bool) {
          var self = this;

          return self["native"].selected = bool
        }, TMP_Element_selected$eq_4.$$arity = 1);
        
        Opal.defn(self, '$checked=', TMP_Element_checked$eq_5 = function(bool) {
          var self = this;

          return self["native"].checked = bool
        }, TMP_Element_checked$eq_5.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          function $Attributes(){};
          var self = $Attributes = $klass($base, $super, 'Attributes', $Attributes);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Attributes_initialize_6, $a, TMP_Attributes_$$_7, TMP_Attributes_$$$eq_8, TMP_Attributes_$$_9, TMP_Attributes_$$$eq_10, TMP_Attributes_each_11, TMP_Attributes_has_key$q_13, TMP_Attributes_merge$B_15;

          def.namespace = def["native"] = def.element = nil;
          
          self.$attr_reader("namespace");
          
          Opal.defn(self, '$initialize', TMP_Attributes_initialize_6 = function $$initialize(element, options) {
            var self = this;

            
            self.element = element;
            self["native"] = element.$to_n();
            return (self.namespace = options['$[]']("namespace"));
          }, TMP_Attributes_initialize_6.$$arity = 2);
          if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className")) ? $a : Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor")))) {
            
            
            Opal.defn(self, '$[]', TMP_Attributes_$$_7 = function(name, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              
              if ($truthy((($a = name['$==']("class")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className") : name['$==']("class")))) {
                name = "className"
              } else if ($truthy((($a = name['$==']("for")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor") : name['$==']("for")))) {
                name = "htmlFor"};
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil
              };
            }, TMP_Attributes_$$_7.$$arity = -2);
            
            Opal.defn(self, '$[]=', TMP_Attributes_$$$eq_8 = function(name, value, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              
              if ($truthy((($a = name['$==']("class")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className") : name['$==']("class")))) {
                name = "className"
              } else if ($truthy((($a = name['$==']("for")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor") : name['$==']("for")))) {
                name = "htmlFor"};
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                if ($truthy(value)) {
                  return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value)
                  } else {
                  return self["native"].removeAttributeNS(namespace.$to_s(), name.$to_s())
                }
              } else if ($truthy(value)) {
                return self["native"].setAttribute(name.$to_s(), value.$to_s())
                } else {
                return self["native"].removeAttribute(name.$to_s())
              };
            }, TMP_Attributes_$$$eq_8.$$arity = -3);
            } else {
            
            
            Opal.defn(self, '$[]', TMP_Attributes_$$_9 = function(name, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil
              }
            }, TMP_Attributes_$$_9.$$arity = -2);
            
            Opal.defn(self, '$[]=', TMP_Attributes_$$$eq_10 = function(name, value, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                if ($truthy(value)) {
                  return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value)
                  } else {
                  return self["native"].removeAttributeNS(namespace.$to_s(), name.$to_s())
                }
              } else if ($truthy(value)) {
                return self["native"].setAttribute(name.$to_s(), value)
                } else {
                return self["native"].removeAttribute(name.$to_s())
              }
            }, TMP_Attributes_$$$eq_10.$$arity = -3);
          };
          self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
          
          Opal.defn(self, '$each', TMP_Attributes_each_11 = function $$each() {
            var TMP_12, self = this, $iter = TMP_Attributes_each_11.$$p, block = $iter || nil;

            if ($iter) TMP_Attributes_each_11.$$p = null;
            
            if ((block !== nil)) {
              } else {
              return self.$enum_for("each")
            };
            $send(self.element.$attribute_nodes(), 'each', [], (TMP_12 = function(attr){var self = TMP_12.$$s || this;
if (attr == null) attr = nil;
            return Opal.yieldX(block, [attr.$name(), attr.$value()]);}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
            return self;
          }, TMP_Attributes_each_11.$$arity = 0);
          Opal.alias(self, "get", "[]");
          
          Opal.defn(self, '$has_key?', TMP_Attributes_has_key$q_13 = function(name) {
            var self = this;

            return self['$[]'](name)['$!']()['$!']()
          }, TMP_Attributes_has_key$q_13.$$arity = 1);
          
          Opal.defn(self, '$merge!', TMP_Attributes_merge$B_15 = function(hash) {
            var TMP_14, self = this;

            
            $send(hash, 'each', [], (TMP_14 = function(name, value){var self = TMP_14.$$s || this, $writer = nil;
if (name == null) name = nil;if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14));
            return self;
          }, TMP_Attributes_merge$B_15.$$arity = 1);
          return Opal.alias(self, "set", "[]=");
        })($nesting[0], null, $nesting);
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/browser_ext/bootstrap"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$check_bootstrap', '$is_a?', '$to_n']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Node(){};
        var self = $Node = $klass($base, $super, 'Node', $Node);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Node_check_bootstrap_1, TMP_Node_bootstrap_tooltip_2, TMP_Node_bootstrap_popover_3;

        def["native"] = nil;
        
        
        Opal.defn(self, '$check_bootstrap', TMP_Node_check_bootstrap_1 = function $$check_bootstrap() {
          var self = this;

          
        if (typeof($.fn.tooltip) === 'undefined') {
          throw new Error('Bootstrap.js not loaded');
        }
      
        }, TMP_Node_check_bootstrap_1.$$arity = 0);
        
        Opal.defn(self, '$bootstrap_tooltip', TMP_Node_bootstrap_tooltip_2 = function $$bootstrap_tooltip(arg) {
          var self = this;

          if (arg == null) {
            arg = nil;
          }
          
          self.$check_bootstrap();
          if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            arg = $hash2(["title", "trigger"], {"title": arg, "trigger": "hover focus"})};
          return $(self["native"]).tooltip(arg.$to_n());
        }, TMP_Node_bootstrap_tooltip_2.$$arity = -1);
        return (Opal.defn(self, '$bootstrap_popover', TMP_Node_bootstrap_popover_3 = function $$bootstrap_popover(arg) {
          var self = this;

          if (arg == null) {
            arg = nil;
          }
          
          self.$check_bootstrap();
          if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            arg = $hash2(["title", "trigger"], {"title": arg, "trigger": "hover focus"})};
          return $(self["native"]).popover(arg.$to_n());
        }, TMP_Node_bootstrap_popover_3.$$arity = -1), nil) && 'bootstrap_popover';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/browser_ext"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal-browser");
  self.$require("browser/event");
  self.$require("browser/animation_frame");
  self.$require("browser/history");
  self.$require("browser/location");
  self.$require("robe/common/trace");
  self.$require("robe/client/browser/browser_ext/patches");
  self.$require("robe/client/browser/browser_ext/window");
  self.$require("robe/client/browser/browser_ext/document");
  self.$require("robe/client/browser/browser_ext/node");
  self.$require("robe/client/browser/browser_ext/element");
  return self.$require("robe/client/browser/browser_ext/bootstrap");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/state/atom"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $module = Opal.module, $truthy = Opal.truthy, $hash = Opal.hash;

  Opal.add_stubs(['$dup', '$map', '$deep_dup', '$each', '$[]=', '$-', '$to_sym', '$include?', '$attrs', '$size', '$<<', '$define_method', '$[]', '$raise', '$new', '$parse', '$class', '$is_a?', '$find_index', '$name', '$==', '$each_with_index', '$nil?', '$instance_variable_set', '$clone', '$from_array', '$to_a', '$to_proc', '$to_json', '$attr', '$state_class', '$send', '$mutable?', '$mutate!', '$to_h', '$mutation_count', '$mutation_count=', '$snapshot', '$to_immutable', '$replicate', '$instance_variable_get', '$broadcast', '$call', '$to_mutable_in_situ', '$to_mutable', '$+', '$index', '$delete_at', '$detect', '$!', '$alias_method', '$protected', '$inc_mutation_count', '$!=']);
  
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_deep_dup_1;

    return (Opal.defn(self, '$deep_dup', TMP_Object_deep_dup_1 = function $$deep_dup() {
      var self = this;

      return self.$dup()
    }, TMP_Object_deep_dup_1.$$arity = 0), nil) && 'deep_dup'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_deep_dup_3;

    return (Opal.defn(self, '$deep_dup', TMP_Array_deep_dup_3 = function $$deep_dup() {
      var TMP_2, self = this;

      return $send(self, 'map', [], (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
      return e.$deep_dup()}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))
    }, TMP_Array_deep_dup_3.$$arity = 0), nil) && 'deep_dup'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Set_deep_dup_5;

    return (Opal.defn(self, '$deep_dup', TMP_Set_deep_dup_5 = function $$deep_dup() {
      var TMP_4, self = this;

      return $send(self, 'map', [], (TMP_4 = function(e){var self = TMP_4.$$s || this;
if (e == null) e = nil;
      return e.$deep_dup()}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4))
    }, TMP_Set_deep_dup_5.$$arity = 0), nil) && 'deep_dup'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_deep_dup_7;

    return (Opal.defn(self, '$deep_dup', TMP_Hash_deep_dup_7 = function $$deep_dup() {
      var TMP_6, self = this, c = nil;

      
      c = $hash2([], {});
      $send(self, 'each', [], (TMP_6 = function(key, value){var self = TMP_6.$$s || this, $writer = nil;
if (key == null) key = nil;if (value == null) value = nil;
      
        $writer = [key, value.$deep_dup()];
        $send(c, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6));
      return c;
    }, TMP_Hash_deep_dup_7.$$arity = 0), nil) && 'deep_dup'
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Atom(){};
        var self = $Atom = $klass($base, $super, 'Atom', $Atom);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Atom_initialize_38, TMP_Atom_to_h_39, TMP_Atom_mutation_count_40, TMP_Atom_mutation_count$eq_41, TMP_Atom_clone_42, TMP_Atom_dup_43, TMP_Atom_snapshot_44, TMP_Atom_copy$B_45, TMP_Atom_mutate_dup$B_46, TMP_Atom_initialize$B_47, TMP_Atom_mutate$B_49, TMP_Atom_observe_51, TMP_Atom_unobserve_53, TMP_Atom_observer$q_55, TMP_Atom_state_56, TMP_Atom_state_to_h_57, TMP_Atom_state_to_a_58, TMP_Atom_state_to_json_59, TMP_Atom_broadcast_62, TMP_Atom_inc_mutation_count_63;

        def.state = def.observer_id = def.observers = nil;
        
        (function($base, $super, $parent_nesting) {
          function $State(){};
          var self = $State = $klass($base, $super, 'State', $State);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_State_attrs_8, TMP_State_attr_32;

          
          Opal.defs(self, '$attrs', TMP_State_attrs_8 = function $$attrs() {
            var $a, self = this;
            if (self.attrs == null) self.attrs = nil;

            return (self.attrs = ($truthy($a = self.attrs) ? $a : []))
          }, TMP_State_attrs_8.$$arity = 0);
          return Opal.defs(self, '$attr', TMP_State_attr_32 = function $$attr($a_rest) {
            var TMP_9, TMP_from_hash_12, TMP_from_array_13, TMP_from_json_14, TMP_initialize_17, TMP_clone_18, TMP_dup_19, TMP_mutation_count_20, TMP_mutation_count$eq_21, TMP_mutable$q_22, TMP_to_mutable_in_situ_23, TMP_to_mutable_24, TMP_to_immutable_25, TMP_replicate_26, TMP_to_a_27, TMP_to_h_29, TMP_to_json_31, self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            $send(args, 'each', [], (TMP_9 = function(attr){var self = TMP_9.$$s || this, TMP_10, TMP_11, index = nil, writer = nil;
if (attr == null) attr = nil;
            
              attr = attr.$to_sym();
              if ($truthy(self.$attrs()['$include?'](attr))) {
                return nil
                } else {
                
                index = self.$attrs().$size();
                self.$attrs()['$<<'](attr);
                $send(self, 'define_method', [attr], (TMP_10 = function(){var self = TMP_10.$$s || this;
                  if (self.values == null) self.values = nil;

                return self.values['$[]'](index)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10));
                writer = "" + (attr) + "=";
                return $send(self, 'define_method', [writer], (TMP_11 = function(value){var self = TMP_11.$$s || this, $writer = nil;
                  if (self.mutable == null) self.mutable = nil;
                  if (self.values == null) self.values = nil;
if (value == null) value = nil;
                
                  if ($truthy(self.mutable)) {
                    } else {
                    self.$raise(Opal.const_get_relative($nesting, 'RuntimeError'), "" + "##" + (writer) + " only permitted in mutate! block")
                  };
                  
                  $writer = [index, value];
                  $send(self.values, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
              };}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
            Opal.defs(self, '$from_hash', TMP_from_hash_12 = function $$from_hash(hash, mutable) {
              var self = this;

              if (mutable == null) {
                mutable = false;
              }
              return self.$new(hash, mutable)
            }, TMP_from_hash_12.$$arity = -2);
            Opal.defs(self, '$from_array', TMP_from_array_13 = function $$from_array(array, mutable) {
              var self = this;

              if (mutable == null) {
                mutable = false;
              }
              return self.$new(array, mutable)
            }, TMP_from_array_13.$$arity = -2);
            Opal.defs(self, '$from_json', TMP_from_json_14 = function $$from_json(string, mutable) {
              var self = this, hash = nil;

              if (mutable == null) {
                mutable = false;
              }
              
              hash = Opal.const_get_relative($nesting, 'JSON').$parse(string);
              return self.$new(hash, mutable);
            }, TMP_from_json_14.$$arity = -2);
            
            Opal.def(self, '$initialize', TMP_initialize_17 = function $$initialize(seed, mutable) {
              var TMP_15, TMP_16, self = this, attrs = nil;

              if (seed == null) {
                seed = nil;
              }
              if (mutable == null) {
                mutable = false;
              }
              
              self.mutable = mutable;
              attrs = self.$class().$attrs();
              self.values = Opal.const_get_relative($nesting, 'Array').$new(attrs.$size());
              if ($truthy(seed['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
                return $send(seed, 'each', [], (TMP_15 = function(key, value){var self = TMP_15.$$s || this, index = nil, $writer = nil;
                  if (self.values == null) self.values = nil;
if (key == null) key = nil;if (value == null) value = nil;
                
                  key = key.$to_sym();
                  index = attrs.$find_index(key);
                  if ($truthy(index)) {
                    } else {
                    self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (key) + " is not an attribute of " + (self.$class().$name()))
                  };
                  
                  $writer = [index, value];
                  $send(self.values, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15))
              } else if ($truthy(seed['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
                
                if (seed.$size()['$=='](attrs.$size())) {
                  } else {
                  self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "seed array size should be same as number of attributes")
                };
                return $send(seed, 'each_with_index', [], (TMP_16 = function(value, index){var self = TMP_16.$$s || this, $writer = nil;
                  if (self.values == null) self.values = nil;
if (value == null) value = nil;if (index == null) index = nil;
                
                  $writer = [index, value];
                  $send(self.values, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16));
              } else if ($truthy(seed['$nil?']())) {
                return nil
                } else {
                return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "seed for " + (self.$class().$name()) + " must be an array, hash or nil")
              };
            }, TMP_initialize_17.$$arity = -1);
            
            Opal.def(self, '$clone', TMP_clone_18 = function $$clone() {
              var self = this, $iter = TMP_clone_18.$$p, $yield = $iter || nil, c = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;
              if (self.values == null) self.values = nil;

              if ($iter) TMP_clone_18.$$p = null;
              // Prepare super implicit arguments
              for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              
              c = $send(self, Opal.find_super_dispatcher(self, 'clone', TMP_clone_18, false), $zuper, $iter);
              c.$instance_variable_set("@values", self.values.$clone());
              return c;
            }, TMP_clone_18.$$arity = 0);
            
            Opal.def(self, '$dup', TMP_dup_19 = function $$dup() {
              var self = this, $iter = TMP_dup_19.$$p, $yield = $iter || nil, c = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;
              if (self.values == null) self.values = nil;

              if ($iter) TMP_dup_19.$$p = null;
              // Prepare super implicit arguments
              for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              
              c = $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_dup_19, false), $zuper, $iter);
              c.$instance_variable_set("@values", self.values.$dup());
              return c;
            }, TMP_dup_19.$$arity = 0);
            
            Opal.def(self, '$mutation_count', TMP_mutation_count_20 = function $$mutation_count() {
              var $a, self = this;
              if (self.mutation_count == null) self.mutation_count = nil;

              return (self.mutation_count = ($truthy($a = self.mutation_count) ? $a : 0))
            }, TMP_mutation_count_20.$$arity = 0);
            
            Opal.def(self, '$mutation_count=', TMP_mutation_count$eq_21 = function(value) {
              var self = this;

              return (self.mutation_count = value)
            }, TMP_mutation_count$eq_21.$$arity = 1);
            
            Opal.def(self, '$mutable?', TMP_mutable$q_22 = function() {
              var self = this;
              if (self.mutable == null) self.mutable = nil;

              return self.mutable
            }, TMP_mutable$q_22.$$arity = 0);
            
            Opal.def(self, '$to_mutable_in_situ', TMP_to_mutable_in_situ_23 = function $$to_mutable_in_situ() {
              var self = this;

              return (self.mutable = true)
            }, TMP_to_mutable_in_situ_23.$$arity = 0);
            
            Opal.def(self, '$to_mutable', TMP_to_mutable_24 = function $$to_mutable() {
              var self = this, m = nil;

              
              m = self.$dup();
              m.$instance_variable_set("@mutable", true);
              return m;
            }, TMP_to_mutable_24.$$arity = 0);
            
            Opal.def(self, '$to_immutable', TMP_to_immutable_25 = function $$to_immutable() {
              var self = this;

              
              self.mutable = false;
              return self;
            }, TMP_to_immutable_25.$$arity = 0);
            
            Opal.def(self, '$replicate', TMP_replicate_26 = function $$replicate() {
              var self = this;
              if (self.mutable == null) self.mutable = nil;

              return self.$class().$from_array(self.$to_a(), self.mutable)
            }, TMP_replicate_26.$$arity = 0);
            
            Opal.def(self, '$to_a', TMP_to_a_27 = function $$to_a() {
              var self = this;
              if (self.values == null) self.values = nil;

              return $send(self.values, 'map', [], "dup".$to_proc())
            }, TMP_to_a_27.$$arity = 0);
            
            Opal.def(self, '$to_h', TMP_to_h_29 = function $$to_h() {
              var TMP_28, self = this, result = nil;

              
              result = $hash2([], {});
              $send(self.$class().$attrs(), 'each_with_index', [], (TMP_28 = function(attr, index){var self = TMP_28.$$s || this, $writer = nil;
                if (self.values == null) self.values = nil;
if (attr == null) attr = nil;if (index == null) index = nil;
              
                $writer = [attr, self.values['$[]'](index).$dup()];
                $send(result, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_28.$$s = self, TMP_28.$$arity = 2, TMP_28));
              return result;
            }, TMP_to_h_29.$$arity = 0);
            return (Opal.def(self, '$to_json', TMP_to_json_31 = function $$to_json() {
              var TMP_30, self = this, hash = nil;

              
              hash = $hash2([], {});
              $send(self.$class().$attrs(), 'each_with_index', [], (TMP_30 = function(attr, index){var self = TMP_30.$$s || this, $writer = nil;
                if (self.values == null) self.values = nil;
if (attr == null) attr = nil;if (index == null) index = nil;
              
                $writer = [attr, self.values['$[]'](index)];
                $send(hash, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_30.$$s = self, TMP_30.$$arity = 2, TMP_30));
              return hash.$to_json();
            }, TMP_to_json_31.$$arity = 0), nil) && 'to_json';
          }, TMP_State_attr_32.$$arity = -1);
        })($nesting[0], null, $nesting);
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_state_class_33, TMP_attr_37;

          
          
          Opal.defn(self, '$state_class', TMP_state_class_33 = function $$state_class() {
            var $a, self = this;
            if (self.state_class == null) self.state_class = nil;

            return (self.state_class = ($truthy($a = self.state_class) ? $a : Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'State'))))
          }, TMP_state_class_33.$$arity = 0);
          return (Opal.defn(self, '$attr', TMP_attr_37 = function $$attr($a_rest) {
            var TMP_34, self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            $send(self.$state_class(), 'attr', Opal.to_a(args));
            return $send(args, 'each', [], (TMP_34 = function(arg){var self = TMP_34.$$s || this, TMP_35, TMP_36, writer = nil;
if (arg == null) arg = nil;
            
              $send(self, 'define_method', [arg], (TMP_35 = function(){var self = TMP_35.$$s || this;
                if (self.state == null) self.state = nil;

              return self.state.$send(arg)}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35));
              writer = "" + (arg) + "=";
              return $send(self, 'define_method', [writer], (TMP_36 = function(value){var self = TMP_36.$$s || this;
                if (self.state == null) self.state = nil;
if (value == null) value = nil;
              if ($truthy(self.state['$mutable?']())) {
                  return self.state.$send(writer, value)
                  } else {
                  return self['$mutate!']($hash(arg, value))
                }}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));
          }, TMP_attr_37.$$arity = -1), nil) && 'attr';
        })(Opal.get_singleton_class(self), $nesting);
        
        Opal.defn(self, '$initialize', TMP_Atom_initialize_38 = function $$initialize($kwargs) {
          var self = this, seed;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          seed = Opal.kwrestargs($kwargs, {});
          
          self.state = self.$class().$state_class().$new(seed);
          self.observer_id = 0;
          return (self.observers = []);
        }, TMP_Atom_initialize_38.$$arity = -1);
        
        Opal.defn(self, '$to_h', TMP_Atom_to_h_39 = function $$to_h() {
          var self = this;

          return self.state.$to_h()
        }, TMP_Atom_to_h_39.$$arity = 0);
        
        Opal.defn(self, '$mutation_count', TMP_Atom_mutation_count_40 = function $$mutation_count() {
          var self = this;

          return self.state.$mutation_count()
        }, TMP_Atom_mutation_count_40.$$arity = 0);
        
        Opal.defn(self, '$mutation_count=', TMP_Atom_mutation_count$eq_41 = function(value) {
          var self = this, $writer = nil;

          
          $writer = [value];
          $send(self.state, 'mutation_count=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_Atom_mutation_count$eq_41.$$arity = 1);
        
        Opal.defn(self, '$clone', TMP_Atom_clone_42 = function $$clone() {
          var self = this, $iter = TMP_Atom_clone_42.$$p, $yield = $iter || nil, c = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_Atom_clone_42.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          c = $send(self, Opal.find_super_dispatcher(self, 'clone', TMP_Atom_clone_42, false), $zuper, $iter);
          c.$instance_variable_set("@state", self.state.$clone());
          return c;
        }, TMP_Atom_clone_42.$$arity = 0);
        
        Opal.defn(self, '$dup', TMP_Atom_dup_43 = function $$dup() {
          var self = this, $iter = TMP_Atom_dup_43.$$p, $yield = $iter || nil, d = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_Atom_dup_43.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          d = $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_Atom_dup_43, false), $zuper, $iter);
          d.$instance_variable_set("@state", self.state.$dup());
          return d;
        }, TMP_Atom_dup_43.$$arity = 0);
        
        Opal.defn(self, '$snapshot', TMP_Atom_snapshot_44 = function $$snapshot() {
          var self = this;

          return self.$dup()
        }, TMP_Atom_snapshot_44.$$arity = 0);
        
        Opal.defn(self, '$copy!', TMP_Atom_copy$B_45 = function(other_atom) {
          var self = this, prior = nil;

          
          if (other_atom.$class()['$=='](self.$class())) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "can only copy atom of same class")
          };
          prior = self.$snapshot();
          self.state = other_atom.$instance_variable_get("@state").$replicate().$to_immutable();
          return self.$broadcast(prior);
        }, TMP_Atom_copy$B_45.$$arity = 1);
        
        Opal.defn(self, '$mutate_dup!', TMP_Atom_mutate_dup$B_46 = function(attr, method, $a_rest) {
          var self = this, args, $iter = TMP_Atom_mutate_dup$B_46.$$p, block = $iter || nil, dup = nil;

          if (method == null) {
            method = nil;
          }
          var $args_len = arguments.length, $rest_len = $args_len - 2;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 2] = arguments[$arg_idx];
          }
          if ($iter) TMP_Atom_mutate_dup$B_46.$$p = null;
          
          dup = self.$send(attr).$dup();
          if ($truthy(method)) {
            $send(dup, 'send', [method].concat(Opal.to_a(args)))};
          if ($truthy(block)) {
            block.$call(dup)};
          return self.$send("" + (attr) + "=", dup);
        }, TMP_Atom_mutate_dup$B_46.$$arity = -2);
        
        Opal.defn(self, '$initialize!', TMP_Atom_initialize$B_47 = function($kwargs) {
          var TMP_48, self = this, values, $iter = TMP_Atom_initialize$B_47.$$p, block = $iter || nil, prior_mutable = nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          values = Opal.kwrestargs($kwargs, {});
          if ($iter) TMP_Atom_initialize$B_47.$$p = null;
          
          prior_mutable = self.state['$mutable?']();
          self.state.$to_mutable_in_situ();
          $send(values, 'each', [], (TMP_48 = function(attr, value){var self = TMP_48.$$s || this;
            if (self.state == null) self.state = nil;
if (attr == null) attr = nil;if (value == null) value = nil;
          return self.state.$send("" + (attr) + "=", value)}, TMP_48.$$s = self, TMP_48.$$arity = 2, TMP_48));
          if ($truthy(block)) {
            block.$call()};
          if ($truthy(prior_mutable)) {
            } else {
            self.state = self.state.$to_immutable()
          };
          return self;
        }, TMP_Atom_initialize$B_47.$$arity = -1);
        
        Opal.defn(self, '$mutate!', TMP_Atom_mutate$B_49 = function($kwargs) {
          var TMP_50, self = this, values, $iter = TMP_Atom_mutate$B_49.$$p, block = $iter || nil, prior_mutable = nil, prior = nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          values = Opal.kwrestargs($kwargs, {});
          if ($iter) TMP_Atom_mutate$B_49.$$p = null;
          
          prior_mutable = self.state['$mutable?']();
          if ($truthy(prior_mutable)) {
            } else {
            
            prior = self.$snapshot();
            self.state = self.state.$to_mutable();
          };
          $send(values, 'each', [], (TMP_50 = function(attr, value){var self = TMP_50.$$s || this;
            if (self.state == null) self.state = nil;
if (attr == null) attr = nil;if (value == null) value = nil;
          return self.state.$send("" + (attr) + "=", value)}, TMP_50.$$s = self, TMP_50.$$arity = 2, TMP_50));
          if ($truthy(block)) {
            block.$call()};
          if ($truthy(prior_mutable)) {
            } else {
            
            self.state = self.state.$to_immutable();
            self.$broadcast(prior);
          };
          return self;
        }, TMP_Atom_mutate$B_49.$$arity = -1);
        
        Opal.defn(self, '$observe', TMP_Atom_observe_51 = function $$observe($kwargs) {
          var $a, self = this, attr, attrs, eval$, who, $iter = TMP_Atom_observe_51.$$p, block = $iter || nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          attr = $kwargs.$$smap["attr"];
          if (attr == null) {
            attr = nil
          }
          attrs = $kwargs.$$smap["attrs"];
          if (attrs == null) {
            attrs = nil
          }
          eval$ = $kwargs.$$smap["eval"];
          if (eval$ == null) {
            eval$ = nil
          }
          who = $kwargs.$$smap["who"];
          if (who == null) {
            who = nil
          }
          if ($iter) TMP_Atom_observe_51.$$p = null;
          
          if ($truthy(attr)) {
            (attrs = ($truthy($a = attrs) ? $a : []))['$<<'](attr)};
          who = ($truthy($a = who) ? $a : "unknown observer");
          self.observer_id = $rb_plus(self.observer_id, 1);
          self.observers['$<<']($hash2(["id", "who", "attrs", "eval", "callback", "terminated"], {"id": self.observer_id, "who": who, "attrs": attrs, "eval": eval$, "callback": block, "terminated": false}));
          return self.observer_id;
        }, TMP_Atom_observe_51.$$arity = -1);
        
        Opal.defn(self, '$unobserve', TMP_Atom_unobserve_53 = function $$unobserve(id) {
          var TMP_52, self = this, i = nil, $writer = nil;

          
          i = $send(self.observers, 'index', [], (TMP_52 = function(e){var self = TMP_52.$$s || this;
if (e == null) e = nil;
          return e['$[]']("id")['$=='](id)}, TMP_52.$$s = self, TMP_52.$$arity = 1, TMP_52));
          if ($truthy(i)) {
            
            $writer = ["terminated", true];
            $send(self.observers.$delete_at(i), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          };
        }, TMP_Atom_unobserve_53.$$arity = 1);
        
        Opal.defn(self, '$observer?', TMP_Atom_observer$q_55 = function(id) {
          var $a, TMP_54, self = this, observer = nil;

          return ($truthy($a = (observer = $send(self.observers, 'detect', [], (TMP_54 = function(e){var self = TMP_54.$$s || this;
if (e == null) e = nil;
          return e['$[]']("id")['$=='](id)}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54)))) ? observer['$[]']("terminated")['$!']() : $a)
        }, TMP_Atom_observer$q_55.$$arity = 1);
        self.$alias_method("subscribe", "observe");
        self.$alias_method("unsubscribe", "unobserve");
        self.$alias_method("subscriber?", "observer?");
        
        Opal.defn(self, '$state', TMP_Atom_state_56 = function $$state() {
          var self = this;

          return self
        }, TMP_Atom_state_56.$$arity = 0);
        
        Opal.defn(self, '$state_to_h', TMP_Atom_state_to_h_57 = function $$state_to_h() {
          var self = this;

          return self.state.$to_h()
        }, TMP_Atom_state_to_h_57.$$arity = 0);
        
        Opal.defn(self, '$state_to_a', TMP_Atom_state_to_a_58 = function $$state_to_a() {
          var self = this;

          return self.state.$to_a()
        }, TMP_Atom_state_to_a_58.$$arity = 0);
        
        Opal.defn(self, '$state_to_json', TMP_Atom_state_to_json_59 = function $$state_to_json() {
          var self = this;

          return self.state.$to_json()
        }, TMP_Atom_state_to_json_59.$$arity = 0);
        self.$protected();
        
        Opal.defn(self, '$broadcast', TMP_Atom_broadcast_62 = function $$broadcast(prior) {
          var TMP_60, self = this;

          
          self.$inc_mutation_count();
          return (function(){var $brk = Opal.new_brk(); try {return $send(self.observers, 'each', [], (TMP_60 = function(observer){var self = TMP_60.$$s || this, $a, TMP_61, attrs = nil, eval$ = nil, changed = nil;
if (observer == null) observer = nil;
          if ($truthy(observer['$[]']("terminated"))) {
              return nil
              } else {
              
              attrs = observer['$[]']("attrs");
              eval$ = observer['$[]']("eval");
              if ($truthy(($truthy($a = attrs) ? $a : eval$))) {
                
                changed = (function() {if ($truthy(eval$)) {
                  return eval$.$call(prior)['$!='](eval$.$call(self))
                  } else {
                  return false
                }; return nil; })();
                if ($truthy(($truthy($a = changed['$!']()) ? attrs : $a))) {
                  (function(){var $brk = Opal.new_brk(); try {return $send(attrs, 'each', [], (TMP_61 = function(attr){var self = TMP_61.$$s || this;
if (attr == null) attr = nil;
                  if ($truthy(prior.$send(attr)['$!='](self.$send(attr)))) {
                      
                      changed = true;
                      
                      Opal.brk(nil, $brk);
                      } else {
                      return nil
                    }}, TMP_61.$$s = self, TMP_61.$$brk = $brk, TMP_61.$$arity = 1, TMP_61))
                  } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()};
                } else {
                changed = true
              };
              if ($truthy(changed)) {
                return observer['$[]']("callback").$call(prior)
                } else {
                return nil
              };
            }}, TMP_60.$$s = self, TMP_60.$$brk = $brk, TMP_60.$$arity = 1, TMP_60))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        }, TMP_Atom_broadcast_62.$$arity = 1);
        return (Opal.defn(self, '$inc_mutation_count', TMP_Atom_inc_mutation_count_63 = function $$inc_mutation_count() {
          var self = this, $writer = nil;

          
          $writer = [$rb_plus(self.$mutation_count(), 1)];
          $send(self, 'mutation_count=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_Atom_inc_mutation_count_63.$$arity = 0), nil) && 'inc_mutation_count';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/router"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, $range = Opal.range, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$attr', '$reject', '$split', '$to_proc', '$>', '$size', '$==', '$[]', '$last', '$pop', '$each', '$!', '$empty?', '$[]=', '$-', '$+', '$join', '$trace', '$first', '$parse', '$to_h', '$navigate_to', '$path', '$location', '$path_and_params', '$params', '$window', '$history', '$href', '$mutate!', '$search', '$push', '$to_s', '$now', '$reload', '$alias_method', '$back', '$forward', '$private', '$class']);
  
  self.$require("robe/client/browser/browser_ext");
  self.$require("robe/common/trace");
  self.$require("robe/common/state/atom");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Router(){};
        var self = $Router = $klass($base, $super, 'Router', $Router);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Router_parse_2, TMP_Router_initialize_3, TMP_Router_initialize_deprecated_4, TMP_Router_to_s_5, TMP_Router_path_and_params_6, TMP_Router_window_7, TMP_Router_location_8, TMP_Router_history_9, TMP_Router_url_10, TMP_Router_update_11, TMP_Router_navigate_to_12, TMP_Router_reload_root_13, TMP_Router_back_14, TMP_Router_forward_15, TMP_Router_parse_16;

        
        self.$attr("path");
        self.$attr("params");
        Opal.defs(self, '$parse', TMP_Router_parse_2 = function $$parse(path) {
          var $a, TMP_1, self = this, parts = nil, params = nil, param_s = nil;

          
          parts = $send(path.$split("/"), 'reject', [], "empty?".$to_proc());
          params = $hash2([], {});
          if ($truthy(($truthy($a = $rb_gt(parts.$size(), 1)) ? parts.$last()['$[]'](0)['$==']("?") : $a))) {
            
            param_s = parts.$pop();
            param_s = param_s['$[]']($range(1, -1, false));
            $send(param_s.$split("&"), 'each', [], (TMP_1 = function(param){var self = TMP_1.$$s || this, $b, $c, key = nil, value = nil, $writer = nil;
if (param == null) param = nil;
            
              $c = param.$split("="), $b = Opal.to_ary($c), (key = ($b[0] == null ? nil : $b[0])), (value = ($b[1] == null ? nil : $b[1])), $c;
              if ($truthy(($truthy($b = ($truthy($c = key) ? value : $c)) ? key['$empty?']()['$!']() : $b))) {
                
                $writer = [key, value];
                $send(params, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                } else {
                return nil
              };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));};
          path = $rb_plus("/", parts.$join("/"));
          return $hash2(["path", "params"], {"path": path, "params": params});
        }, TMP_Router_parse_2.$$arity = 1);
        
        Opal.defn(self, '$initialize', TMP_Router_initialize_3 = function $$initialize(url) {
          var self = this, $iter = TMP_Router_initialize_3.$$p, $yield = $iter || nil, hash = nil, args = nil, parts = nil;

          if (url == null) {
            url = "";
          }
          if ($iter) TMP_Router_initialize_3.$$p = null;
          
          self.$trace("robe/client/router", 66, self, "initialize", "" + "url=" + (url));
          hash = url.$split("#").$last();
          args = $hash2(["path", "params"], {"path": "/", "params": $hash2([], {})});
          if ($truthy(hash)) {
            
            parts = hash.$split("=");
            if (parts.$first()['$==']("route")) {
              args = self.$parse(parts.$last())};};
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Router_initialize_3, false), [Opal.to_hash(args)], null);
          self.$trace("robe/client/router", 76, self, "initialize", "" + " self=" + (self.$to_h()));
          return self.$navigate_to(self.$path());
        }, TMP_Router_initialize_3.$$arity = -1);
        
        Opal.defn(self, '$initialize_deprecated', TMP_Router_initialize_deprecated_4 = function $$initialize_deprecated() {
          var self = this, $iter = TMP_Router_initialize_deprecated_4.$$p, $yield = $iter || nil;

          if ($iter) TMP_Router_initialize_deprecated_4.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize_deprecated', TMP_Router_initialize_deprecated_4, false), [Opal.to_hash(self.$parse(self.$location().$path()))], null);
          return self.$navigate_to("/");
        }, TMP_Router_initialize_deprecated_4.$$arity = 0);
        
        Opal.defn(self, '$to_s', TMP_Router_to_s_5 = function $$to_s() {
          var self = this;

          return self.$path_and_params()
        }, TMP_Router_to_s_5.$$arity = 0);
        
        Opal.defn(self, '$path_and_params', TMP_Router_path_and_params_6 = function $$path_and_params() {
          var self = this;

          return "" + (self.$path()) + ":" + (self.$params())
        }, TMP_Router_path_and_params_6.$$arity = 0);
        
        Opal.defn(self, '$window', TMP_Router_window_7 = function $$window() {
          var self = this;

          return Opal.const_get_qualified('::', 'Browser').$window()
        }, TMP_Router_window_7.$$arity = 0);
        
        Opal.defn(self, '$location', TMP_Router_location_8 = function $$location() {
          var self = this;

          return self.$window().$location()
        }, TMP_Router_location_8.$$arity = 0);
        
        Opal.defn(self, '$history', TMP_Router_history_9 = function $$history() {
          var self = this;

          return self.$window().$history()
        }, TMP_Router_history_9.$$arity = 0);
        
        Opal.defn(self, '$url', TMP_Router_url_10 = function $$url() {
          var self = this;

          return self.$location().$href()
        }, TMP_Router_url_10.$$arity = 0);
        
        Opal.defn(self, '$update', TMP_Router_update_11 = function $$update() {
          var self = this;

          return self['$mutate!'](Opal.to_hash(self.$parse("" + (self.$location().$path()) + (self.$location().$search()))))
        }, TMP_Router_update_11.$$arity = 0);
        
        Opal.defn(self, '$navigate_to', TMP_Router_navigate_to_12 = function $$navigate_to(path) {
          var self = this;

          
          self.$history().$push(path, $hash2(["state"], {"state": "dummy_state"}), Opal.const_get_relative($nesting, 'Time').$now().$to_s());
          return self['$mutate!'](Opal.to_hash(self.$parse(path)));
        }, TMP_Router_navigate_to_12.$$arity = 1);
        
        Opal.defn(self, '$reload_root', TMP_Router_reload_root_13 = function $$reload_root() {
          var self = this;

          
          self.$navigate_to("/");
          return self.$location().$reload(true);
        }, TMP_Router_reload_root_13.$$arity = 0);
        self.$alias_method("redirect_to", "navigate_to");
        
        Opal.defn(self, '$back', TMP_Router_back_14 = function $$back() {
          var self = this;

          return self.$history().$back()
        }, TMP_Router_back_14.$$arity = 0);
        
        Opal.defn(self, '$forward', TMP_Router_forward_15 = function $$forward() {
          var self = this;

          return self.$history().$forward()
        }, TMP_Router_forward_15.$$arity = 0);
        self.$private();
        return (Opal.defn(self, '$parse', TMP_Router_parse_16 = function $$parse(path) {
          var self = this;

          return self.$class().$parse(path)
        }, TMP_Router_parse_16.$$arity = 1), nil) && 'parse';
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Atom'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["json"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_JSON_$$_1, TMP_JSON_parse_2, TMP_JSON_parse$B_3, TMP_JSON_load_4, TMP_JSON_from_object_5, TMP_JSON_generate_6, TMP_JSON_dump_7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      function $JSONError(){};
      var self = $JSONError = $klass($base, $super, 'JSONError', $JSONError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ParserError(){};
      var self = $ParserError = $klass($base, $super, 'ParserError', $ParserError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]'](Opal.const_get_relative($nesting, 'JSON').$create_id())) != nil) {
              return Opal.const_get_qualified('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', TMP_JSON_$$_1 = function(value, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      }
    }, TMP_JSON_$$_1.$$arity = -2);
    Opal.defs(self, '$parse', TMP_JSON_parse_2 = function $$parse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})))
    }, TMP_JSON_parse_2.$$arity = -2);
    Opal.defs(self, '$parse!', TMP_JSON_parse$B_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options)
    }, TMP_JSON_parse$B_3.$$arity = -2);
    Opal.defs(self, '$load', TMP_JSON_load_4 = function $$load(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options)
    }, TMP_JSON_load_4.$$arity = -2);
    Opal.defs(self, '$from_object', TMP_JSON_from_object_5 = function $$from_object(js_object, options) {
      var $a, self = this, $writer = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      
      ($truthy($a = options['$[]']("object_class")) ? $a : (($writer = ["object_class", Opal.const_get_relative($nesting, 'Hash')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      ($truthy($a = options['$[]']("array_class")) ? $a : (($writer = ["array_class", Opal.const_get_relative($nesting, 'Array')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return to_opal(js_object, options.$$smap);
    }, TMP_JSON_from_object_5.$$arity = -2);
    Opal.defs(self, '$generate', TMP_JSON_generate_6 = function $$generate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options)
    }, TMP_JSON_generate_6.$$arity = -2);
    Opal.defs(self, '$dump', TMP_JSON_dump_7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_JSON_dump_7.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_json_8;

    return (Opal.defn(self, '$to_json', TMP_Object_to_json_8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Object_to_json_8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_json_9;

    
    Opal.defn(self, '$to_json', TMP_Enumerable_to_json_9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, TMP_Enumerable_to_json_9.$$arity = 0)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_json_10;

    return (Opal.defn(self, '$to_json', TMP_Array_to_json_10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_Array_to_json_10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_json_11;

    return (Opal.defn(self, '$to_json', TMP_Boolean_to_json_11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false'
    }, TMP_Boolean_to_json_11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_to_json_12;

    return (Opal.defn(self, '$to_json', TMP_Hash_to_json_12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    
    }, TMP_Hash_to_json_12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_json_13;

    return (Opal.defn(self, '$to_json', TMP_NilClass_to_json_13 = function $$to_json() {
      var self = this;

      return "null"
    }, TMP_NilClass_to_json_13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_json_14;

    return (Opal.defn(self, '$to_json', TMP_Numeric_to_json_14 = function $$to_json() {
      var self = this;

      return self.toString()
    }, TMP_Numeric_to_json_14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return Opal.alias(self, "to_json", "inspect")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_json_15;

    return (Opal.defn(self, '$to_json', TMP_Time_to_json_15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, TMP_Time_to_json_15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Date_to_json_16, TMP_Date_as_json_17;

    
    
    Opal.defn(self, '$to_json', TMP_Date_to_json_16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Date_to_json_16.$$arity = 0);
    return (Opal.defn(self, '$as_json', TMP_Date_as_json_17 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, TMP_Date_as_json_17.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/sockets"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$task_channel', '$pubsub_channel', '$chat_channel']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Sockets, self = $Sockets = $module($base, 'Sockets');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Sockets_task_channel_1, TMP_Sockets_pubsub_channel_2, TMP_Sockets_chat_channel_3, TMP_Sockets_channels_4;

      
      
      Opal.defn(self, '$task_channel', TMP_Sockets_task_channel_1 = function $$task_channel() {
        var self = this;

        return "tasks"
      }, TMP_Sockets_task_channel_1.$$arity = 0);
      
      Opal.defn(self, '$pubsub_channel', TMP_Sockets_pubsub_channel_2 = function $$pubsub_channel() {
        var self = this;

        return "pubsub"
      }, TMP_Sockets_pubsub_channel_2.$$arity = 0);
      
      Opal.defn(self, '$chat_channel', TMP_Sockets_chat_channel_3 = function $$chat_channel() {
        var self = this;

        return "chat"
      }, TMP_Sockets_chat_channel_3.$$arity = 0);
      
      Opal.defn(self, '$channels', TMP_Sockets_channels_4 = function $$channels() {
        var $a, self = this;
        if (self.channels == null) self.channels = nil;

        return (self.channels = ($truthy($a = self.channels) ? $a : [self.$task_channel(), self.$pubsub_channel(), self.$chat_channel()]))
      }, TMP_Sockets_channels_4.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/websocket/incoming_message"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$parse', '$data']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Browser, self = $Browser = $module($base, 'Browser');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $WebSocket(){};
          var self = $WebSocket = $klass($base, $super, 'WebSocket', $WebSocket);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          return (function($base, $super, $parent_nesting) {
            function $IncomingMessage(){};
            var self = $IncomingMessage = $klass($base, $super, 'IncomingMessage', $IncomingMessage);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IncomingMessage_initialize_1, TMP_IncomingMessage_data_2, TMP_IncomingMessage_parse_3;

            def.native_event = nil;
            
            
            Opal.defn(self, '$initialize', TMP_IncomingMessage_initialize_1 = function $$initialize(native_event) {
              var self = this;

              return (self.native_event = native_event)
            }, TMP_IncomingMessage_initialize_1.$$arity = 1);
            
            Opal.defn(self, '$data', TMP_IncomingMessage_data_2 = function $$data() {
              var self = this;

              return self.native_event.data
            }, TMP_IncomingMessage_data_2.$$arity = 0);
            return (Opal.defn(self, '$parse', TMP_IncomingMessage_parse_3 = function $$parse() {
              var self = this;

              return Opal.const_get_relative($nesting, 'JSON').$parse(self.$data())
            }, TMP_IncomingMessage_parse_3.$$arity = 0), nil) && 'parse';
          })($nesting[0], null, $nesting)
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/websocket/close_event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$class', '$code', '$reason', '$clean?', '$!']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Browser, self = $Browser = $module($base, 'Browser');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $WebSocket(){};
          var self = $WebSocket = $klass($base, $super, 'WebSocket', $WebSocket);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          return (function($base, $super, $parent_nesting) {
            function $CloseEvent(){};
            var self = $CloseEvent = $klass($base, $super, 'CloseEvent', $CloseEvent);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CloseEvent_initialize_1, TMP_CloseEvent_to_s_2, TMP_CloseEvent_clean$q_3;

            def["native"] = def.clean = nil;
            
            self.$attr_reader("code", "reason");
            
            Opal.defn(self, '$initialize', TMP_CloseEvent_initialize_1 = function $$initialize(native$) {
              var self = this;

              
              self["native"] = native$;
              self.code = self["native"].code;
              self.reason = self["native"].reason;
              return (self.clean = self["native"].wasClean);
            }, TMP_CloseEvent_initialize_1.$$arity = 1);
            
            Opal.defn(self, '$to_s', TMP_CloseEvent_to_s_2 = function $$to_s() {
              var self = this;

              return "" + (self.$class()) + " : code " + (self.$code()) + " : reason " + (self.$reason()) + " : clean? " + (self['$clean?']())
            }, TMP_CloseEvent_to_s_2.$$arity = 0);
            return (Opal.defn(self, '$clean?', TMP_CloseEvent_clean$q_3 = function() {
              var self = this;

              return self.clean['$!']()['$!']()
            }, TMP_CloseEvent_clean$q_3.$$arity = 0), nil) && 'clean?';
          })($nesting[0], null, $nesting)
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/websocket"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$trace', '$init_handlers', '$connect!', '$generate', '$to_sym', '$include?', '$<<', '$[]', '$warn', '$logger', '$name', '$class', '$private', '$[]=', '$-', '$on', '$notify_web_socket_error', '$state', '$each', '$map', '$to_proc', '$call']);
  
  self.$require("json");
  self.$require("robe/common/sockets");
  self.$require("robe/client/browser/websocket/incoming_message");
  self.$require("robe/client/browser/websocket/close_event");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Browser, self = $Browser = $module($base, 'Browser');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $WebSocket(){};
          var self = $WebSocket = $klass($base, $super, 'WebSocket', $WebSocket);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_WebSocket_instance_1, TMP_WebSocket_initialize_2, TMP_WebSocket_send_message_3, TMP_WebSocket_on_4, TMP_WebSocket_connected$q_5, TMP_WebSocket_close_6, TMP_WebSocket_init_handlers_11, TMP_WebSocket_connect$B_14;

          def["native"] = def.handlers = def.connected = def.url = nil;
          
          Opal.const_set($nesting[0], 'EVENT_NAMES', ["open", "error", "message", "close"]);
          Opal.defs(self, '$instance', TMP_WebSocket_instance_1 = function $$instance(url) {
            var $a, self = this;
            if (self.instance == null) self.instance = nil;

            return (self.instance = ($truthy($a = self.instance) ? $a : self.$new(url)))
          }, TMP_WebSocket_instance_1.$$arity = 1);
          
          Opal.defn(self, '$initialize', TMP_WebSocket_initialize_2 = function $$initialize(url, $kwargs) {
            var self = this, auto_reconnect;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            auto_reconnect = $kwargs.$$smap["auto_reconnect"];
            if (auto_reconnect == null) {
              auto_reconnect = true
            }
            
            self.$trace("robe/client/browser/websocket", 33, self, "initialize", "" + " url='" + (url) + "' auto_reconnect=" + (auto_reconnect));
            self.url = url;
            self.auto_reconnect = auto_reconnect;
            self.$init_handlers();
            return self['$connect!']();
          }, TMP_WebSocket_initialize_2.$$arity = -2);
          
          Opal.defn(self, '$send_message', TMP_WebSocket_send_message_3 = function $$send_message(message) {
            var self = this, json = nil;

            
            json = Opal.const_get_relative($nesting, 'JSON').$generate(message);
            self["native"].send(json);
            return self;
          }, TMP_WebSocket_send_message_3.$$arity = 1);
          
          Opal.defn(self, '$on', TMP_WebSocket_on_4 = function $$on(event_name) {
            var self = this, $iter = TMP_WebSocket_on_4.$$p, block = $iter || nil;

            if ($iter) TMP_WebSocket_on_4.$$p = null;
            
            event_name = event_name.$to_sym();
            if ($truthy(Opal.const_get_relative($nesting, 'EVENT_NAMES')['$include?'](event_name))) {
              return self.handlers['$[]'](event_name)['$<<'](block)
              } else {
              return Opal.const_get_relative($nesting, 'Robe').$logger().$warn("" + (self.$class().$name()) + " : " + (event_name) + " is not one of the allowed WebSocket events: " + (Opal.const_get_relative($nesting, 'EVENT_NAMES')))
            };
          }, TMP_WebSocket_on_4.$$arity = 1);
          
          Opal.defn(self, '$connected?', TMP_WebSocket_connected$q_5 = function() {
            var self = this;

            return self.connected
          }, TMP_WebSocket_connected$q_5.$$arity = 0);
          
          Opal.defn(self, '$close', TMP_WebSocket_close_6 = function $$close(reason) {
            var self = this;

            if (reason == null) {
              reason = undefined;
            }
            
            self.$trace("robe/client/browser/websocket", 67, self, "close", "" + " reason => " + (reason));
            return self["native"].close(reason);
          }, TMP_WebSocket_close_6.$$arity = -1);
          self.$private();
          
          Opal.defn(self, '$init_handlers', TMP_WebSocket_init_handlers_11 = function $$init_handlers() {
            var $a, TMP_7, TMP_8, TMP_9, TMP_10, self = this;

            
            self.handlers = ($truthy($a = self.handlers) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_7 = function(h, k){var self = TMP_7.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
            
              $writer = [k, []];
              $send(h, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7)));
            $send(self, 'on', ["open"], (TMP_8 = function(){var self = TMP_8.$$s || this;
              if (self.url == null) self.url = nil;

            
              self.$trace("robe/client/browser/websocket", 77, self, nil, "" + " websocket " + (self.url) + " : opened ");
              return (self.connected = true);}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));
            $send(self, 'on', ["close"], (TMP_9 = function(event){var self = TMP_9.$$s || this;
              if (self.url == null) self.url = nil;
              if ($gvars.app == null) $gvars.app = nil;
if (event == null) event = nil;
            
              self.$trace("robe/client/browser/websocket", 81, self, nil, "" + " websocket " + (self.url) + " : closed => " + (event));
              self.connected = false;
              return $gvars.app.$state().$notify_web_socket_error();}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
            return $send(self, 'on', ["error"], (TMP_10 = function(error){var self = TMP_10.$$s || this;
              if (self.url == null) self.url = nil;
if (error == null) error = nil;
            
              self.$trace("robe/client/browser/websocket", 105, self, nil, "" + " websocket " + (self.url) + " : error => " + (error) + " ");
              return (self.connected = false);}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
          }, TMP_WebSocket_init_handlers_11.$$arity = 0);
          return (Opal.defn(self, '$connect!', TMP_WebSocket_connect$B_14 = function() {
            var TMP_12, self = this;

            
            self["native"] = new WebSocket(self.url);
            self.$trace("robe/client/browser/websocket", 112, self, "connect!", "" + " : native => " + (self["native"]));
            return $send(Opal.const_get_relative($nesting, 'EVENT_NAMES'), 'each', [], (TMP_12 = function(event_name){var self = TMP_12.$$s || this, TMP_13;
              if (self["native"] == null) self["native"] = nil;
              if (self.handlers == null) self.handlers = nil;
if (event_name == null) event_name = nil;
            
              self.$trace("robe/client/browser/websocket", 114, self, nil, "" + " : adding event listener for " + (event_name) + " ");
              
          self["native"].addEventListener(event_name, function(event) {
            var ruby_event;

            if(event.constructor === CloseEvent) {
              rb_event = Opal.const_get_relative($nesting, 'CloseEvent').$new(event);
            } else if(event.constructor === MessageEvent) {
              rb_event = Opal.const_get_relative($nesting, 'IncomingMessage').$new(event);
            } else if(event.constructor === ErrorEvent) {
              rb_event = event;
            } else {
              rb_event = event;
            }
            (self.$trace("robe/client/browser/websocket", 129, self, nil, "" + " : event_name=" + (event_name) + " "), self.$trace("robe/client/browser/websocket", 130, self, nil, "" + " : event_name=" + (event_name) + " rb_event=" + (rb_event) + " handlers=" + ($send(self.handlers['$[]'](event_name), 'map', [], "class".$to_proc()))), $send(self.handlers['$[]'](event_name), 'each', [], (TMP_13 = function(handler){var self = TMP_13.$$s || this;
if (handler == null) handler = nil;
              return handler.$call(rb_event)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13)))
          });
        ;}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
          }, TMP_WebSocket_connect$B_14.$$arity = 0), nil) && 'connect!';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $truthy = Opal.truthy, $send = Opal.send, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$module_function', '$respond_to?', '$first_element', '$dom_root=', '$-', '$fail', '$name', '$class', '$__LINE_', '$DOM', '$alias_method', '$cursor', '$style', '$body', '$cursor=', '$to_proc', '$cursor_auto', '$animation_frame', '$window', '$browser', '$document', '$to_s', '$%']);
  
  self.$require("robe/client/browser/browser_ext");
  self.$require("robe/client/browser/websocket");
  (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Robe_browser_14, TMP_Robe_window_15, TMP_Robe_document_16;

    
    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Browser, self = $Browser = $module($base, 'Browser');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Browser_browser_1, TMP_Browser_document_2, TMP_Browser_window_3, TMP_Browser_dom_root_4, TMP_Browser_dom_root$eq_5, TMP_Browser_set_interval_6, TMP_Browser_set_timeout_7, TMP_Browser_clear_interval_8, TMP_Browser_cursor_9, TMP_Browser_cursor_wait_10, TMP_Browser_cursor_auto_11, TMP_Browser_cursor_normal_12, TMP_Browser_animate_13;

        
        self.$module_function();
        
        Opal.defn(self, '$browser', TMP_Browser_browser_1 = function $$browser() {
          var self = this;

          return self
        }, TMP_Browser_browser_1.$$arity = 0);
        
        Opal.defn(self, '$document', TMP_Browser_document_2 = function $$document() {
          var self = this;
          if ($gvars.document == null) $gvars.document = nil;

          return $gvars.document
        }, TMP_Browser_document_2.$$arity = 0);
        
        Opal.defn(self, '$window', TMP_Browser_window_3 = function $$window() {
          var self = this;
          if ($gvars.window == null) $gvars.window = nil;

          return $gvars.window
        }, TMP_Browser_window_3.$$arity = 0);
        
        Opal.defn(self, '$dom_root', TMP_Browser_dom_root_4 = function $$dom_root() {
          var self = this, $writer = nil;
          if (self.dom_root == null) self.dom_root = nil;

          
          if ($truthy(self.dom_root)) {
          } else if ($truthy(self['$respond_to?']("first_element"))) {
            
            $writer = [self.$first_element()];
            $send(self, 'dom_root=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            self.$fail("" + (self.$class().$name()) + "#" + ("dom_root") + ":" + (self.$__LINE_()) + " : dom_root= must be called first")
          };
          return self.dom_root;
        }, TMP_Browser_dom_root_4.$$arity = 0);
        
        Opal.defn(self, '$dom_root=', TMP_Browser_dom_root$eq_5 = function(element) {
          var self = this;

          return (self.dom_root = self.$DOM(element))
        }, TMP_Browser_dom_root$eq_5.$$arity = 1);
        
        Opal.defn(self, '$set_interval', TMP_Browser_set_interval_6 = function $$set_interval(milliseconds) {
          var self = this, $iter = TMP_Browser_set_interval_6.$$p, callback = $iter || nil;

          if ($iter) TMP_Browser_set_interval_6.$$p = null;
          return setInterval(callback, milliseconds)
        }, TMP_Browser_set_interval_6.$$arity = 1);
        self.$alias_method("every", "set_interval");
        
        Opal.defn(self, '$set_timeout', TMP_Browser_set_timeout_7 = function $$set_timeout(milliseconds) {
          var self = this, $iter = TMP_Browser_set_timeout_7.$$p, callback = $iter || nil;

          if ($iter) TMP_Browser_set_timeout_7.$$p = null;
          return setTimeout(callback, milliseconds)
        }, TMP_Browser_set_timeout_7.$$arity = 1);
        self.$alias_method("delay", "set_timeout");
        
        Opal.defn(self, '$clear_interval', TMP_Browser_clear_interval_8 = function $$clear_interval(interval) {
          var self = this;

          if ($truthy(interval)) {
            return clearInterval(interval)
            } else {
            return nil
          }
        }, TMP_Browser_clear_interval_8.$$arity = 1);
        
        Opal.defn(self, '$cursor', TMP_Browser_cursor_9 = function $$cursor(which) {
          var self = this, $iter = TMP_Browser_cursor_9.$$p, block = $iter || nil, current = nil, $writer = nil;
          if ($gvars.document == null) $gvars.document = nil;

          if ($iter) TMP_Browser_cursor_9.$$p = null;
          
          current = $gvars.document.$body().$style().$cursor();
          
          $writer = [which];
          $send($gvars.document.$body().$style(), 'cursor=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(block)) {
            
            Opal.yieldX(block, []);
            
            $writer = [current];
            $send($gvars.document.$body().$style(), 'cursor=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
            } else {
            return nil
          };
        }, TMP_Browser_cursor_9.$$arity = 1);
        
        Opal.defn(self, '$cursor_wait', TMP_Browser_cursor_wait_10 = function $$cursor_wait() {
          var self = this, $iter = TMP_Browser_cursor_wait_10.$$p, block = $iter || nil;

          if ($iter) TMP_Browser_cursor_wait_10.$$p = null;
          return $send(self, 'cursor', ["wait"], block.$to_proc())
        }, TMP_Browser_cursor_wait_10.$$arity = 0);
        
        Opal.defn(self, '$cursor_auto', TMP_Browser_cursor_auto_11 = function $$cursor_auto() {
          var self = this, $iter = TMP_Browser_cursor_auto_11.$$p, block = $iter || nil;

          if ($iter) TMP_Browser_cursor_auto_11.$$p = null;
          return $send(self, 'cursor', ["auto"], block.$to_proc())
        }, TMP_Browser_cursor_auto_11.$$arity = 0);
        
        Opal.defn(self, '$cursor_normal', TMP_Browser_cursor_normal_12 = function $$cursor_normal() {
          var self = this, $iter = TMP_Browser_cursor_normal_12.$$p, block = $iter || nil;

          if ($iter) TMP_Browser_cursor_normal_12.$$p = null;
          return $send(self, 'cursor_auto', [], block.$to_proc())
        }, TMP_Browser_cursor_normal_12.$$arity = 0);
        
        Opal.defn(self, '$animate', TMP_Browser_animate_13 = function $$animate() {
          var self = this, $iter = TMP_Browser_animate_13.$$p, block = $iter || nil;

          if ($iter) TMP_Browser_animate_13.$$p = null;
          return $send(self, 'animation_frame', [], block.$to_proc())
        }, TMP_Browser_animate_13.$$arity = 0);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
    self.$module_function();
    
    Opal.defn(self, '$browser', TMP_Robe_browser_14 = function $$browser() {
      var $a, self = this;
      if (self.browser == null) self.browser = nil;

      return (self.browser = ($truthy($a = self.browser) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Browser')))
    }, TMP_Robe_browser_14.$$arity = 0);
    
    Opal.defn(self, '$window', TMP_Robe_window_15 = function $$window() {
      var self = this;

      return self.$browser().$window()
    }, TMP_Robe_window_15.$$arity = 0);
    
    Opal.defn(self, '$document', TMP_Robe_document_16 = function $$document() {
      var self = this;

      return self.$browser().$document()
    }, TMP_Robe_document_16.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_html_17;

    return (Opal.defn(self, '$to_html', TMP_Object_to_html_17 = function $$to_html() {
      var self = this;

      return self.$to_s()
    }, TMP_Object_to_html_17.$$arity = 0), nil) && 'to_html'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_px_18, TMP_Numeric_em_19, TMP_Numeric_rem_20, TMP_Numeric_pc_21, TMP_Numeric_vh_22, TMP_Numeric_hex_23;

    
    
    Opal.defn(self, '$px', TMP_Numeric_px_18 = function $$px() {
      var self = this;

      return "" + (self) + "px"
    }, TMP_Numeric_px_18.$$arity = 0);
    
    Opal.defn(self, '$em', TMP_Numeric_em_19 = function $$em() {
      var self = this;

      return "" + (self) + "em"
    }, TMP_Numeric_em_19.$$arity = 0);
    
    Opal.defn(self, '$rem', TMP_Numeric_rem_20 = function $$rem() {
      var self = this;

      return "" + (self) + "rem"
    }, TMP_Numeric_rem_20.$$arity = 0);
    
    Opal.defn(self, '$pc', TMP_Numeric_pc_21 = function $$pc() {
      var self = this;

      return "" + (self) + "%"
    }, TMP_Numeric_pc_21.$$arity = 0);
    
    Opal.defn(self, '$vh', TMP_Numeric_vh_22 = function $$vh() {
      var self = this;

      return "" + (self) + "vh"
    }, TMP_Numeric_vh_22.$$arity = 0);
    return (Opal.defn(self, '$hex', TMP_Numeric_hex_23 = function $$hex() {
      var self = this;

      return "#%X"['$%'](self)
    }, TMP_Numeric_hex_23.$$arity = 0), nil) && 'hex';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/util/inflector"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var TMP_17, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$[]', '$new', '$[]=', '$-', '$attr_reader', '$each', '$instance_variable_set', '$dup', '$send', '$downcase', '$join', '$values', '$is_a?', '$delete', '$insert', '$==', '$upcase', '$plural', '$+', '$singular', '$flatten!', '$<<', '$===', '$instance', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$private', '$to_s', '$empty?', '$include?', '$uncountables', '$match', '$sub', '$irregular', '$uncountable']);
  
  (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Inflector, self = $Inflector = $module($base, 'Inflector');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inflector_inflections_12, TMP_Inflector_pluralize_13, TMP_Inflector_singularize_14, TMP_Inflector_apply_inflections_16;

      
      (function($base, $super, $parent_nesting) {
        function $Inflections(){};
        var self = $Inflections = $klass($base, $super, 'Inflections', $Inflections);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inflections_instance_1, TMP_Inflections_initialize_2, TMP_Inflections_initialize_dup_4, TMP_Inflections_acronym_5, TMP_Inflections_plural_6, TMP_Inflections_singular_7, TMP_Inflections_irregular_8, TMP_Inflections_uncountable_9, TMP_Inflections_human_10, TMP_Inflections_clear_11;

        def.acronyms = def.uncountables = def.plurals = def.singulars = def.humans = nil;
        
        self.__instance__ = $hash2([], {});
        Opal.defs(self, '$instance', TMP_Inflections_instance_1 = function $$instance(locale) {
          var $a, self = this, $writer = nil;
          if (self.__instance__ == null) self.__instance__ = nil;

          if (locale == null) {
            locale = "en";
          }
          return ($truthy($a = self.__instance__['$[]'](locale)) ? $a : (($writer = [locale, self.$new()]), $send(self.__instance__, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, TMP_Inflections_instance_1.$$arity = -1);
        self.$attr_reader("plurals", "singulars", "uncountables", "humans", "acronyms", "acronym_regex");
        
        Opal.defn(self, '$initialize', TMP_Inflections_initialize_2 = function $$initialize() {
          var self = this;

          
          self.plurals = [];
          self.singulars = [];
          self.uncountables = [];
          self.humans = [];
          self.acronyms = $hash2([], {});
          return (self.acronym_regex = /(?=a)b/);
        }, TMP_Inflections_initialize_2.$$arity = 0);
        
        Opal.defn(self, '$initialize_dup', TMP_Inflections_initialize_dup_4 = function $$initialize_dup(orig) {
          var TMP_3, self = this;

          return $send(["plurals", "singulars", "uncountables", "humans", "acronyms", "acronym_regex"], 'each', [], (TMP_3 = function(scope){var self = TMP_3.$$s || this;
if (scope == null) scope = nil;
          return self.$instance_variable_set("" + "@" + (scope), orig.$send(scope).$dup())}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
        }, TMP_Inflections_initialize_dup_4.$$arity = 1);
        
        Opal.defn(self, '$acronym', TMP_Inflections_acronym_5 = function $$acronym(word) {
          var self = this, $writer = nil;

          
          
          $writer = [word.$downcase(), word];
          $send(self.acronyms, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return (self.acronym_regex = new RegExp(self.acronyms.$values().$join("|")));
        }, TMP_Inflections_acronym_5.$$arity = 1);
        
        Opal.defn(self, '$plural', TMP_Inflections_plural_6 = function $$plural(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.plurals.$insert(0, [rule, replacement]);
        }, TMP_Inflections_plural_6.$$arity = 2);
        
        Opal.defn(self, '$singular', TMP_Inflections_singular_7 = function $$singular(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.singulars.$insert(0, [rule, replacement]);
        }, TMP_Inflections_singular_7.$$arity = 2);
        
        Opal.defn(self, '$irregular', TMP_Inflections_irregular_8 = function $$irregular(singular, plural) {
          var self = this, s0 = nil, srest = nil, p0 = nil, prest = nil;

          
          self.uncountables.$delete(singular);
          self.uncountables.$delete(plural);
          s0 = singular['$[]'](0);
          srest = singular['$[]']($range(1, -1, false));
          p0 = plural['$[]'](0);
          prest = plural['$[]']($range(1, -1, false));
          if (s0.$upcase()['$=='](p0.$upcase())) {
            
            self.$plural(new RegExp("" + "(" + (s0) + ")" + (srest) + "$", 'i'), $rb_plus("\\1", prest));
            self.$plural(new RegExp("" + "(" + (p0) + ")" + (prest) + "$", 'i'), $rb_plus("\\1", prest));
            self.$singular(new RegExp("" + "(" + (s0) + ")" + (srest) + "$", 'i'), $rb_plus("\\1", srest));
            return self.$singular(new RegExp("" + "(" + (p0) + ")" + (prest) + "$", 'i'), $rb_plus("\\1", srest));
            } else {
            
            self.$plural(new RegExp("" + (s0.$upcase()) + "(?i)" + (srest) + "$"), $rb_plus(p0.$upcase(), prest));
            self.$plural(new RegExp("" + (s0.$downcase()) + "(?i)" + (srest) + "$"), $rb_plus(p0.$downcase(), prest));
            self.$plural(new RegExp("" + (p0.$upcase()) + "(?i)" + (prest) + "$"), $rb_plus(p0.$upcase(), prest));
            self.$plural(new RegExp("" + (p0.$downcase()) + "(?i)" + (prest) + "$"), $rb_plus(p0.$downcase(), prest));
            self.$singular(new RegExp("" + (s0.$upcase()) + "(?i)" + (srest) + "$"), $rb_plus(s0.$upcase(), srest));
            self.$singular(new RegExp("" + (s0.$downcase()) + "(?i)" + (srest) + "$"), $rb_plus(s0.$downcase(), srest));
            self.$singular(new RegExp("" + (p0.$upcase()) + "(?i)" + (prest) + "$"), $rb_plus(s0.$upcase(), srest));
            return self.$singular(new RegExp("" + (p0.$downcase()) + "(?i)" + (prest) + "$"), $rb_plus(s0.$downcase(), srest));
          };
        }, TMP_Inflections_irregular_8.$$arity = 2);
        
        Opal.defn(self, '$uncountable', TMP_Inflections_uncountable_9 = function $$uncountable($a_rest) {
          var self = this, words;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          words = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            words[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.uncountables['$<<'](words)['$flatten!']()
        }, TMP_Inflections_uncountable_9.$$arity = -1);
        
        Opal.defn(self, '$human', TMP_Inflections_human_10 = function $$human(rule, replacement) {
          var self = this;

          return self.humans.$insert(0, [rule, replacement])
        }, TMP_Inflections_human_10.$$arity = 2);
        return (Opal.defn(self, '$clear', TMP_Inflections_clear_11 = function $$clear(scope) {
          var self = this, $case = nil;

          if (scope == null) {
            scope = "all";
          }
          return (function() {$case = scope;
          if ("all"['$===']($case)) {
          self.plurals = [];
          self.singulars = [];
          self.uncountables = [];
          return (self.humans = []);}
          else {return self.$instance_variable_set("" + "@" + (scope), [])}})()
        }, TMP_Inflections_clear_11.$$arity = -1), nil) && 'clear';
      })($nesting[0], null, $nesting);
      Opal.defs(self, '$inflections', TMP_Inflector_inflections_12 = function $$inflections(locale) {
        var self = this, $iter = TMP_Inflector_inflections_12.$$p, $yield = $iter || nil;

        if (locale == null) {
          locale = "en";
        }
        if ($iter) TMP_Inflector_inflections_12.$$p = null;
        if (($yield !== nil)) {
          return Opal.yield1($yield, Opal.const_get_relative($nesting, 'Inflections').$instance(locale));
          } else {
          return Opal.const_get_relative($nesting, 'Inflections').$instance(locale)
        }
      }, TMP_Inflector_inflections_12.$$arity = -1);
      Opal.defs(self, '$pluralize', TMP_Inflector_pluralize_13 = function $$pluralize(word, locale) {
        var self = this;

        if (locale == null) {
          locale = "en";
        }
        return self.$apply_inflections(word, self.$inflections(locale).$plurals())
      }, TMP_Inflector_pluralize_13.$$arity = -2);
      Opal.defs(self, '$singularize', TMP_Inflector_singularize_14 = function $$singularize(word, locale) {
        var self = this;

        if (locale == null) {
          locale = "en";
        }
        return self.$apply_inflections(word, self.$inflections(locale).$singulars())
      }, TMP_Inflector_singularize_14.$$arity = -2);
      self.$private();
      Opal.defs(self, '$apply_inflections', TMP_Inflector_apply_inflections_16 = function $$apply_inflections(word, rules) {
        var $a, TMP_15, self = this, result = nil;

        
        result = word.$to_s().$dup();
        if ($truthy(($truthy($a = word['$empty?']()) ? $a : self.$inflections().$uncountables()['$include?'](result.$downcase()['$[]'](/\b\w+\Z/))))) {
          return result
          } else {
          
          (function(){var $brk = Opal.new_brk(); try {return $send(rules, 'each', [], (TMP_15 = function($b){var self = TMP_15.$$s || this, $b_args, rule, replacement;

            if ($b == null) {
              $b = nil;
            }
            $b = Opal.to_ary($b);
            $b_args = Opal.slice.call($b, 0, $b.length);
            rule = $b_args.splice(0,1)[0];
            if (rule == null) {
              rule = nil;
            }
            replacement = $b_args.splice(0,1)[0];
            if (replacement == null) {
              replacement = nil;
            }
          if ($truthy(result.$match(rule))) {
              
              result = result.$sub(rule, replacement);
              
              Opal.brk(nil, $brk);
              } else {
              return nil
            }}, TMP_15.$$s = self, TMP_15.$$brk = $brk, TMP_15.$$arity = 1, TMP_15.$$has_top_level_mlhs_arg = true, TMP_15))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        };
      }, TMP_Inflector_apply_inflections_16.$$arity = 2);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Inflector'), 'inflections', ["en"], (TMP_17 = function(inflect){var self = TMP_17.$$s || this;
if (inflect == null) inflect = nil;
  
    inflect.$plural(/$/, "s");
    inflect.$plural(/s$/i, "s");
    inflect.$plural(/^(ax|test)is$/i, "\\1es");
    inflect.$plural(/(octop|vir)us$/i, "\\1i");
    inflect.$plural(/(octop|vir)i$/i, "\\1i");
    inflect.$plural(/(alias|status)$/i, "\\1es");
    inflect.$plural(/(bu)s$/i, "\\1ses");
    inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
    inflect.$plural(/([ti])um$/i, "\\1a");
    inflect.$plural(/([ti])a$/i, "\\1a");
    inflect.$plural(/sis$/i, "ses");
    inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
    inflect.$plural(/(hive)$/i, "\\1s");
    inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
    inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
    inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
    inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
    inflect.$plural(/^(m|l)ice$/i, "\\1ice");
    inflect.$plural(/^(ox)$/i, "\\1en");
    inflect.$plural(/^(oxen)$/i, "\\1");
    inflect.$plural(/(quiz)$/i, "\\1zes");
    inflect.$singular(/s$/i, "");
    inflect.$singular(/(ss)$/i, "\\1");
    inflect.$singular(/(n)ews$/i, "\\1ews");
    inflect.$singular(/([ti])a$/i, "\\1um");
    inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
    inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
    inflect.$singular(/([^f])ves$/i, "\\1fe");
    inflect.$singular(/(hive)s$/i, "\\1");
    inflect.$singular(/(tive)s$/i, "\\1");
    inflect.$singular(/([lr])ves$/i, "\\1f");
    inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
    inflect.$singular(/(s)eries$/i, "\\1eries");
    inflect.$singular(/(m)ovies$/i, "\\1ovie");
    inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
    inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
    inflect.$singular(/(bus)(es)?$/i, "\\1");
    inflect.$singular(/(o)es$/i, "\\1");
    inflect.$singular(/(shoe)s$/i, "\\1");
    inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
    inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
    inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
    inflect.$singular(/(alias|status)(es)?$/i, "\\1");
    inflect.$singular(/^(ox)en/i, "\\1");
    inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
    inflect.$singular(/(matr)ices$/i, "\\1ix");
    inflect.$singular(/(quiz)zes$/i, "\\1");
    inflect.$singular(/(database)s$/i, "\\1");
    inflect.$irregular("person", "people");
    inflect.$irregular("man", "men");
    inflect.$irregular("child", "children");
    inflect.$irregular("sex", "sexes");
    inflect.$irregular("move", "moves");
    inflect.$irregular("zombie", "zombies");
    return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/util/core_ext"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$to_s', '$%', '$==', '$round', '$!', '$include?', '$each', '$to_sym', '$is_a?', '$symbolize_keys', '$[]=', '$-', '$stringify_keys', '$<<', '$gsub', '$sub', '$upcase', '$[]', '$alias_method', '$single_space', '$words', '$join', '$map', '$split', '$downcase', '$+', '$single_underscore', '$snake_case', '$strip', '$to_proc', '$capitalize', '$<=', '$size', '$index', '$reverse', '$pluralize', '$singularize']);
  
  self.$require("robe/common/util/inflector");
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_html_1;

    return (Opal.defn(self, '$to_html', TMP_Object_to_html_1 = function $$to_html() {
      var self = this;

      return self.$to_s()
    }, TMP_Object_to_html_1.$$arity = 0), nil) && 'to_html'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_px_2, TMP_Numeric_em_3, TMP_Numeric_rem_4, TMP_Numeric_pc_5, TMP_Numeric_vh_6, TMP_Numeric_hex_7, TMP_Numeric_eqv$q_8;

    
    
    Opal.defn(self, '$px', TMP_Numeric_px_2 = function $$px() {
      var self = this;

      return "" + (self) + "px"
    }, TMP_Numeric_px_2.$$arity = 0);
    
    Opal.defn(self, '$em', TMP_Numeric_em_3 = function $$em() {
      var self = this;

      return "" + (self) + "em"
    }, TMP_Numeric_em_3.$$arity = 0);
    
    Opal.defn(self, '$rem', TMP_Numeric_rem_4 = function $$rem() {
      var self = this;

      return "" + (self) + "rem"
    }, TMP_Numeric_rem_4.$$arity = 0);
    
    Opal.defn(self, '$pc', TMP_Numeric_pc_5 = function $$pc() {
      var self = this;

      return "" + (self) + "%"
    }, TMP_Numeric_pc_5.$$arity = 0);
    
    Opal.defn(self, '$vh', TMP_Numeric_vh_6 = function $$vh() {
      var self = this;

      return "" + (self) + "vh"
    }, TMP_Numeric_vh_6.$$arity = 0);
    
    Opal.defn(self, '$hex', TMP_Numeric_hex_7 = function $$hex() {
      var self = this;

      return "#%X"['$%'](self)
    }, TMP_Numeric_hex_7.$$arity = 0);
    return (Opal.defn(self, '$eqv?', TMP_Numeric_eqv$q_8 = function(other, $kwargs) {
      var self = this, prec;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      prec = $kwargs.$$smap["prec"];
      if (prec == null) {
        prec = 0
      }
      return self.$round(prec)['$=='](other.$round(prec))
    }, TMP_Numeric_eqv$q_8.$$arity = -2), nil) && 'eqv?';
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_exclude$q_9;

    
    Opal.defn(self, '$exclude?', TMP_Enumerable_exclude$q_9 = function(v) {
      var self = this;

      return self['$include?'](v)['$!']()
    }, TMP_Enumerable_exclude$q_9.$$arity = 1)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_symbolize_keys_11, TMP_Hash_stringify_keys_13;

    
    
    Opal.defn(self, '$symbolize_keys', TMP_Hash_symbolize_keys_11 = function $$symbolize_keys() {
      var TMP_10, self = this, result = nil;

      
      result = $hash2([], {});
      $send(self, 'each', [], (TMP_10 = function(k, v){var self = TMP_10.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
      
        $writer = [k.$to_sym(), (function() {if ($truthy(v['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
          return v.$symbolize_keys()
          } else {
          return v
        }; return nil; })()];
        $send(result, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10));
      return result;
    }, TMP_Hash_symbolize_keys_11.$$arity = 0);
    return (Opal.defn(self, '$stringify_keys', TMP_Hash_stringify_keys_13 = function $$stringify_keys() {
      var TMP_12, self = this, result = nil;

      
      result = $hash2([], {});
      $send(self, 'each', [], (TMP_12 = function(k, v){var self = TMP_12.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
      
        $writer = [k.$to_s(), (function() {if ($truthy(v['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
          return v.$stringify_keys()
          } else {
          return v
        }; return nil; })()];
        $send(result, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12));
      return result;
    }, TMP_Hash_stringify_keys_13.$$arity = 0), nil) && 'stringify_keys';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_nl_14, TMP_String_comma_15, TMP_String_tab_16, TMP_String_caps_only_17, TMP_String_camel_case_20, TMP_String_words_21, TMP_String_words_capitalize_23, TMP_String_acronym_25, TMP_String_underscore_to_upcase_28, TMP_String_snake_case_29, TMP_String_camel_case_32, TMP_String_kebab_case_33, TMP_String_single_space_34, TMP_String_single_underscore_35, TMP_String_titleize_36, TMP_String_headerize_38, TMP_String_comma_numeric_40, TMP_String_number_of_41, TMP_String_strip_trailing_zeros_42, TMP_String_pluralize_43, TMP_String_singularize_44, TMP_String_plural$q_45, TMP_String_singular$q_46;

    
    
    Opal.defn(self, '$nl', TMP_String_nl_14 = function $$nl() {
      var self = this;

      return self['$<<']("\n")
    }, TMP_String_nl_14.$$arity = 0);
    
    Opal.defn(self, '$comma', TMP_String_comma_15 = function $$comma() {
      var self = this;

      return self['$<<'](",")
    }, TMP_String_comma_15.$$arity = 0);
    
    Opal.defn(self, '$tab', TMP_String_tab_16 = function $$tab() {
      var self = this;

      return self['$<<']("\t")
    }, TMP_String_tab_16.$$arity = 0);
    
    Opal.defn(self, '$caps_only', TMP_String_caps_only_17 = function $$caps_only() {
      var self = this;

      return self.$gsub(/[[a-z],\d,\s,[:punct:]]/, "")
    }, TMP_String_caps_only_17.$$arity = 0);
    
    Opal.defn(self, '$camel_case', TMP_String_camel_case_20 = function $$camel_case() {
      var TMP_18, TMP_19, self = this;

      return $send($send(self, 'sub', [/^[a-z]/], (TMP_18 = function(a){var self = TMP_18.$$s || this;
if (a == null) a = nil;
      return a.$upcase()}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18)), 'gsub', [/[_\-][a-z]/], (TMP_19 = function(a){var self = TMP_19.$$s || this;
if (a == null) a = nil;
      return a['$[]'](1).$upcase()}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
    }, TMP_String_camel_case_20.$$arity = 0);
    self.$alias_method("camelize", "camel_case");
    self.$alias_method("camelcase", "camel_case");
    
    Opal.defn(self, '$words', TMP_String_words_21 = function $$words() {
      var self = this;

      return self.$gsub(/([a-z\d])([A-Z])/, "\\1 \\2").$gsub(/_/, " ").$single_space()
    }, TMP_String_words_21.$$arity = 0);
    
    Opal.defn(self, '$words_capitalize', TMP_String_words_capitalize_23 = function $$words_capitalize() {
      var TMP_22, self = this;

      return $send(self.$words(), 'gsub', [/\b(\w)/], (TMP_22 = function(w){var self = TMP_22.$$s || this;
if (w == null) w = nil;
      return w.$upcase()}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22))
    }, TMP_String_words_capitalize_23.$$arity = 0);
    
    Opal.defn(self, '$acronym', TMP_String_acronym_25 = function $$acronym() {
      var TMP_24, self = this;

      return $send(self.$words().$split(" "), 'map', [], (TMP_24 = function(w){var self = TMP_24.$$s || this;
if (w == null) w = nil;
      return w['$[]'](0).$upcase()}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24)).$join()
    }, TMP_String_acronym_25.$$arity = 0);
    
    Opal.defn(self, '$underscore_to_upcase', TMP_String_underscore_to_upcase_28 = function $$underscore_to_upcase() {
      var TMP_26, TMP_27, self = this;

      return $send($send(self.$downcase(), 'sub', [/^\w/], (TMP_26 = function(w){var self = TMP_26.$$s || this;
if (w == null) w = nil;
      return w['$[]'](0).$upcase()}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26)), 'gsub', [/_\w/], (TMP_27 = function(w){var self = TMP_27.$$s || this;
if (w == null) w = nil;
      return $rb_plus(" ", w['$[]'](1).$upcase())}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
    }, TMP_String_underscore_to_upcase_28.$$arity = 0);
    
    Opal.defn(self, '$snake_case', TMP_String_snake_case_29 = function $$snake_case() {
      var self = this;

      return self.$single_space().$gsub(/ /, "_").$gsub(/([A-Z]+)([A-Z][a-z])/, "\\1_\\2").$gsub(/([a-z\d])([A-Z])/, "\\1_\\2").$single_underscore().$downcase()
    }, TMP_String_snake_case_29.$$arity = 0);
    self.$alias_method("underscore", "snake_case");
    
    Opal.defn(self, '$camel_case', TMP_String_camel_case_32 = function $$camel_case() {
      var TMP_30, TMP_31, self = this;

      return $send($send(self.$snake_case(), 'sub', [/^[a-z]/], (TMP_30 = function(a){var self = TMP_30.$$s || this;
if (a == null) a = nil;
      return a.$upcase()}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30)), 'gsub', [/[_\-][a-z]/], (TMP_31 = function(a){var self = TMP_31.$$s || this;
if (a == null) a = nil;
      return a['$[]'](1).$upcase()}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31))
    }, TMP_String_camel_case_32.$$arity = 0);
    self.$alias_method("camelize", "camel_case");
    
    Opal.defn(self, '$kebab_case', TMP_String_kebab_case_33 = function $$kebab_case() {
      var self = this;

      return self.$snake_case().$gsub(/_/, "-")
    }, TMP_String_kebab_case_33.$$arity = 0);
    
    Opal.defn(self, '$single_space', TMP_String_single_space_34 = function $$single_space() {
      var self = this;

      return self.$gsub(/ {2,}/, " ").$strip()
    }, TMP_String_single_space_34.$$arity = 0);
    
    Opal.defn(self, '$single_underscore', TMP_String_single_underscore_35 = function $$single_underscore() {
      var self = this;

      return self.$gsub(/_{2,}/, "_")
    }, TMP_String_single_underscore_35.$$arity = 0);
    
    Opal.defn(self, '$titleize', TMP_String_titleize_36 = function $$titleize() {
      var self = this;

      return $send(self.$gsub("_", " ").$split(" "), 'map', [], "capitalize".$to_proc()).$join(" ")
    }, TMP_String_titleize_36.$$arity = 0);
    
    Opal.defn(self, '$headerize', TMP_String_headerize_38 = function $$headerize() {
      var TMP_37, self = this;

      return $send(self.$split(/[_-]/), 'map', [], (TMP_37 = function(new_str){var self = TMP_37.$$s || this;
if (new_str == null) new_str = nil;
      return $rb_plus(new_str['$[]'](0).$capitalize(), new_str['$[]']($range(1, -1, false)))}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37)).$join("-")
    }, TMP_String_headerize_38.$$arity = 0);
    
    Opal.defn(self, '$comma_numeric', TMP_String_comma_numeric_40 = function $$comma_numeric() {
      var $a, TMP_39, self = this, is_neg = nil, min_len = nil, dot = nil, first = nil, last = nil, fixed = nil;

      
      is_neg = self['$[]'](0)['$==']("-");
      min_len = $rb_plus(3, (function() {if ($truthy(is_neg)) {
        return 1
        } else {
        return 0
      }; return nil; })());
      return (function() {if ($truthy($rb_le(self.$size(), min_len))) {
        return self
        } else {
        
        dot = ($truthy($a = self.$index(".")) ? $a : self.$size());
        if ($truthy($rb_le(dot, min_len))) {
          return self
          } else {
          
          first = self['$[]'](Opal.Range.$new(0, $rb_minus(dot, 1), false));
          last = self['$[]'](Opal.Range.$new($rb_plus(dot, 1), -1, false));
          if ($truthy(is_neg)) {
            first = first['$[]']($range(1, -1, false))};
          fixed = $send(first.$reverse(), 'gsub', [/...(?=.)/], (TMP_39 = function(s){var self = TMP_39.$$s || this;
if (s == null) s = nil;
          return "" + (s) + ","}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39)).$reverse();
          return "" + ((function() {if ($truthy(is_neg)) {
            return "-"
            } else {
            return ""
          }; return nil; })()) + (fixed) + ((function() {if ($truthy(last)) {
            return "."
            } else {
            return ""
          }; return nil; })()) + (last);
        };
      }; return nil; })().$sub(" ,", "  ");
    }, TMP_String_comma_numeric_40.$$arity = 0);
    
    Opal.defn(self, '$number_of', TMP_String_number_of_41 = function $$number_of(n) {
      var self = this;

      return "" + (n) + " " + ((function() {if (n['$=='](1)) {
        return self
        } else {
        return self.$pluralize()
      }; return nil; })())
    }, TMP_String_number_of_41.$$arity = 1);
    
    Opal.defn(self, '$strip_trailing_zeros', TMP_String_strip_trailing_zeros_42 = function $$strip_trailing_zeros() {
      var self = this;

      return self.$strip().$sub(/(\.0*[1-9]*)0*$/, "\\1").$sub(/\.$/, "").$sub(/\.0*$/, "")
    }, TMP_String_strip_trailing_zeros_42.$$arity = 0);
    
    Opal.defn(self, '$pluralize', TMP_String_pluralize_43 = function $$pluralize(count) {
      var self = this;

      if (count == null) {
        count = 0;
      }
      if (count['$=='](1)) {
        return self
        } else {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Inflector').$pluralize(self)
      }
    }, TMP_String_pluralize_43.$$arity = -1);
    
    Opal.defn(self, '$singularize', TMP_String_singularize_44 = function $$singularize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Inflector').$singularize(self)
    }, TMP_String_singularize_44.$$arity = 0);
    
    Opal.defn(self, '$plural?', TMP_String_plural$q_45 = function() {
      var self = this;

      return self.$pluralize()['$=='](self)
    }, TMP_String_plural$q_45.$$arity = 0);
    return (Opal.defn(self, '$singular?', TMP_String_singular$q_46 = function() {
      var self = this;

      return self.$singularize()['$=='](self)
    }, TMP_String_singular$q_46.$$arity = 0), nil) && 'singular?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/util"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$module_function', '$%', '$fail', '$then', '$call', '$trace', '$hex_id', '$+', '$to_a', '$times', '$*', '$sample', '$[]', '$each', '$each_pair', '$is_a?', '$merge_attributes', '$[]=', '$-', '$!', '$nil?', '$<<']);
  
  self.$require("robe/common/util/core_ext");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Util, self = $Util = $module($base, 'Util');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Util_on_promise_1, TMP_Util_uuid_4, TMP_Util_hex_id_6, TMP_Util_merge_attributes_9, TMP_Util_arrify_12;

      
      self.$module_function();
      Opal.const_set($nesting[0], 'UUID_VERSION', 4);
      Opal.const_set($nesting[0], 'UUID_VERSION_HEX', "%02x"['$%'](Opal.const_get_relative($nesting, 'UUID_VERSION')));
      
      Opal.defn(self, '$on_promise', TMP_Util_on_promise_1 = function $$on_promise(promise) {
        var TMP_2, TMP_3, self = this, $iter = TMP_Util_on_promise_1.$$p, block = $iter || nil;

        if ($iter) TMP_Util_on_promise_1.$$p = null;
        return $send($send(promise, 'then', [], (TMP_2 = function(response){var self = TMP_2.$$s || this;
if (response == null) response = nil;
        return block.$call(response)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2)), 'fail', [], (TMP_3 = function(error){var self = TMP_3.$$s || this;
if (error == null) error = nil;
        return self.$trace("robe/common/util", 14, self, nil, "" + "promise failed => " + (error))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
      }, TMP_Util_on_promise_1.$$arity = 1);
      
      Opal.defn(self, '$uuid', TMP_Util_uuid_4 = function $$uuid() {
        var self = this;

        return "" + (self.$hex_id(4)) + "-" + (self.$hex_id(2)) + "-" + (Opal.const_get_relative($nesting, 'UUID_VERSION_HEX')) + (self.$hex_id(1)) + "-" + (self.$hex_id(2)) + "-" + (self.$hex_id(6))
      }, TMP_Util_uuid_4.$$arity = 0);
      
      Opal.defn(self, '$hex_id', TMP_Util_hex_id_6 = function $$hex_id(n) {
        var $a, $b, TMP_5, self = this, result = nil;

        if (n == null) {
          n = 16;
        }
        
        (Opal.class_variable_set($Util, '@@hex_digits', ($truthy($a = (($b = $Util.$$cvars['@@hex_digits']) == null ? nil : $b)) ? $a : $rb_plus($range("0", "9", false).$to_a(), $range("A", "F", false).$to_a()))));
        result = "";
        $send($rb_times(n, 2), 'times', [], (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

        return (result = $rb_plus(result, (($c = $Util.$$cvars['@@hex_digits']) == null ? nil : $c).$sample()))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
        return result;
      }, TMP_Util_hex_id_6.$$arity = -1);
      
      Opal.defn(self, '$merge_attributes', TMP_Util_merge_attributes_9 = function $$merge_attributes($a_rest) {
        var $b, TMP_7, self = this, args, result = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        result = ($truthy($b = args['$[]'](0)) ? $b : $hash2([], {}));
        $send(args, 'each', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this, TMP_8;
if (arg == null) arg = nil;
        if ($truthy(arg)) {
            return $send(arg, 'each_pair', [], (TMP_8 = function(key, next_value){var self = TMP_8.$$s || this, $a, current_value = nil, $writer = nil;
if (key == null) key = nil;if (next_value == null) next_value = nil;
            
              current_value = result['$[]'](key);
              if ($truthy(($truthy($a = current_value['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))) ? next_value['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
                
                $writer = [key, self.$merge_attributes(current_value, next_value)];
                $send(result, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                } else {
                
                $writer = [key, next_value];
                $send(result, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              };}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8))
            } else {
            return nil
          }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        return result;
      }, TMP_Util_merge_attributes_9.$$arity = -1);
      
      Opal.defn(self, '$arrify', TMP_Util_arrify_12 = function $$arrify($a_rest) {
        var TMP_10, self = this, args, result = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        result = [];
        $send(args, 'each', [], (TMP_10 = function(arg){var self = TMP_10.$$s || this, $a, TMP_11;
if (arg == null) arg = nil;
        if ($truthy(arg)) {
            if ($truthy(($truthy($a = arg['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable'))) ? arg['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))['$!']() : $a))) {
              return $send(arg, 'each', [], (TMP_11 = function(e){var self = TMP_11.$$s || this;
if (e == null) e = nil;
              if ($truthy(arg['$nil?']())) {
                  return nil
                  } else {
                  return result['$<<'](e)
                }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))
            } else if ($truthy(arg['$nil?']())) {
              return nil
              } else {
              return result['$<<'](arg)
            }
            } else {
            return nil
          }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
        return result;
      }, TMP_Util_arrify_12.$$arity = -1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/dom/link"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$attr_reader', '$[]', '$!=', '$merge', '$method', '$[]=', '$-', '$check_active', '$args', '$tag', '$private', '$call', '$prevented?', '$warn', '$+', '$navigate', '$meta?', '$shift?', '$ctrl?', '$alt?', '$==', '$button', '$prevent', '$navigate_to', '$router', '$app', '$href', '$path', '$location', '$window', '$to_s', '$delete']);
  
  self.$require("robe/client/component");
  self.$require("robe/client/router");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $DOM, self = $DOM = $module($base, 'DOM');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $Link(){};
          var self = $Link = $klass($base, $super, 'Link', $Link);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Link_initialize_1, TMP_Link_href_2, TMP_Link_render_3, TMP_Link_handle_click_4, TMP_Link_navigate_5, TMP_Link_check_active_6;

          def.args = def.on_click = nil;
          
          self.$attr_reader("args");
          
          Opal.defn(self, '$initialize', TMP_Link_initialize_1 = function $$initialize($kwargs) {
            var $a, self = this, args, href = nil, $writer = nil;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            args = Opal.kwrestargs($kwargs, {});
            
            self.on_click = ($truthy($a = args['$[]']("on")) ? $a : $hash2([], {}))['$[]']("click");
            href = args['$[]']("href");
            if ($truthy(($truthy($a = href) ? href['$!=']("#") : $a))) {
              
              self.args = args.$merge($hash2(["on"], {"on": $hash2(["click"], {"click": self.$method("handle_click")})}));
              
              $writer = ["key", href];
              $send(self.args, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return self.$check_active(href);
              } else {
              return (self.args = args)
            };
          }, TMP_Link_initialize_1.$$arity = -1);
          
          Opal.defn(self, '$href', TMP_Link_href_2 = function $$href() {
            var self = this;

            return self.$args()['$[]']("href")
          }, TMP_Link_href_2.$$arity = 0);
          
          Opal.defn(self, '$render', TMP_Link_render_3 = function $$render() {
            var self = this;

            return self.$tag("a", Opal.to_hash(self.$args()))
          }, TMP_Link_render_3.$$arity = 0);
          self.$private();
          
          Opal.defn(self, '$handle_click', TMP_Link_handle_click_4 = function $$handle_click(event) {
            var self = this;

            
            if ($truthy(self.on_click)) {
              self.on_click.$call(event)};
            if ($truthy(event['$prevented?']())) {
              return self.$warn($rb_plus("You are preventing the default behavior of a `Link` component. ", "In this case, you could just use an `a` element."))
              } else {
              return self.$navigate(event)
            };
          }, TMP_Link_handle_click_4.$$arity = 1);
          
          Opal.defn(self, '$navigate', TMP_Link_navigate_5 = function $$navigate(event) {
            var $a, $b, $c, $d, self = this, modified = nil;

            
            modified = ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = event['$meta?']()) ? $d : event['$shift?']())) ? $c : event['$ctrl?']())) ? $b : event['$alt?']())) ? $a : event.$button()['$=='](1));
            if ($truthy(modified)) {
              return nil
              } else {
              
              event.$prevent();
              return self.$app().$router().$navigate_to(self.$href());
            };
          }, TMP_Link_navigate_5.$$arity = 1);
          return (Opal.defn(self, '$check_active', TMP_Link_check_active_6 = function $$check_active(href) {
            var self = this, class_name = nil, $writer = nil;

            if (self.$window().$location().$path()['$=='](href)) {
              
              class_name = self.$args().$delete("class").$to_s();
              
              $writer = ["class", "" + (class_name) + " active"];
              $send(self.$args(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
              } else {
              return nil
            }
          }, TMP_Link_check_active_6.$$arity = 1), nil) && 'check_active';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Component'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/render/html/tags"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Render, self = $Render = $module($base, 'Render');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $HTML, self = $HTML = $module($base, 'HTML');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          Opal.const_set($nesting[0], 'TAGS', ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "command", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"])
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/state/binding"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$is_a?', '$raise', '$name', '$class', '$store', '$where', '$observe', '$changed?', '$call', '$!', '$send', '$state', '$!=', '$bound?', '$unsubscribe', '$lambda', '$warn', '$logger', '$object_id']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Binding(){};
        var self = $Binding = $klass($base, $super, 'Binding', $Binding);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Binding_initialize_1, TMP_Binding_to_s_2, TMP_Binding_bind_3, TMP_Binding_bound$q_5, TMP_Binding_changed$q_6, TMP_Binding_resolve_7, TMP_Binding_initial_8, TMP_Binding_unbind_10;

        def.subscription_id = def.store_method = def.store_method_args = def.bound_block = nil;
        
        self.$attr_reader("store", "bound_block", "where");
        
        Opal.defn(self, '$initialize', TMP_Binding_initialize_1 = function $$initialize(store, $store_method, $a_rest, $kwargs) {
          var $b, self = this, $post_args, where, store_method, store_method_args, $iter = TMP_Binding_initialize_1.$$p, bound_block = $iter || nil;

          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          $kwargs = Opal.extract_kwargs($post_args);
          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          where = $kwargs.$$smap["where"];
          if (where == null) {
            where = nil
          }
          if (0 < $post_args.length) {
            store_method = $post_args.splice(0,1)[0];
          }
          if (store_method == null) {
            store_method = nil;
          }
          if (0 < $post_args.length) {
            store_method_args = $post_args.splice(0, $post_args.length - 0);
          } else {
            store_method_args = [];
          }
          if ($iter) TMP_Binding_initialize_1.$$p = null;
          
          self.where = ($truthy($b = where) ? $b : "unspecified bind location");
          if ($truthy(($truthy($b = store['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Store'))) ? $b : store['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Atom'))))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (self.$class().$name()) + "#" + ("initialize") + " store must be State store (called from " + (where) + ")")
          };
          if ($truthy(bound_block)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (self.$class().$name()) + "#" + ("initialize") + " expects a bound block (called from " + (where) + ")")
          };
          $b = [store, bound_block], (self.store = $b[0]), (self.bound_block = $b[1]), $b;
          $b = [store_method, store_method_args], (self.store_method = $b[0]), (self.store_method_args = $b[1]), $b;
          return (self.subscription_id = nil);
        }, TMP_Binding_initialize_1.$$arity = -2);
        
        Opal.defn(self, '$to_s', TMP_Binding_to_s_2 = function $$to_s() {
          var self = this;

          return "" + (self.$class()) + " : store=" + (self.$store().$class()) + " where=" + (self.$where())
        }, TMP_Binding_to_s_2.$$arity = 0);
        
        Opal.defn(self, '$bind', TMP_Binding_bind_3 = function $$bind() {
          var TMP_4, self = this, $iter = TMP_Binding_bind_3.$$p, callback = $iter || nil;

          if ($iter) TMP_Binding_bind_3.$$p = null;
          
          if ($truthy(self.subscription_id)) {
            self.$raise(Opal.const_get_relative($nesting, 'RuntimeError'), "" + "already subscribed to store=" + (self.$store().$class()) + " where=" + (self.$where()))};
          if ($truthy(callback)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (self.$class().$name()) + "#" + ("bind") + " expects a callback block")
          };
          return (self.subscription_id = $send(self.$store(), 'observe', [$hash2(["who"], {"who": self.$where()})], (TMP_4 = function(prior){var self = TMP_4.$$s || this;
if (prior == null) prior = nil;
          if ($truthy(self['$changed?'](prior))) {
              return callback.$call(prior)
              } else {
              return nil
            }}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4)));
        }, TMP_Binding_bind_3.$$arity = 0);
        
        Opal.defn(self, '$bound?', TMP_Binding_bound$q_5 = function() {
          var self = this;

          return self.subscription_id['$!']()['$!']()
        }, TMP_Binding_bound$q_5.$$arity = 0);
        
        Opal.defn(self, '$changed?', TMP_Binding_changed$q_6 = function(prior) {
          var self = this, current = nil;

          if ($truthy(self.store_method)) {
            
            if ($truthy(self.store_method['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
              self.store_method.$call(prior)
              } else {
              
              prior = (function() {if ($truthy(prior)) {
                return $send(prior, 'send', [self.store_method].concat(Opal.to_a(self.store_method_args)))
                } else {
                return nil
              }; return nil; })();
              current = (function() {if ($truthy(self.$store()['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Atom')))) {
                return $send(self.$store(), 'send', [self.store_method].concat(Opal.to_a(self.store_method_args)))
              } else if ($truthy(self.$store().$state())) {
                return $send(self.$store().$state(), 'send', [self.store_method].concat(Opal.to_a(self.store_method_args)))
                } else {
                return nil
              }; return nil; })();
            };
            return prior['$!='](current);
            } else {
            return true
          }
        }, TMP_Binding_changed$q_6.$$arity = 1);
        
        Opal.defn(self, '$resolve', TMP_Binding_resolve_7 = function $$resolve(prior) {
          var $a, self = this;

          return ($truthy($a = self['$bound?']()) ? self.bound_block.$call(prior) : $a)
        }, TMP_Binding_resolve_7.$$arity = 1);
        
        Opal.defn(self, '$initial', TMP_Binding_initial_8 = function $$initial() {
          var self = this;

          return self.bound_block.$call(self.$store())
        }, TMP_Binding_initial_8.$$arity = 0);
        return (Opal.defn(self, '$unbind', TMP_Binding_unbind_10 = function $$unbind() {
          var TMP_9, self = this;

          if ($truthy(self.subscription_id)) {
            
            self.$store().$unsubscribe(self.subscription_id);
            self.subscription_id = nil;
            return (self.bound_block = $send(self, 'lambda', [], (TMP_9 = function(){var self = TMP_9.$$s || this;
              if (self.subscription_id == null) self.subscription_id = nil;

            return Opal.const_get_relative($nesting, 'Robe').$logger().$warn("" + "binding " + (self.$where()) + " store=" + (self.$store().$class()) + " @subscription_id=" + (self.subscription_id) + " object_id=" + (self.$object_id()) + " has been unbound. Likely cause is nested bindings.")}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9)));
            } else {
            return nil
          }
        }, TMP_Binding_unbind_10.$$arity = 0), nil) && 'unbind';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/dom/tag"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$send', '$each', '$to_proc', '$is_a?', '$concat', '$<<', '$*', '$attr_accessor', '$tag_name=', '$-', '$first', '$params=', '$==', '$define_method', '$[]=', '$params', '$new', '$class', '$arg', '$+', '$[]', '$alias_method', '$tag', '$tag_name']);
  
  self.$require("robe/client/render/html/tags");
  self.$require("robe/client/browser");
  self.$require("robe/client/dom");
  self.$require("robe/common/util");
  self.$require("robe/common/state/binding");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $DOM, self = $DOM = $module($base, 'DOM');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        
        (function($base, $super, $parent_nesting) {
          function $TagArray(){};
          var self = $TagArray = $klass($base, $super, 'TagArray', $TagArray);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TagArray_initialize_1, TMP_TagArray_each_2, TMP_TagArray_$_3, TMP_TagArray_$_4;

          def.contents = nil;
          
          self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
          
          Opal.defn(self, '$initialize', TMP_TagArray_initialize_1 = function $$initialize(first) {
            var self = this;

            
            self.contents = [];
            return self.$send("+", first);
          }, TMP_TagArray_initialize_1.$$arity = 1);
          
          Opal.defn(self, '$each', TMP_TagArray_each_2 = function $$each() {
            var self = this, $iter = TMP_TagArray_each_2.$$p, block = $iter || nil;

            if ($iter) TMP_TagArray_each_2.$$p = null;
            return $send(self.contents, 'each', [], block.$to_proc())
          }, TMP_TagArray_each_2.$$arity = 0);
          
          Opal.defn(self, '$+', TMP_TagArray_$_3 = function(el_or_array) {
            var self = this;

            
            el_or_array;
            if ($truthy(el_or_array['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable')))) {
              self.contents.$concat(el_or_array)
              } else {
              self.contents['$<<'](el_or_array)
            };
            return self;
          }, TMP_TagArray_$_3.$$arity = 1);
          return (Opal.defn(self, '$*', TMP_TagArray_$_4 = function(n) {
            var self = this;

            return (self.contents = $rb_times(self.contents, n))
          }, TMP_TagArray_$_4.$$arity = 1), nil) && '*';
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          function $Tag(){};
          var self = $Tag = $klass($base, $super, 'Tag', $Tag);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Tag_initialize_5, TMP_Tag_6, TMP_Tag_$_10, TMP_Tag_$_11, TMP_Tag_bind_12, TMP_Tag_$lt$lt_13, TMP_Tag_to_element_14;

          
          self.$attr_accessor("tag_name", "params");
          
          Opal.defn(self, '$initialize', TMP_Tag_initialize_5 = function $$initialize(tag_name, $a_rest) {
            var self = this, args, $writer = nil;

            if (tag_name == null) {
              tag_name = "div";
            }
            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            
            
            $writer = [tag_name];
            $send(self, 'tag_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [(function() {if ($truthy(args.$first()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              return args.$first()
              } else {
              return $hash2(["content"], {"content": args})
            }; return nil; })()];
            $send(self, 'params=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, TMP_Tag_initialize_5.$$arity = -1);
          $send(["id", "css", "style", "name", "enabled", "disabled", "selected", "checked", "value", "type", "autofocus", "required", "for", "data", "aria", "on", "props", "href", "src", "properties", "height", "width", "content"], 'each', [], (TMP_Tag_6 = function(attr){var self = TMP_Tag_6.$$s || this, TMP_7, TMP_8, TMP_9;
if (attr == null) attr = nil;
          if (attr['$==']("content")) {
              return $send(self, 'define_method', [attr], (TMP_7 = function($a_rest){var self = TMP_7.$$s || this, args, $writer = nil;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              
                
                $writer = [attr, args];
                $send(self.$params(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                return self;}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7))
            } else if (attr['$==']("css")) {
              return $send(self, 'define_method', [attr], (TMP_8 = function($a_rest){var self = TMP_8.$$s || this, args, $writer = nil;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              
                
                $writer = ["class", args];
                $send(self.$params(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                return self;}, TMP_8.$$s = self, TMP_8.$$arity = -1, TMP_8))
              } else {
              return $send(self, 'define_method', [attr], (TMP_9 = function($a_rest){var self = TMP_9.$$s || this, args, $writer = nil;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              
                
                $writer = [attr, args.$first()];
                $send(self.$params(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                return self;}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9))
            }}, TMP_Tag_6.$$s = self, TMP_Tag_6.$$arity = 1, TMP_Tag_6));
          
          Opal.defn(self, '$+', TMP_Tag_$_10 = function(tag_or_array) {
            var self = this;

            
            if ($truthy(tag_or_array['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
              tag_or_array = self.$class().$new("span", self.$arg())};
            return $rb_plus(Opal.const_get_relative($nesting, 'TagArray').$new(self), tag_or_array);
          }, TMP_Tag_$_10.$$arity = 1);
          
          Opal.defn(self, '$*', TMP_Tag_$_11 = function(n) {
            var self = this;

            return $rb_times(Opal.const_get_relative($nesting, 'TagArray').$new(self), n)
          }, TMP_Tag_$_11.$$arity = 1);
          
          Opal.defn(self, '$bind', TMP_Tag_bind_12 = function $$bind(store, $state_method, $a_rest, $kwargs) {
            var self = this, $post_args, where, state_method, state_method_args, $iter = TMP_Tag_bind_12.$$p, bound_block = $iter || nil, binding = nil;

            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            $kwargs = Opal.extract_kwargs($post_args);
            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            where = $kwargs.$$smap["where"];
            if (where == null) {
              where = nil
            }
            if (0 < $post_args.length) {
              state_method = $post_args.splice(0,1)[0];
            }
            if (state_method == null) {
              state_method = nil;
            }
            if (0 < $post_args.length) {
              state_method_args = $post_args.splice(0, $post_args.length - 0);
            } else {
              state_method_args = [];
            }
            if ($iter) TMP_Tag_bind_12.$$p = null;
            
            binding = $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Binding'), 'new', [store, state_method].concat(Opal.to_a(state_method_args)).concat($hash2(["where"], {"where": where})), bound_block.$to_proc());
            return self['$[]'](binding);
          }, TMP_Tag_bind_12.$$arity = -2);
          self.$alias_method("[]", "content");
          
          Opal.defn(self, '$<<', TMP_Tag_$lt$lt_13 = function(arg) {
            var $a, self = this, $logical_op_recvr_tmp_1 = nil, $writer = nil;

            
            (($logical_op_recvr_tmp_1 = self.$params()), ($truthy($a = $logical_op_recvr_tmp_1['$[]']("content")) ? $a : (($writer = ["content", []]), $send($logical_op_recvr_tmp_1, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])))['$<<'](arg);
            return self;
          }, TMP_Tag_$lt$lt_13.$$arity = 1);
          return (Opal.defn(self, '$to_element', TMP_Tag_to_element_14 = function $$to_element() {
            var self = this;
            if ($gvars.dom == null) $gvars.dom = nil;

            return $gvars.dom.$tag(self.$tag_name(), self.$params())
          }, TMP_Tag_to_element_14.$$arity = 0), nil) && 'to_element';
        })($nesting[0], null, $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/dom"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$module_function', '$+', '$each', '$define_method', '$new', '$window', '$document', '$trace', '$unbind_descendant_bindings', '$clear', '$==', '$first', '$class', '$fail', '$root', '$delete', '$is_a?', '$size', '$concat', '$compact', '$flatten', '$to_a', '$<<', '$[]', '$[]=', '$-', '$create_element', '$id=', '$set_attribute', '$set_content', '$to_proc', '$resolve_attribute', '$call', '$attribute_handler', '$attribute_handlers', '$default_attribute_handler', '$lambda', '$normalize_style', '$style', '$join', '$map', '$underscore_to_dash', '$resolve_events', '$on', '$resolve_data', '$resolve_aria', '$selected=', '$checked=', '$!', '$strip_underscores', '$to_s', '$resolve_attribute_binding', '$element_bindings', '$bind', '$update_element_attribute', '$initial', '$animation_frame', '$resolve', '$append_content', '$sanitize_content', '$===', '$to_element', '$tag', '$resolve_bound_content', '$where', '$binding', '$replace_bound_content', '$replace_child', '$remove_child', '$respond_to?', '$raise', '$to_h', '$to_html', '$method', '$index', '$include?', '$gsub', '$descend', '$unbind_element_bindings', '$unbind', '$clear_bindings', '$children', '$data', '$nil?', '$dom']);
  
  self.$require("robe/common/util");
  self.$require("robe/common/trace");
  self.$require("robe/client/dom/link");
  self.$require("robe/client/dom/tag");
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_as_native_1;

    return (Opal.defn(self, '$as_native', TMP_String_as_native_1 = function $$as_native() {
      var self = this;

      return self
    }, TMP_String_as_native_1.$$arity = 0), nil) && 'as_native'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Robe_dom_63;

    
    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $DOM, self = $DOM = $module($base, 'DOM');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DOM_2, TMP_DOM_window_4, TMP_DOM_document_5, TMP_DOM_clear_6, TMP_DOM_tag_9, TMP_DOM_bind_10, TMP_DOM_set_attribute_11, TMP_DOM_attribute_handler_12, TMP_DOM_attribute_handlers_29, TMP_DOM_default_attribute_handler_31, TMP_DOM_resolve_attribute_32, TMP_DOM_resolve_attribute_binding_34, TMP_DOM_update_element_attribute_36, TMP_DOM_set_content_38, TMP_DOM_append_content_39, TMP_DOM_sanitize_content_40, TMP_DOM_resolve_bound_content_42, TMP_DOM_replace_bound_content_44, TMP_DOM_normalize_style_46, TMP_DOM_resolve_events_48, TMP_DOM_resolve_data_50, TMP_DOM_resolve_aria_52, TMP_DOM_strip_underscores_53, TMP_DOM_underscore_to_dash_54, TMP_DOM_unbind_descendant_bindings_56, TMP_DOM_unbind_element_bindings_58, TMP_DOM_descend_59, TMP_DOM_element_bindings_61, TMP_DOM_clear_bindings_62;

        
        self.$module_function();
        Opal.const_set($nesting[0], 'BINDING_CLASS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Binding'));
        Opal.const_set($nesting[0], 'TAG_CLASS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'DOM'), 'Tag'));
        Opal.const_set($nesting[0], 'LINK_CLASS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'DOM'), 'Link'));
        Opal.const_set($nesting[0], 'ELEMENT_CLASS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Browser'), 'DOM'), 'Element'));
        Opal.const_set($nesting[0], 'NODE_CLASS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Browser'), 'DOM'), 'Node'));
        Opal.const_set($nesting[0], 'COMPONENT_CLASS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Component'));
        Opal.const_set($nesting[0], 'HTML_TAGS', $rb_plus(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Robe'), 'Client'), 'Render'), 'HTML'), 'TAGS'), ["link"]));
        $send(Opal.const_get_relative($nesting, 'HTML_TAGS'), 'each', [], (TMP_DOM_2 = function(tag){var self = TMP_DOM_2.$$s || this, TMP_3;
if (tag == null) tag = nil;
        return $send(self, 'define_method', [tag], (TMP_3 = function($a_rest){var self = TMP_3.$$s || this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(Opal.const_get_relative($nesting, 'TAG_CLASS'), 'new', [tag].concat(Opal.to_a(args)))}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3))}, TMP_DOM_2.$$s = self, TMP_DOM_2.$$arity = 1, TMP_DOM_2));
        
        Opal.defn(self, '$window', TMP_DOM_window_4 = function $$window() {
          var $a, self = this;
          if (self.window == null) self.window = nil;

          return (self.window = ($truthy($a = self.window) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Browser').$window()))
        }, TMP_DOM_window_4.$$arity = 0);
        
        Opal.defn(self, '$document', TMP_DOM_document_5 = function $$document() {
          var $a, self = this;
          if (self.document == null) self.document = nil;

          return (self.document = ($truthy($a = self.document) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Browser').$document()))
        }, TMP_DOM_document_5.$$arity = 0);
        
        Opal.defn(self, '$clear', TMP_DOM_clear_6 = function $$clear(element) {
          var self = this;

          
          if ($truthy(element)) {
            
            self.$trace("robe/client/dom", 43, self, "clear", "" + " element=" + (element));
            self.$unbind_descendant_bindings(element);
            element.$clear();};
          return nil;
        }, TMP_DOM_clear_6.$$arity = 1);
        
        Opal.defn(self, '$tag', TMP_DOM_tag_9 = function $$tag(name, $a_rest) {
          var $b, TMP_7, TMP_8, self = this, args, content = nil, n = nil, compact = nil, attributes = nil, css = nil, $writer = nil, namespace = nil, element = nil, id = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($truthy(($truthy($b = name['$==']("link")) ? $b : name['$==']("link")))) {
            
            args = args.$first();
            if (args.$class()['$=='](Opal.const_get_relative($nesting, 'Hash'))) {
              } else {
              self.$fail("link expects keyword args")
            };
            return Opal.const_get_relative($nesting, 'LINK_CLASS').$new(Opal.to_hash(args)).$root();
            } else {
            
            args = (function() {if (args.$first().$class()['$=='](Opal.const_get_relative($nesting, 'Hash'))) {
              return args.$first()
              } else {
              return $hash2(["content"], {"content": args})
            }; return nil; })();
            content = args.$delete("content");
            if ($truthy(content['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable')))) {
              
              n = content.$size();
              if (n['$=='](0)) {
                content = nil
                } else {
                
                compact = [];
                $send(content, 'each', [], (TMP_7 = function(e){var self = TMP_7.$$s || this;
if (e == null) e = nil;
                if ($truthy(e)) {
                    if ($truthy(e['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable')))) {
                      return compact.$concat(e.$to_a().$flatten().$compact())
                      } else {
                      return compact['$<<'](e)
                    }
                    } else {
                    return nil
                  }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
                content = compact;
                n = content.$size();
                if (n['$=='](0)) {
                  content = nil
                } else if (n['$=='](1)) {
                  content = content.$first()};
              };};
            attributes = args;
            css = attributes['$[]']("css");
            if ($truthy(css)) {
              
              $writer = ["class", css];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            namespace = (function() {if ($truthy(attributes['$[]']("namespace"))) {
              return $hash2(["namespace"], {"namespace": attributes['$[]']("namespace")})
              } else {
              return $hash2([], {})
            }; return nil; })();
            element = self.$document().$create_element(name, namespace);
            id = attributes['$[]']("id");
            if ($truthy(id)) {
              
              $writer = [id];
              $send(element, 'id=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            $send(attributes, 'each', [], (TMP_8 = function(attribute, value){var self = TMP_8.$$s || this, $a;
if (attribute == null) attribute = nil;if (value == null) value = nil;
            if ($truthy(($truthy($a = attributes['$==']("css")) ? $a : attributes['$==']("content")))) {
                return nil
                } else {
                return self.$set_attribute(element, attribute, value)
              }}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8));
            self.$set_content(element, content);
            return element;
          }
        }, TMP_DOM_tag_9.$$arity = -2);
        
        Opal.defn(self, '$bind', TMP_DOM_bind_10 = function $$bind(store, $state_method, $a_rest, $kwargs) {
          var self = this, $post_args, where, state_method, state_method_arg, $iter = TMP_DOM_bind_10.$$p, bound_block = $iter || nil;

          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          $kwargs = Opal.extract_kwargs($post_args);
          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          where = $kwargs.$$smap["where"];
          if (where == null) {
            where = nil
          }
          if (0 < $post_args.length) {
            state_method = $post_args.splice(0,1)[0];
          }
          if (state_method == null) {
            state_method = nil;
          }
          if (0 < $post_args.length) {
            state_method_arg = $post_args.splice(0, $post_args.length - 0);
          } else {
            state_method_arg = [];
          }
          if ($iter) TMP_DOM_bind_10.$$p = null;
          return $send(Opal.const_get_relative($nesting, 'BINDING_CLASS'), 'new', [store, state_method].concat(Opal.to_a(state_method_arg)).concat($hash2(["where"], {"where": where})), bound_block.$to_proc())
        }, TMP_DOM_bind_10.$$arity = -2);
        
        Opal.defn(self, '$set_attribute', TMP_DOM_set_attribute_11 = function $$set_attribute(element, attribute, value) {
          var self = this;

          
          value = self.$resolve_attribute(element, attribute, value);
          return self.$attribute_handler(attribute).$call(element, attribute, value);
        }, TMP_DOM_set_attribute_11.$$arity = 3);
        
        Opal.defn(self, '$attribute_handler', TMP_DOM_attribute_handler_12 = function $$attribute_handler(attribute) {
          var $a, self = this;

          return ($truthy($a = self.$attribute_handlers()['$[]'](attribute)) ? $a : self.$default_attribute_handler())
        }, TMP_DOM_attribute_handler_12.$$arity = 1);
        
        Opal.defn(self, '$attribute_handlers', TMP_DOM_attribute_handlers_29 = function $$attribute_handlers() {
          var $a, TMP_13, TMP_14, TMP_16, TMP_18, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_27, self = this;
          if (self.attribute_handlers == null) self.attribute_handlers = nil;

          return (self.attribute_handlers = ($truthy($a = self.attribute_handlers) ? $a : $hash2(["style", "class", "on", "data", "selected", "checked", "enabled", "disabled", "props", "properties"], {"style": $send(self, 'lambda', [], (TMP_13 = function(element, _attribute, value){var self = TMP_13.$$s || this, style = nil;
if (element == null) element = nil;if (_attribute == null) _attribute = nil;if (value == null) value = nil;
          if ($truthy(value)) {
              
              style = self.$normalize_style(value);
              return element.$style(style);
              } else {
              return nil
            }}, TMP_13.$$s = self, TMP_13.$$arity = 3, TMP_13)), "class": $send(self, 'lambda', [], (TMP_14 = function(element, attribute, value){var self = TMP_14.$$s || this, TMP_15, $writer = nil;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          
            if ($truthy(value)) {
              value = (function() {if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable')))) {
                return $send(value, 'map', [], (TMP_15 = function(e){var self = TMP_15.$$s || this;
if (e == null) e = nil;
                return self.$underscore_to_dash(e)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15)).$join(" ")
                } else {
                return self.$underscore_to_dash(value)
              }; return nil; })()};
            
            $writer = [attribute, value];
            $send(element, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_14.$$s = self, TMP_14.$$arity = 3, TMP_14)), "on": $send(self, 'lambda', [], (TMP_16 = function(element, attribute, value){var self = TMP_16.$$s || this, TMP_17;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          return $send(self.$resolve_events(value), 'each', [], (TMP_17 = function(event, action){var self = TMP_17.$$s || this;
if (event == null) event = nil;if (action == null) action = nil;
            return $send(element, 'on', [event], action.$to_proc())}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17))}, TMP_16.$$s = self, TMP_16.$$arity = 3, TMP_16)), "data": $send(self, 'lambda', [], (TMP_18 = function(element, attribute, value){var self = TMP_18.$$s || this, TMP_19, TMP_20;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          
            $send(self.$resolve_data(value), 'each', [], (TMP_19 = function(data_key, data_value){var self = TMP_19.$$s || this, $writer = nil;
if (data_key == null) data_key = nil;if (data_value == null) data_value = nil;
            
              $writer = [data_key, self.$resolve_attribute(element, data_key, data_value)];
              $send(element, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19));
            "aria";
            return $send(self.$resolve_aria(value), 'each', [], (TMP_20 = function(aria_key, aria_value){var self = TMP_20.$$s || this, $writer = nil;
if (aria_key == null) aria_key = nil;if (aria_value == null) aria_value = nil;
            
              $writer = [aria_key, self.$resolve_attribute(element, aria_key, aria_value)];
              $send(element, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20));}, TMP_18.$$s = self, TMP_18.$$arity = 3, TMP_18)), "selected": $send(self, 'lambda', [], (TMP_21 = function(element, attribute, value){var self = TMP_21.$$s || this, $writer = nil;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          
            $writer = [value];
            $send(element, 'selected=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_21.$$s = self, TMP_21.$$arity = 3, TMP_21)), "checked": $send(self, 'lambda', [], (TMP_22 = function(element, attribute, value){var self = TMP_22.$$s || this, $writer = nil;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          
            $writer = [value];
            $send(element, 'checked=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_22.$$s = self, TMP_22.$$arity = 3, TMP_22)), "enabled": $send(self, 'lambda', [], (TMP_23 = function(element, attribute, value){var self = TMP_23.$$s || this, $writer = nil;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          
            $writer = ["disabled", value['$!']()];
            $send(element, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_23.$$s = self, TMP_23.$$arity = 3, TMP_23)), "disabled": $send(self, 'lambda', [], (TMP_24 = function(element, attribute, value){var self = TMP_24.$$s || this, $writer = nil;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          
            $writer = ["disabled", value];
            $send(element, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_24.$$s = self, TMP_24.$$arity = 3, TMP_24)), "props": $send(self, 'lambda', [], (TMP_25 = function(element, attribute, value){var self = TMP_25.$$s || this, TMP_26;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          return $send(value, 'each', [], (TMP_26 = function(p, v){var self = TMP_26.$$s || this, $writer = nil;
if (p == null) p = nil;if (v == null) v = nil;
            
              $writer = [p, v];
              $send(element, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26))}, TMP_25.$$s = self, TMP_25.$$arity = 3, TMP_25)), "properties": $send(self, 'lambda', [], (TMP_27 = function(element, attribute, value){var self = TMP_27.$$s || this, TMP_28;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          return $send(value, 'each', [], (TMP_28 = function(p, v){var self = TMP_28.$$s || this, $writer = nil;
if (p == null) p = nil;if (v == null) v = nil;
            
              $writer = [p, v];
              $send(element, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_28.$$s = self, TMP_28.$$arity = 2, TMP_28))}, TMP_27.$$s = self, TMP_27.$$arity = 3, TMP_27))})))
        }, TMP_DOM_attribute_handlers_29.$$arity = 0);
        
        Opal.defn(self, '$default_attribute_handler', TMP_DOM_default_attribute_handler_31 = function $$default_attribute_handler() {
          var $a, TMP_30, self = this;
          if (self.default_attribute_handler == null) self.default_attribute_handler = nil;

          return (self.default_attribute_handler = ($truthy($a = self.default_attribute_handler) ? $a : $send(self, 'lambda', [], (TMP_30 = function(element, attribute, value){var self = TMP_30.$$s || this, $b, $writer = nil;
if (element == null) element = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
          
            if ($truthy(value)) {
              
              attribute = self.$strip_underscores(attribute);
              if (attribute['$==']("value")) {
              } else if ($truthy(($truthy($b = value['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? $b : value['$is_a?'](Opal.const_get_relative($nesting, 'Symbol'))))) {
                value = self.$underscore_to_dash(value.$to_s())};
              if (attribute['$==']("iframe")) {
                console.log("" + ("robe/client/dom") + "#" + (198) + " : " + (nil) + " : attribute=" + (attribute) + " value=" + (value))};};
            
            $writer = [attribute, value];
            $send(element, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_30.$$s = self, TMP_30.$$arity = 3, TMP_30))))
        }, TMP_DOM_default_attribute_handler_31.$$arity = 0);
        
        Opal.defn(self, '$resolve_attribute', TMP_DOM_resolve_attribute_32 = function $$resolve_attribute(element, attr, value) {
          var self = this;

          if ($truthy(value['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Binding')))) {
            return self.$resolve_attribute_binding(element, attr, value)
            } else {
            return value
          }
        }, TMP_DOM_resolve_attribute_32.$$arity = 3);
        
        Opal.defn(self, '$resolve_attribute_binding', TMP_DOM_resolve_attribute_binding_34 = function $$resolve_attribute_binding(element, attr, binding) {
          var TMP_33, self = this;

          
          self.$element_bindings(element, $hash2(["init"], {"init": true}))['$<<'](binding);
          $send(binding, 'bind', [], (TMP_33 = function(prior_state){var self = TMP_33.$$s || this;
if (prior_state == null) prior_state = nil;
          return self.$update_element_attribute(binding, prior_state, element, attr)}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33));
          return binding.$initial();
        }, TMP_DOM_resolve_attribute_binding_34.$$arity = 3);
        
        Opal.defn(self, '$update_element_attribute', TMP_DOM_update_element_attribute_36 = function $$update_element_attribute(binding, prior_state, element, attr) {
          var TMP_35, self = this;

          return $send(self.$window(), 'animation_frame', [], (TMP_35 = function(){var self = TMP_35.$$s || this, value = nil;

          
            value = binding.$resolve(prior_state);
            return self.$set_attribute(element, attr, value);}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35))
        }, TMP_DOM_update_element_attribute_36.$$arity = 4);
        
        Opal.defn(self, '$set_content', TMP_DOM_set_content_38 = function $$set_content(element, content) {
          var TMP_37, self = this;

          if ($truthy(content['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable')))) {
            return $send(content, 'each', [], (TMP_37 = function(child){var self = TMP_37.$$s || this;
if (child == null) child = nil;
            return self.$append_content(element, child)}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37))
            } else {
            return self.$append_content(element, content)
          }
        }, TMP_DOM_set_content_38.$$arity = 2);
        
        Opal.defn(self, '$append_content', TMP_DOM_append_content_39 = function $$append_content(element, content) {
          var self = this;

          
          content = self.$sanitize_content(content, element);
          if ($truthy(content)) {
            return element['$<<'](content)
            } else {
            return nil
          };
        }, TMP_DOM_append_content_39.$$arity = 2);
        
        Opal.defn(self, '$sanitize_content', TMP_DOM_sanitize_content_40 = function $$sanitize_content(content, element) {
          var self = this, $case = nil;

          if (element == null) {
            element = nil;
          }
          return (function() {$case = content;
          if (Opal.const_get_relative($nesting, 'TAG_CLASS')['$===']($case)) {return content.$to_element()}
          else if (Opal.const_get_relative($nesting, 'ELEMENT_CLASS')['$===']($case)) {return content}
          else if (Opal.const_get_relative($nesting, 'Enumerable')['$===']($case)) {return self.$tag("div", content)}
          else if (Opal.const_get_relative($nesting, 'BINDING_CLASS')['$===']($case)) {if ($truthy(element)) {
            return self.$resolve_bound_content(element, content)
            } else {
            return self.$fail("" + "binding " + (self.$binding().$where()) + " must belong to parent element : cannot be root")
          }}
          else if (Opal.const_get_relative($nesting, 'COMPONENT_CLASS')['$===']($case)) {return content.$root()}
          else if (Opal.const_get_relative($nesting, 'NilClass')['$===']($case)) {return nil}
          else {return content.$to_s()}})()
        }, TMP_DOM_sanitize_content_40.$$arity = -2);
        
        Opal.defn(self, '$resolve_bound_content', TMP_DOM_resolve_bound_content_42 = function $$resolve_bound_content(element, binding) {
          var TMP_41, self = this, current_content = nil;

          
          self.$element_bindings(element, $hash2(["init"], {"init": true}))['$<<'](binding);
          current_content = self.$sanitize_content(binding.$initial(), element);
          $send(binding, 'bind', [], (TMP_41 = function(prior_state){var self = TMP_41.$$s || this, old_content = nil, new_content = nil;
if (prior_state == null) prior_state = nil;
          
            old_content = current_content;
            self.$unbind_descendant_bindings(old_content);
            new_content = binding.$resolve(prior_state);
            new_content = self.$sanitize_content(new_content, element);
            self.$replace_bound_content(element, new_content, old_content);
            return (current_content = new_content);}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41));
          return current_content;
        }, TMP_DOM_resolve_bound_content_42.$$arity = 2);
        
        Opal.defn(self, '$replace_bound_content', TMP_DOM_replace_bound_content_44 = function $$replace_bound_content(element, new_content, old_content) {
          var TMP_43, self = this;

          return $send(self.$window(), 'animation_frame', [], (TMP_43 = function(){var self = TMP_43.$$s || this;

          if ($truthy(old_content)) {
              if ($truthy(new_content)) {
                return element.$replace_child(new_content, old_content)
                } else {
                return element.$remove_child(old_content)
              }
            } else if ($truthy(new_content)) {
              return element['$<<'](new_content)
              } else {
              return nil
            }}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43))
        }, TMP_DOM_replace_bound_content_44.$$arity = 3);
        
        Opal.defn(self, '$normalize_style', TMP_DOM_normalize_style_46 = function $$normalize_style(style) {
          var TMP_45, self = this, result = nil;

          
          if ($truthy(style)) {
            } else {
            return $hash2([], {})
          };
          if ($truthy(style['$respond_to?']("to_h"))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + ("robe/client/dom") + "[" + (325) + "] : style " + (style.$class()) + " must respond to :to_h")
          };
          result = $hash2([], {});
          $send(style.$to_h(), 'each', [], (TMP_45 = function(k, v){var self = TMP_45.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
          
            k = self.$underscore_to_dash(k);
            
            $writer = [k, v.$to_html()];
            $send(result, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_45.$$s = self, TMP_45.$$arity = 2, TMP_45));
          return result;
        }, TMP_DOM_normalize_style_46.$$arity = 1);
        
        Opal.defn(self, '$resolve_events', TMP_DOM_resolve_events_48 = function $$resolve_events(hash) {
          var TMP_47, self = this, result = nil;

          
          result = $hash2([], {});
          $send(hash, 'each', [], (TMP_47 = function(k, v){var self = TMP_47.$$s || this, $a, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
          
            k = self.$strip_underscores(k);
            
            $writer = [k, (function() {if ($truthy(($truthy($a = v['$is_a?'](Opal.const_get_relative($nesting, 'Symbol'))) ? $a : v['$is_a?'](Opal.const_get_relative($nesting, 'String'))))) {
              return self.$method(v)
              } else {
              return v
            }; return nil; })()];
            $send(result, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_47.$$s = self, TMP_47.$$arity = 2, TMP_47));
          return result;
        }, TMP_DOM_resolve_events_48.$$arity = 1);
        
        Opal.defn(self, '$resolve_data', TMP_DOM_resolve_data_50 = function $$resolve_data(hash) {
          var TMP_49, self = this, result = nil;

          
          result = $hash2([], {});
          $send(hash, 'each', [], (TMP_49 = function(k, v){var self = TMP_49.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
          
            k = self.$strip_underscores(k);
            v = v.$to_html();
            if (k.$index("data-")['$=='](0)) {
              
              $writer = [k, v];
              $send(result, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              } else {
              
              $writer = ["" + "data-" + (k), v];
              $send(result, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            };}, TMP_49.$$s = self, TMP_49.$$arity = 2, TMP_49));
          return result;
        }, TMP_DOM_resolve_data_50.$$arity = 1);
        
        Opal.defn(self, '$resolve_aria', TMP_DOM_resolve_aria_52 = function $$resolve_aria(hash) {
          var TMP_51, self = this, result = nil;

          
          result = $hash2([], {});
          $send(hash, 'each', [], (TMP_51 = function(k, v){var self = TMP_51.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
          
            k = self.$strip_underscores(k);
            v = v.$to_html();
            if (k.$index("aria-")['$=='](0)) {
              
              $writer = [k, v];
              $send(result, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              } else {
              
              $writer = ["" + "aria-" + (k), v];
              $send(result, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            };}, TMP_51.$$s = self, TMP_51.$$arity = 2, TMP_51));
          return result;
        }, TMP_DOM_resolve_aria_52.$$arity = 1);
        
        Opal.defn(self, '$strip_underscores', TMP_DOM_strip_underscores_53 = function $$strip_underscores(s) {
          var self = this;

          if ($truthy(s['$include?']("_"))) {
            return s.$to_s().$gsub(/_/, "")
            } else {
            return s
          }
        }, TMP_DOM_strip_underscores_53.$$arity = 1);
        
        Opal.defn(self, '$underscore_to_dash', TMP_DOM_underscore_to_dash_54 = function $$underscore_to_dash(s) {
          var self = this;

          if ($truthy(s['$include?']("_"))) {
            return s.$to_s().$gsub(/_/, "-")
            } else {
            return s
          }
        }, TMP_DOM_underscore_to_dash_54.$$arity = 1);
        
        Opal.defn(self, '$unbind_descendant_bindings', TMP_DOM_unbind_descendant_bindings_56 = function $$unbind_descendant_bindings(element) {
          var $a, TMP_55, self = this;

          if ($truthy(($truthy($a = element) ? element['$is_a?'](Opal.const_get_relative($nesting, 'ELEMENT_CLASS')) : $a))) {
            return $send(self, 'descend', [element], (TMP_55 = function(descendant){var self = TMP_55.$$s || this;
if (descendant == null) descendant = nil;
            return self.$unbind_element_bindings(descendant)}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55))
            } else {
            return nil
          }
        }, TMP_DOM_unbind_descendant_bindings_56.$$arity = 1);
        
        Opal.defn(self, '$unbind_element_bindings', TMP_DOM_unbind_element_bindings_58 = function $$unbind_element_bindings(element) {
          var TMP_57, self = this, bindings = nil;

          
          bindings = self.$element_bindings(element);
          if ($truthy(bindings)) {
            
            $send(bindings, 'each', [], (TMP_57 = function(binding){var self = TMP_57.$$s || this;
if (binding == null) binding = nil;
            return binding.$unbind()}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57));
            return self.$clear_bindings(element);
            } else {
            return nil
          };
        }, TMP_DOM_unbind_element_bindings_58.$$arity = 1);
        
        Opal.defn(self, '$descend', TMP_DOM_descend_59 = function $$descend(node, $kwargs) {
          var TMP_60, self = this, level, $iter = TMP_DOM_descend_59.$$p, block = $iter || nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          level = $kwargs.$$smap["level"];
          if (level == null) {
            level = 0
          }
          if ($iter) TMP_DOM_descend_59.$$p = null;
          
          block.$call(node);
          return $send(node.$children(), 'each', [], (TMP_60 = function(child){var self = TMP_60.$$s || this;
if (child == null) child = nil;
          return $send(self, 'descend', [child, $hash2(["level"], {"level": $rb_plus(level, 1)})], block.$to_proc())}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60));
        }, TMP_DOM_descend_59.$$arity = -2);
        
        Opal.defn(self, '$element_bindings', TMP_DOM_element_bindings_61 = function $$element_bindings(element, $kwargs) {
          var $a, self = this, init, bindings = nil, $writer = nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          init = $kwargs.$$smap["init"];
          if (init == null) {
            init = false
          }
          
          bindings = element.$data()['$[]']("robe::bindings");
          if ($truthy(($truthy($a = init) ? bindings['$nil?']() : $a))) {
            
            $writer = ["robe::bindings", (bindings = [])];
            $send(element.$data(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return bindings;
        }, TMP_DOM_element_bindings_61.$$arity = -2);
        
        Opal.defn(self, '$clear_bindings', TMP_DOM_clear_bindings_62 = function $$clear_bindings(element) {
          var self = this, $writer = nil;

          
          $writer = ["robe::bindings", []];
          $send(element.$data(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_DOM_clear_bindings_62.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
    self.$module_function();
    
    Opal.defn(self, '$dom', TMP_Robe_dom_63 = function $$dom() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'DOM')
    }, TMP_Robe_dom_63.$$arity = 0);
  })($nesting[0], $nesting);
  return ($gvars.dom = Opal.const_get_relative($nesting, 'Robe').$dom());
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["time"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$strftime']);
  return (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_parse_1, TMP_Time_iso8601_2;

    
    Opal.defs(self, '$parse', TMP_Time_parse_1 = function $$parse(str) {
      var self = this;

      return new Date(Date.parse(str))
    }, TMP_Time_parse_1.$$arity = 1);
    return (Opal.defn(self, '$iso8601', TMP_Time_iso8601_2 = function $$iso8601() {
      var self = this;

      return self.$strftime("%FT%T%z")
    }, TMP_Time_iso8601_2.$$arity = 0), nil) && 'iso8601';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["date"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$<=>', '$nonzero?', '$d', '$zero?', '$new', '$class', '$-@', '$+@', '$===', '$coerce', '$==', '$>', '$+', '$allocate', '$join', '$compact', '$map', '$to_proc', '$downcase', '$wrap', '$raise', '$clone', '$jd', '$>>', '$wday', '$-', '$to_s', '$alias_method', '$to_i', '$<', '$*', '$reverse', '$step', '$abs', '$each']);
  return (function($base, $super, $parent_nesting) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Date_initialize_17, TMP_Date_$_18, TMP_Date_$_19, TMP_Date_$lt_20, TMP_Date_$lt$eq_21, TMP_Date_$gt_22, TMP_Date_$gt$eq_23, TMP_Date_$lt$eq$gt_24, TMP_Date_$gt$gt_25, TMP_Date_$lt$lt_26, TMP_Date_clone_27, TMP_Date_day_28, TMP_Date_friday$q_29, TMP_Date_jd_30, TMP_Date_julian$q_31, TMP_Date_monday$q_32, TMP_Date_month_33, TMP_Date_next_34, TMP_Date_next_day_35, TMP_Date_next_month_36, TMP_Date_prev_day_37, TMP_Date_prev_month_38, TMP_Date_saturday$q_39, TMP_Date_strftime_40, TMP_Date_sunday$q_41, TMP_Date_thursday$q_42, TMP_Date_to_s_43, TMP_Date_tuesday$q_44, TMP_Date_step_45, TMP_Date_upto_49, TMP_Date_downto_50, TMP_Date_wday_51, TMP_Date_wednesday$q_52, TMP_Date_year_53, TMP_Date_cwday_54, TMP_Date_cweek_55;

    def.date = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    (function($base, $super, $parent_nesting) {
      function $Infinity(){};
      var self = $Infinity = $klass($base, $super, 'Infinity', $Infinity);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Infinity_initialize_1, TMP_Infinity_d_2, TMP_Infinity_zero$q_3, TMP_Infinity_finite$q_4, TMP_Infinity_infinite$q_5, TMP_Infinity_nan$q_6, TMP_Infinity_abs_7, TMP_Infinity_$$_8, TMP_Infinity_$$_9, TMP_Infinity_$lt$eq$gt_10, TMP_Infinity_coerce_11, TMP_Infinity_to_f_12;

      def.d = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Comparable'));
      
      Opal.defn(self, '$initialize', TMP_Infinity_initialize_1 = function $$initialize(d) {
        var self = this;

        if (d == null) {
          d = 1;
        }
        return (self.d = d['$<=>'](0))
      }, TMP_Infinity_initialize_1.$$arity = -1);
      
      Opal.defn(self, '$d', TMP_Infinity_d_2 = function $$d() {
        var self = this;

        return self.d
      }, TMP_Infinity_d_2.$$arity = 0);
      
      Opal.defn(self, '$zero?', TMP_Infinity_zero$q_3 = function() {
        var self = this;

        return false
      }, TMP_Infinity_zero$q_3.$$arity = 0);
      
      Opal.defn(self, '$finite?', TMP_Infinity_finite$q_4 = function() {
        var self = this;

        return false
      }, TMP_Infinity_finite$q_4.$$arity = 0);
      
      Opal.defn(self, '$infinite?', TMP_Infinity_infinite$q_5 = function() {
        var self = this;

        return self.$d()['$nonzero?']()
      }, TMP_Infinity_infinite$q_5.$$arity = 0);
      
      Opal.defn(self, '$nan?', TMP_Infinity_nan$q_6 = function() {
        var self = this;

        return self.$d()['$zero?']()
      }, TMP_Infinity_nan$q_6.$$arity = 0);
      
      Opal.defn(self, '$abs', TMP_Infinity_abs_7 = function $$abs() {
        var self = this;

        return self.$class().$new()
      }, TMP_Infinity_abs_7.$$arity = 0);
      
      Opal.defn(self, '$-@', TMP_Infinity_$$_8 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']())
      }, TMP_Infinity_$$_8.$$arity = 0);
      
      Opal.defn(self, '$+@', TMP_Infinity_$$_9 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']())
      }, TMP_Infinity_$$_9.$$arity = 0);
      
      Opal.defn(self, '$<=>', TMP_Infinity_$lt$eq$gt_10 = function(other) {
        var $a, $b, self = this, $case = nil, l = nil, r = nil;

        
        $case = other;
        if (Opal.const_get_relative($nesting, 'Infinity')['$===']($case)) {return self.$d()['$<=>'](other.$d())}
        else if (Opal.const_get_relative($nesting, 'Numeric')['$===']($case)) {return self.$d()}
        else {
        try {
          
          $b = other.$coerce(self), $a = Opal.to_ary($b), (l = ($a[0] == null ? nil : $a[0])), (r = ($a[1] == null ? nil : $a[1])), $b;
          return l['$<=>'](r);
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NoMethodError')])) {
            try {
              nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };};
        return nil;
      }, TMP_Infinity_$lt$eq$gt_10.$$arity = 1);
      
      Opal.defn(self, '$coerce', TMP_Infinity_coerce_11 = function $$coerce(other) {
        var self = this, $iter = TMP_Infinity_coerce_11.$$p, $yield = $iter || nil, $case = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Infinity_coerce_11.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return (function() {$case = other;
        if (Opal.const_get_relative($nesting, 'Numeric')['$===']($case)) {return [self.$d()['$-@'](), self.$d()]}
        else {return $send(self, Opal.find_super_dispatcher(self, 'coerce', TMP_Infinity_coerce_11, false), $zuper, $iter)}})()
      }, TMP_Infinity_coerce_11.$$arity = 1);
      return (Opal.defn(self, '$to_f', TMP_Infinity_to_f_12 = function $$to_f() {
        var self = this;

        
        if (self.d['$=='](0)) {
          return 0};
        if ($truthy($rb_gt(self.d, 0))) {
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')
          } else {
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')['$-@']()
        };
      }, TMP_Infinity_to_f_12.$$arity = 0), nil) && 'to_f';
    })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
    Opal.const_set($nesting[0], 'JULIAN', Opal.const_get_relative($nesting, 'Infinity').$new());
    Opal.const_set($nesting[0], 'GREGORIAN', Opal.const_get_relative($nesting, 'Infinity').$new()['$-@']());
    Opal.const_set($nesting[0], 'ITALY', 2299161);
    Opal.const_set($nesting[0], 'ENGLAND', 2361222);
    Opal.const_set($nesting[0], 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));
    Opal.const_set($nesting[0], 'ABBR_MONTHNAMES', ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]);
    Opal.const_set($nesting[0], 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
    Opal.const_set($nesting[0], 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_wrap_13, TMP_parse_14, TMP_today_15, TMP_gregorian_leap$q_16;

      
      Opal.alias(self, "civil", "new");
      
      Opal.defn(self, '$wrap', TMP_wrap_13 = function $$wrap(native$) {
        var self = this, instance = nil;

        
        instance = self.$allocate();
        instance.date = native$;
        return instance;
      }, TMP_wrap_13.$$arity = 1);
      
      Opal.defn(self, '$parse', TMP_parse_14 = function $$parse(string, comp) {
        var self = this;

        if (comp == null) {
          comp = true;
        }
        
        
        var current_date = new Date();

        var current_day = current_date.getDate(),
            current_month = current_date.getMonth(),
            current_year = current_date.getFullYear(),
            current_wday = current_date.getDay(),
            full_month_name_regexp = Opal.const_get_relative($nesting, 'MONTHNAMES').$compact().$join("|");

        function match1(match) { return match[1]; }
        function match2(match) { return match[2]; }
        function match3(match) { return match[3]; }
        function match4(match) { return match[4]; }

        // Converts passed short year (0..99)
        // to a 4-digits year in the range (1969..2068)
        function fromShortYear(fn) {
          return function(match) {
            var short_year = fn(match);

            if (short_year >= 69) {
              short_year += 1900;
            } else {
              short_year += 2000;
            }
            return short_year;
          }
        }

        // Converts month abbr (nov) to a month number
        function fromMonthAbbr(fn) {
          return function(match) {
            var abbr = fn(match).toLowerCase();
            return Opal.const_get_relative($nesting, 'ABBR_MONTHNAMES').indexOf(abbr) + 1;
          }
        }

        function toInt(fn) {
          return function(match) {
            var value = fn(match);
            return parseInt(value, 10);
          }
        }

        // Depending on the 'comp' value appends 20xx to a passed year
        function to2000(fn) {
          return function(match) {
            var value = fn(match);
            if (comp) {
              return value + 2000;
            } else {
              return value;
            }
          }
        }

        // Converts passed week day name to a day number
        function fromDayName(fn) {
          return function(match) {
            var dayname = fn(match),
                wday = $send(Opal.const_get_relative($nesting, 'DAYNAMES'), 'map', [], "downcase".$to_proc()).indexOf((dayname).$downcase());

            return current_day - current_wday + wday;
          }
        }

        // Converts passed month name to a month number
        function fromFullMonthName(fn) {
          return function(match) {
            var month_name = fn(match);
            return $send(Opal.const_get_relative($nesting, 'MONTHNAMES').$compact(), 'map', [], "downcase".$to_proc()).indexOf((month_name).$downcase()) + 1;
          }
        }

        var rules = [
          {
            // DD as month day number
            regexp: /^(\d{2})$/,
            year: current_year,
            month: current_month,
            day: toInt(match1)
          },
          {
            // DDD as year day number
            regexp: /^(\d{3})$/,
            year: current_year,
            month: 0,
            day: toInt(match1)
          },
          {
            // MMDD as month and day
            regexp: /^(\d{2})(\d{2})$/,
            year: current_year,
            month: toInt(match1),
            day: toInt(match2)
          },
          {
            // YYDDD as year and day number in 1969--2068
            regexp: /^(\d{2})(\d{3})$/,
            year: fromShortYear(toInt(match1)),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYMMDD as year, month and day in 1969--2068
            regexp: /^(\d{2})(\d{2})(\d{2})$/,
            year: fromShortYear(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YYYYDDD as year and day number
            regexp: /^(\d{4})(\d{3})$/,
            year: toInt(match1),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYYYMMDD as year, month and day number
            regexp: /^(\d{4})(\d{2})(\d{2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // mmm YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{3,4})$/,
            year: toInt(match2),
            month: fromMonthAbbr(match1),
            day: 1
          },
          {
            // DD mmm YYYY
            regexp: /^(\d{1,2})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match2),
            day: toInt(match1)
          },
          {
            // mmm DD YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match1),
            day: toInt(match2)
          },
          {
            // YYYY mmm DD
            regexp: /^(\d{3,4})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{1,2})$/i,
            year: toInt(match1),
            month: fromMonthAbbr(match2),
            day: toInt(match3)
          },
          {
            // YYYY-MM-DD YYYY/MM/DD YYYY.MM.DD
            regexp: /^(\-?\d{3,4})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YY-MM-DD
            regexp: /^(\d{2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: to2000(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // DD-MM-YYYY
            regexp: /^(\d{1,2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\-?\d{3,4})$/,
            year: toInt(match3),
            month: toInt(match2),
            day: toInt(match1)
          },
          {
            // ddd
            regexp: new RegExp("^(" + Opal.const_get_relative($nesting, 'DAYNAMES').$join("|") + ")$", 'i'),
            year: current_year,
            month: current_month,
            day: fromDayName(match1)
          },
          {
            // monthname daynumber YYYY
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // monthname daynumber
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)", "i"),
            year: current_year,
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // daynumber monthname YYYY
            regexp: new RegExp("^(\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match3),
            day: toInt(match1)
          },
          {
            // YYYY monthname daynumber
            regexp: new RegExp("^(\\-?\\d{3,4})[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)$", "i"),
            year: toInt(match1),
            month: fromFullMonthName(match2),
            day: toInt(match3)
          }
        ]

        var rule, i, match;

        for (i = 0; i < rules.length; i++) {
          rule = rules[i];
          match = rule.regexp.exec(string);
          if (match) {
            var year = rule.year;
            if (typeof(year) === 'function') {
              year = year(match);
            }

            var month = rule.month;
            if (typeof(month) === 'function') {
              month = month(match) - 1
            }

            var day = rule.day;
            if (typeof(day) === 'function') {
              day = day(match);
            }

            var result = new Date(year, month, day);

            // an edge case, JS can't handle 'new Date(1)', minimal year is 1970
            if (year >= 0 && year <= 1970) {
              result.setFullYear(year);
            }

            return self.$wrap(result);
          }
        }
      ;
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "invalid date");
      }, TMP_parse_14.$$arity = -2);
      
      Opal.defn(self, '$today', TMP_today_15 = function $$today() {
        var self = this;

        return self.$wrap(new Date())
      }, TMP_today_15.$$arity = 0);
      return (Opal.defn(self, '$gregorian_leap?', TMP_gregorian_leap$q_16 = function(year) {
        var self = this;

        return (new Date(year, 1, 29).getMonth()-1) === 0
      }, TMP_gregorian_leap$q_16.$$arity = 1), nil) && 'gregorian_leap?';
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.defn(self, '$initialize', TMP_Date_initialize_17 = function $$initialize(year, month, day, start) {
      var self = this;

      if (year == null) {
        year = -4712;
      }
      if (month == null) {
        month = 1;
      }
      if (day == null) {
        day = 1;
      }
      if (start == null) {
        start = Opal.const_get_relative($nesting, 'ITALY');
      }
      return (self.date = new Date(year, month - 1, day))
    }, TMP_Date_initialize_17.$$arity = -1);
    
    Opal.defn(self, '$-', TMP_Date_$_18 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - date);
        return result;
      }
      else if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
      }
    
    }, TMP_Date_$_18.$$arity = 1);
    
    Opal.defn(self, '$+', TMP_Date_$_19 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() + date);
        return result;
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
      }
    
    }, TMP_Date_$_19.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Date_$lt_20 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a < b;
    
    }, TMP_Date_$lt_20.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Date_$lt$eq_21 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a <= b;
    
    }, TMP_Date_$lt$eq_21.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Date_$gt_22 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a > b;
    
    }, TMP_Date_$gt_22.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Date_$gt$eq_23 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a >= b;
    
    }, TMP_Date_$gt$eq_23.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Date_$lt$eq$gt_24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.$jd()['$<=>'](other)
      }

      if (Opal.const_get_relative($nesting, 'Date')['$==='](other)) {
        var a = self.date, b = other.date;
        a.setHours(0, 0, 0, 0);
        b.setHours(0, 0, 0, 0);

        if (a < b) {
          return -1;
        }
        else if (a > b) {
          return 1;
        }
        else {
          return 0;
        }
      } else {
        return nil;
      }
    
    }, TMP_Date_$lt$eq$gt_24.$$arity = 1);
    
    Opal.defn(self, '$>>', TMP_Date_$gt$gt_25 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
      }

      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    
    }, TMP_Date_$gt$gt_25.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Date_$lt$lt_26 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
      }

      return self['$>>'](-n);
    
    }, TMP_Date_$lt$lt_26.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$clone', TMP_Date_clone_27 = function $$clone() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Date').$wrap(new Date(self.date.getTime()))
    }, TMP_Date_clone_27.$$arity = 0);
    
    Opal.defn(self, '$day', TMP_Date_day_28 = function $$day() {
      var self = this;

      return self.date.getDate()
    }, TMP_Date_day_28.$$arity = 0);
    
    Opal.defn(self, '$friday?', TMP_Date_friday$q_29 = function() {
      var self = this;

      return self.$wday()['$=='](5)
    }, TMP_Date_friday$q_29.$$arity = 0);
    
    Opal.defn(self, '$jd', TMP_Date_jd_30 = function $$jd() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    
    }, TMP_Date_jd_30.$$arity = 0);
    
    Opal.defn(self, '$julian?', TMP_Date_julian$q_31 = function() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12)
    }, TMP_Date_julian$q_31.$$arity = 0);
    
    Opal.defn(self, '$monday?', TMP_Date_monday$q_32 = function() {
      var self = this;

      return self.$wday()['$=='](1)
    }, TMP_Date_monday$q_32.$$arity = 0);
    
    Opal.defn(self, '$month', TMP_Date_month_33 = function $$month() {
      var self = this;

      return self.date.getMonth() + 1
    }, TMP_Date_month_33.$$arity = 0);
    
    Opal.defn(self, '$next', TMP_Date_next_34 = function $$next() {
      var self = this;

      return $rb_plus(self, 1)
    }, TMP_Date_next_34.$$arity = 0);
    
    Opal.defn(self, '$next_day', TMP_Date_next_day_35 = function $$next_day(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return $rb_plus(self, n)
    }, TMP_Date_next_day_35.$$arity = -1);
    
    Opal.defn(self, '$next_month', TMP_Date_next_month_36 = function $$next_month() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    
    }, TMP_Date_next_month_36.$$arity = 0);
    
    Opal.defn(self, '$prev_day', TMP_Date_prev_day_37 = function $$prev_day(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return $rb_minus(self, n)
    }, TMP_Date_prev_day_37.$$arity = -1);
    
    Opal.defn(self, '$prev_month', TMP_Date_prev_month_38 = function $$prev_month() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    
    }, TMP_Date_prev_month_38.$$arity = 0);
    
    Opal.defn(self, '$saturday?', TMP_Date_saturday$q_39 = function() {
      var self = this;

      return self.$wday()['$=='](6)
    }, TMP_Date_saturday$q_39.$$arity = 0);
    
    Opal.defn(self, '$strftime', TMP_Date_strftime_40 = function $$strftime(format) {
      var self = this;

      if (format == null) {
        format = "";
      }
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format);
    
    }, TMP_Date_strftime_40.$$arity = -1);
    self.$alias_method("succ", "next");
    
    Opal.defn(self, '$sunday?', TMP_Date_sunday$q_41 = function() {
      var self = this;

      return self.$wday()['$=='](0)
    }, TMP_Date_sunday$q_41.$$arity = 0);
    
    Opal.defn(self, '$thursday?', TMP_Date_thursday$q_42 = function() {
      var self = this;

      return self.$wday()['$=='](4)
    }, TMP_Date_thursday$q_42.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Date_to_s_43 = function $$to_s() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    
    }, TMP_Date_to_s_43.$$arity = 0);
    
    Opal.defn(self, '$tuesday?', TMP_Date_tuesday$q_44 = function() {
      var self = this;

      return self.$wday()['$=='](2)
    }, TMP_Date_tuesday$q_44.$$arity = 0);
    
    Opal.defn(self, '$step', TMP_Date_step_45 = function $$step(limit, step) {
      var TMP_46, TMP_47, TMP_48, self = this, $iter = TMP_Date_step_45.$$p, block = $iter || nil, steps_count = nil, steps = nil, result = nil;

      if (step == null) {
        step = 1;
      }
      if ($iter) TMP_Date_step_45.$$p = null;
      
      steps_count = $rb_minus(limit, self).$to_i();
      if ($truthy($rb_lt($rb_times(steps_count, step), 0))) {
        steps = []
      } else if ($truthy($rb_lt(steps_count, 0))) {
        steps = $send(Opal.Range.$new(0, steps_count['$-@'](), false).$step(step.$abs()), 'map', [], (TMP_46 = function(i){var self = TMP_46.$$s || this;
if (i == null) i = nil;
        return i['$-@']()}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46)).$reverse()
        } else {
        steps = Opal.Range.$new(0, steps_count, false).$step(step.$abs())
      };
      result = $send(steps, 'map', [], (TMP_47 = function(i){var self = TMP_47.$$s || this;
if (i == null) i = nil;
      return $rb_plus(self, i)}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47));
      if ((block !== nil)) {
        
        $send(result, 'each', [], (TMP_48 = function(i){var self = TMP_48.$$s || this;
if (i == null) i = nil;
        return Opal.yield1(block, i);}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48));
        return self;
        } else {
        return result
      };
    }, TMP_Date_step_45.$$arity = -2);
    
    Opal.defn(self, '$upto', TMP_Date_upto_49 = function $$upto(max) {
      var self = this, $iter = TMP_Date_upto_49.$$p, block = $iter || nil;

      if ($iter) TMP_Date_upto_49.$$p = null;
      return $send(self, 'step', [max, 1], block.$to_proc())
    }, TMP_Date_upto_49.$$arity = 1);
    
    Opal.defn(self, '$downto', TMP_Date_downto_50 = function $$downto(min) {
      var self = this, $iter = TMP_Date_downto_50.$$p, block = $iter || nil;

      if ($iter) TMP_Date_downto_50.$$p = null;
      return $send(self, 'step', [min, -1], block.$to_proc())
    }, TMP_Date_downto_50.$$arity = 1);
    
    Opal.defn(self, '$wday', TMP_Date_wday_51 = function $$wday() {
      var self = this;

      return self.date.getDay()
    }, TMP_Date_wday_51.$$arity = 0);
    
    Opal.defn(self, '$wednesday?', TMP_Date_wednesday$q_52 = function() {
      var self = this;

      return self.$wday()['$=='](3)
    }, TMP_Date_wednesday$q_52.$$arity = 0);
    
    Opal.defn(self, '$year', TMP_Date_year_53 = function $$year() {
      var self = this;

      return self.date.getFullYear()
    }, TMP_Date_year_53.$$arity = 0);
    
    Opal.defn(self, '$cwday', TMP_Date_cwday_54 = function $$cwday() {
      var self = this;

      return self.date.getDay() || 7;
    }, TMP_Date_cwday_54.$$arity = 0);
    
    Opal.defn(self, '$cweek', TMP_Date_cweek_55 = function $$cweek() {
      var self = this;

      
      var d = new Date(self.date);
      d.setHours(0,0,0);
      d.setDate(d.getDate()+4-(d.getDay()||7));
      return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
    
    }, TMP_Date_cweek_55.$$arity = 0);
    
    function days_in_month(year, month) {
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    }
  ;
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/errors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$error', '$logger', '$name', '$class']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Exception(){};
      var self = $Exception = $klass($base, $super, 'Exception', $Exception);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Exception_initialize_1;

      return (Opal.defn(self, '$initialize', TMP_Exception_initialize_1 = function $$initialize(msg) {
        var self = this, $iter = TMP_Exception_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Exception_initialize_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Exception_initialize_1, false), $zuper, $iter);
        return Opal.const_get_relative($nesting, 'Robe').$logger().$error("" + (self.$class().$name()) + " => " + (msg));
      }, TMP_Exception_initialize_1.$$arity = 1), nil) && 'initialize'
    })($nesting[0], Opal.const_get_qualified('::', 'RuntimeError'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ConfigError(){};
      var self = $ConfigError = $klass($base, $super, 'ConfigError', $ConfigError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Exception'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $DBError(){};
      var self = $DBError = $klass($base, $super, 'DBError', $DBError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Exception'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ModelError(){};
      var self = $ModelError = $klass($base, $super, 'ModelError', $ModelError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Exception'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $PromiseError(){};
      var self = $PromiseError = $klass($base, $super, 'PromiseError', $PromiseError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Exception'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $UserError(){};
      var self = $UserError = $klass($base, $super, 'UserError', $UserError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Exception'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $TaskError(){};
      var self = $TaskError = $klass($base, $super, 'TaskError', $TaskError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Exception'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $TimeoutError(){};
      var self = $TimeoutError = $klass($base, $super, 'TimeoutError', $TimeoutError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Exception'), $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/model"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$!', '$mutable?', '$<', '$superclass', '$respond_to?', '$dup', '$send', '$attr_specs', '$[]', '$[]=', '$-', '$attrs', '$map', '$is_a?', '$to_sym', '$attr?', '$<<', '$define_method', '$attr_spec', '$each', '$===', '$==', '$to_a', '$raise', '$name', '$>', '$first', '$last', '$>=', '$nil?', '$lambda', '$to_s', '$to_i', '$to_f', '$parse', '$__attr_read_value', '$attr', '$attrs_defined', '$include?', '$join', '$new', '$must_be_attr!', '$key?', '$after_initialize', '$merge', '$call', '$fail', '$class', '$merge_hash', '$keys', '$to_h', '$must_be_mutable!', '$tap', '$write_value', '$instance_variable_set', '$key', '$reduce', '$alias_method', '$to_json', '$to_h_without_circulars', '$csv_head', '$protected', '$empty?', '$length', '$result', '$=~']);
  
  self.$require("time");
  self.$require("date");
  self.$require("json");
  self.$require("robe/common/errors");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Model(){};
      var self = $Model = $klass($base, $super, 'Model', $Model);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Model_mutable$q_1, TMP_Model_immutable$q_2, TMP_Model_attrs_3, TMP_Model_attr_specs_4, TMP_Model_attr_spec_5, TMP_Model_read_attrs_6, TMP_Model_write_attrs_8, TMP_Model_attr_20, TMP_Model_read_state_methods_21, TMP_Model_reduce_dup_methods_22, TMP_Model_reduce_mutate_methods_23, TMP_Model_attrs_defined_24, TMP_Model_attr$q_25, TMP_Model_csv_head_26, TMP_Model_from_hash_27, TMP_Model_from_json_28, TMP_Model_initialize_31, TMP_Model_after_initialize_32, TMP_Model_mutate$B_33, TMP_Model_merge$B_34, TMP_Model_merge_35, TMP_Model_attr$q_36, TMP_Model_$eq$eq_38, TMP_Model_$$_39, TMP_Model_$$$eq_40, TMP_Model_get_41, TMP_Model_set_42, TMP_Model_values_44, TMP_Model_to_csv_47, TMP_Model_clone_48, TMP_Model_dup_49, TMP_Model_to_h_50, TMP_Model_merge_hash_54, TMP_Model_to_json_55, TMP_Model_to_h_without_circulars_56, TMP_Model_to_s_57, TMP_Model_mutable$q_58, TMP_Model_attrs_59, TMP_Model_csv_head_60, TMP_Model_must_be_attrs$B_62, TMP_Model_must_be_attr$B_63, TMP_Model_must_be_mutable$B_64, TMP_Model_write_value_65, TMP_Model___attr_read_value_66;

      def.hash = nil;
      
      Opal.const_set($nesting[0], 'ATTR_SPEC_SINGLE_TYPE', 0);
      Opal.const_set($nesting[0], 'ATTR_SPEC_MULTI_TYPE', 1);
      Opal.const_set($nesting[0], 'ATTR_SPEC_DEFAULT', 2);
      Opal.const_set($nesting[0], 'ATTR_SPEC_NIL', 3);
      Opal.const_set($nesting[0], 'ATTR_SPEC_READ', 4);
      Opal.const_set($nesting[0], 'ATTR_SPEC_WRITE', 5);
      Opal.const_set($nesting[0], 'ATTR_SPEC_INSIST', 6);
      Opal.const_set($nesting[0], 'ATTR_SPEC_FIX_LENGTH', 7);
      Opal.const_set($nesting[0], 'ATTR_SPEC_VAR_LENGTH', 8);
      Opal.const_set($nesting[0], 'ATTR_SPEC_ENUM', 9);
      Opal.const_set($nesting[0], 'ATTR_SPEC_REGEXP', 10);
      Opal.defs(self, '$mutable?', TMP_Model_mutable$q_1 = function() {
        var self = this;

        return true
      }, TMP_Model_mutable$q_1.$$arity = 0);
      Opal.defs(self, '$immutable?', TMP_Model_immutable$q_2 = function() {
        var self = this;

        return self['$mutable?']()['$!']()
      }, TMP_Model_immutable$q_2.$$arity = 0);
      Opal.defs(self, '$attrs', TMP_Model_attrs_3 = function $$attrs() {
        var $a, $b, self = this;
        if (self.attrs == null) self.attrs = nil;

        return (self.attrs = ($truthy($a = self.attrs) ? $a : (function() {if ($truthy(($truthy($b = $rb_lt(self.$superclass(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Model'))) ? self.$superclass()['$respond_to?']("attrs") : $b))) {
          return self.$superclass().$send("attrs").$dup()
          } else {
          return []
        }; return nil; })()))
      }, TMP_Model_attrs_3.$$arity = 0);
      Opal.defs(self, '$attr_specs', TMP_Model_attr_specs_4 = function $$attr_specs() {
        var $a, $b, self = this;
        if (self.attr_specs == null) self.attr_specs = nil;

        return (self.attr_specs = ($truthy($a = self.attr_specs) ? $a : (function() {if ($truthy(($truthy($b = $rb_lt(self.$superclass(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Model'))) ? self.$superclass()['$respond_to?']("attr_specs") : $b))) {
          return self.$superclass().$send("attr_specs").$dup()
          } else {
          return $hash2([], {})
        }; return nil; })()))
      }, TMP_Model_attr_specs_4.$$arity = 0);
      Opal.defs(self, '$attr_spec', TMP_Model_attr_spec_5 = function $$attr_spec(attr) {
        var $a, self = this, $logical_op_recvr_tmp_2 = nil, $writer = nil;

        
        $logical_op_recvr_tmp_2 = self.$attr_specs();
        return ($truthy($a = $logical_op_recvr_tmp_2['$[]'](attr)) ? $a : (($writer = [attr, []]), $send($logical_op_recvr_tmp_2, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      }, TMP_Model_attr_spec_5.$$arity = 1);
      Opal.defs(self, '$read_attrs', TMP_Model_read_attrs_6 = function $$read_attrs() {
        var self = this;

        return self.$attrs()
      }, TMP_Model_read_attrs_6.$$arity = 0);
      Opal.defs(self, '$write_attrs', TMP_Model_write_attrs_8 = function $$write_attrs() {
        var $a, TMP_7, self = this;
        if (self.write_attrs == null) self.write_attrs = nil;

        return (self.write_attrs = ($truthy($a = self.write_attrs) ? $a : (function() {if ($truthy(self['$mutable?']())) {
          return $send(self.$attrs(), 'map', [], (TMP_7 = function(attr){var self = TMP_7.$$s || this;
if (attr == null) attr = nil;
          return "" + (attr) + "="}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
          } else {
          return []
        }; return nil; })()))
      }, TMP_Model_write_attrs_8.$$arity = 0);
      Opal.defs(self, '$attr', TMP_Model_attr_20 = function $$attr($a_rest) {
        var $b, $c, TMP_9, TMP_10, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, self = this, args, attr = nil, arg_spec = nil, spec = nil, $writer = nil, type = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        if ($truthy(($truthy($b = ($truthy($c = args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Symbol'))) ? $c : args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'String')))) ? args['$[]'](1)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $b))) {
          
          attr = args['$[]'](0).$to_sym();
          if ($truthy(self['$attr?'](attr))) {
            } else {
            
            self.$attrs()['$<<'](attr);
            $send(self, 'define_method', [attr], (TMP_9 = function(){var self = TMP_9.$$s || this;
              if (self.hash == null) self.hash = nil;

            return self.hash['$[]'](attr)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
            if ($truthy((arg_spec = args['$[]'](1)))) {
              
              spec = self.$attr_spec(attr);
              $send(arg_spec, 'each', [], (TMP_10 = function(key, value){var self = TMP_10.$$s || this, TMP_11, $a, $d, index = nil, $case = nil, $writer = nil;
if (key == null) key = nil;if (value == null) value = nil;
              
                index = (function() {$case = key;
                if ("type"['$===']($case)) {if (value['$==']("boolean")) {
                  
                  value = [Opal.const_get_relative($nesting, 'TrueClass'), Opal.const_get_relative($nesting, 'FalseClass')];
                  return Opal.const_get_relative($nesting, 'ATTR_SPEC_MULTI_TYPE');
                } else if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Class')))) {
                  return Opal.const_get_relative($nesting, 'ATTR_SPEC_SINGLE_TYPE')
                } else if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable')))) {
                  
                  value = value.$to_a();
                  $send(value, 'each', [], (TMP_11 = function(e){var self = TMP_11.$$s || this;
if (e == null) e = nil;
                  if ($truthy(e['$is_a?'](Opal.const_get_relative($nesting, 'Class')))) {
                      return nil
                      } else {
                      return self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : each value of " + (key) + " must be a Class")
                    }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
                  return Opal.const_get_relative($nesting, 'ATTR_SPEC_MULTI_TYPE');
                  } else {
                  return self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : value of " + (key) + " must be a Class or Array of Class")
                }}
                else if ("default"['$===']($case)) {return Opal.const_get_relative($nesting, 'ATTR_SPEC_DEFAULT')}
                else if ("read"['$===']($case) || "write"['$===']($case)) {
                if ($truthy(($truthy($a = value['$is_a?'](Opal.const_get_relative($nesting, 'Proc'))) ? $a : value['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))))) {
                  } else {
                  self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : value of " + (key) + " must be a Proc or Hash to coerce/map values")
                };
                if (key['$==']("read")) {
                  return Opal.const_get_relative($nesting, 'ATTR_SPEC_READ')
                  } else {
                  return Opal.const_get_relative($nesting, 'ATTR_SPEC_WRITE')
                };}
                else if ("insist"['$===']($case)) {
                if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
                  } else {
                  self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : value of " + (key) + " must be a Proc")
                };
                return Opal.const_get_relative($nesting, 'ATTR_SPEC_INSIST');}
                else if ("nil"['$===']($case)) {
                if ($truthy(($truthy($a = value['$=='](true)) ? $a : value['$=='](false)))) {
                  } else {
                  self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : value of " + (key) + " spec must be true or false")
                };
                return Opal.const_get_relative($nesting, 'ATTR_SPEC_NIL');}
                else if ("enum"['$===']($case)) {
                if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable')))) {
                  } else {
                  self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : value of " + (key) + " must be an Enumerable, e.g. Array or Range")
                };
                return Opal.const_get_relative($nesting, 'ATTR_SPEC_ENUM');}
                else if ("regexp"['$===']($case)) {
                if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Regexp')))) {
                  } else {
                  self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : value of " + (key) + " must be an Regexp")
                };
                if (arg_spec['$[]']("type")['$=='](Opal.const_get_relative($nesting, 'String'))) {
                  } else {
                  self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : type must be String to specify regexp")
                };
                return Opal.const_get_relative($nesting, 'ATTR_SPEC_REGEXP');}
                else if ("length"['$===']($case)) {if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Integer')))) {
                  
                  if ($truthy($rb_gt(value, 0))) {
                    } else {
                    self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : value of " + (key) + " must be greater than 0")
                  };
                  return Opal.const_get_relative($nesting, 'ATTR_SPEC_FIX_LENGTH');
                } else if ($truthy(($truthy($a = ($truthy($d = value['$is_a?'](Opal.const_get_relative($nesting, 'Range'))) ? value.$first()['$is_a?'](Opal.const_get_relative($nesting, 'Integer')) : $d)) ? value.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Integer')) : $a))) {
                  
                  if ($truthy(($truthy($a = $rb_ge(value.$first(), 0)) ? $rb_gt(value.$last(), 0) : $a))) {
                    } else {
                    self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : values of " + (key) + " range must be greater than or equal to 0")
                  };
                  return Opal.const_get_relative($nesting, 'ATTR_SPEC_VAR_LENGTH');
                  } else {
                  return self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : value of " + (key) + " must be an Integer or Range of integers")
                }}
                else {return self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$name()) + "##attr(" + (args) + ") : spec key must be one of :class, :coerce, :ensure, not " + (key))}})();
                
                $writer = [index, value];
                $send(spec, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10));
              if ($truthy(spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_NIL'))['$nil?']())) {
                
                $writer = [Opal.const_get_relative($nesting, 'ATTR_SPEC_NIL'), false];
                $send(spec, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy((type = spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_SINGLE_TYPE'))))) {
                ($truthy($b = spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_READ'))) ? $b : (($writer = [Opal.const_get_relative($nesting, 'ATTR_SPEC_READ'), (function() {
                if (type['$=='](Opal.const_get_relative($nesting, 'String'))) {return $send(self, 'lambda', [], (TMP_12 = function(value){var self = TMP_12.$$s || this;
if (value == null) value = nil;
                if ($truthy(value['$respond_to?']("to_s"))) {
                    return value.$to_s()
                    } else {
                    return value
                  }}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))}
                else if (type['$=='](Opal.const_get_relative($nesting, 'Integer'))) {return $send(self, 'lambda', [], (TMP_13 = function(value){var self = TMP_13.$$s || this;
if (value == null) value = nil;
                if ($truthy(value['$respond_to?']("to_i"))) {
                    return value.$to_i()
                    } else {
                    return value
                  }}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))}
                else if (type['$=='](Opal.const_get_relative($nesting, 'Float'))) {return $send(self, 'lambda', [], (TMP_14 = function(value){var self = TMP_14.$$s || this;
if (value == null) value = nil;
                if ($truthy(value['$respond_to?']("to_f"))) {
                    return value.$to_f()
                    } else {
                    return value
                  }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))}
                else if (type['$=='](Opal.const_get_relative($nesting, 'Time'))) {return $send(self, 'lambda', [], (TMP_15 = function(value){var self = TMP_15.$$s || this;
if (value == null) value = nil;
                if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                    return Opal.const_get_relative($nesting, 'Time').$parse(value)
                    } else {
                    return value
                  }}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))}
                else if (type['$=='](Opal.const_get_relative($nesting, 'Date'))) {return $send(self, 'lambda', [], (TMP_16 = function(value){var self = TMP_16.$$s || this;
if (value == null) value = nil;
                if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                    return Opal.const_get_relative($nesting, 'Date').$parse(value)
                    } else {
                    return value
                  }}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}
                else {return nil}})()]), $send(spec, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))};};
            if ($truthy(self['$mutable?']())) {
              if ($truthy(arg_spec)) {
                $send(self, 'define_method', ["" + (attr) + "="], (TMP_17 = function(value){var self = TMP_17.$$s || this;
                  if (self.hash == null) self.hash = nil;
if (value == null) value = nil;
                
                  $writer = [attr, self.$__attr_read_value(attr, value)];
                  $send(self.hash, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17))
                } else {
                $send(self, 'define_method', ["" + (attr) + "="], (TMP_18 = function(value){var self = TMP_18.$$s || this;
                  if (self.hash == null) self.hash = nil;
if (value == null) value = nil;
                
                  $writer = [attr, value];
                  $send(self.hash, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18))
              }};
          };
          } else {
          $send(args, 'each', [], (TMP_19 = function(attr){var self = TMP_19.$$s || this;
if (attr == null) attr = nil;
          return self.$attr(attr, $hash2(["type", "nil"], {"type": Opal.const_get_relative($nesting, 'Object'), "nil": true}))}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
        };
        return self.$attrs_defined();
      }, TMP_Model_attr_20.$$arity = -1);
      Opal.defs(self, '$read_state_methods', TMP_Model_read_state_methods_21 = function $$read_state_methods() {
        var self = this;

        return ["[]", "get", "==", "values", "to_csv", "to_json", "to_h", "to_hash", "csv_head", "dup", "to_s", "merge_hash"]
      }, TMP_Model_read_state_methods_21.$$arity = 0);
      Opal.defs(self, '$reduce_dup_methods', TMP_Model_reduce_dup_methods_22 = function $$reduce_dup_methods() {
        var self = this;

        return ["[]=", "set", "merge!"]
      }, TMP_Model_reduce_dup_methods_22.$$arity = 0);
      Opal.defs(self, '$reduce_mutate_methods', TMP_Model_reduce_mutate_methods_23 = function $$reduce_mutate_methods() {
        var self = this;

        return ["merge", "mutate!"]
      }, TMP_Model_reduce_mutate_methods_23.$$arity = 0);
      Opal.defs(self, '$attrs_defined', TMP_Model_attrs_defined_24 = function $$attrs_defined() {
        var self = this;

        return self
      }, TMP_Model_attrs_defined_24.$$arity = 0);
      Opal.defs(self, '$attr?', TMP_Model_attr$q_25 = function(name) {
        var self = this;

        return self.$attrs()['$include?'](name.$to_sym())
      }, TMP_Model_attr$q_25.$$arity = 1);
      Opal.defs(self, '$csv_head', TMP_Model_csv_head_26 = function $$csv_head() {
        var self = this;

        return self.$attrs().$join(",")
      }, TMP_Model_csv_head_26.$$arity = 0);
      Opal.defs(self, '$from_hash', TMP_Model_from_hash_27 = function $$from_hash(hash) {
        var self = this;

        return self.$new(Opal.to_hash(hash))
      }, TMP_Model_from_hash_27.$$arity = 1);
      Opal.defs(self, '$from_json', TMP_Model_from_json_28 = function $$from_json(s) {
        var self = this;

        return self.$new(Opal.to_hash(Opal.const_get_relative($nesting, 'JSON').$parse(s)))
      }, TMP_Model_from_json_28.$$arity = 1);
      
      Opal.defn(self, '$initialize', TMP_Model_initialize_31 = function $$initialize($kwargs) {
        var TMP_29, TMP_30, self = this, args;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        args = Opal.kwrestargs($kwargs, {});
        
        self.hash = $hash2([], {});
        $send(args, 'each', [], (TMP_29 = function(attr, value){var self = TMP_29.$$s || this, $writer = nil;
          if (self.hash == null) self.hash = nil;
if (attr == null) attr = nil;if (value == null) value = nil;
        
          attr = attr.$to_sym();
          self['$must_be_attr!'](attr);
          
          $writer = [attr, self.$__attr_read_value(attr, value)];
          $send(self.hash, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29));
        $send(self.$attrs(), 'each', [], (TMP_30 = function(attr){var self = TMP_30.$$s || this, $writer = nil;
          if (self.hash == null) self.hash = nil;
if (attr == null) attr = nil;
        if ($truthy(args['$key?'](attr))) {
            return nil
            } else {
            
            $writer = [attr, self.$__attr_read_value(attr, nil)];
            $send(self.hash, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30));
        return self.$after_initialize();
      }, TMP_Model_initialize_31.$$arity = -1);
      
      Opal.defn(self, '$after_initialize', TMP_Model_after_initialize_32 = function $$after_initialize() {
        var self = this;

        return nil
      }, TMP_Model_after_initialize_32.$$arity = 0);
      
      Opal.defn(self, '$mutate!', TMP_Model_mutate$B_33 = function($a_rest) {
        var self = this, args, $iter = TMP_Model_mutate$B_33.$$p, block = $iter || nil, mutation = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_Model_mutate$B_33.$$p = null;
        
        mutation = $send(self, 'merge', Opal.to_a(args));
        if ($truthy(block)) {
          block.$call(mutation)};
        return mutation;
      }, TMP_Model_mutate$B_33.$$arity = -1);
      
      Opal.defn(self, '$merge!', TMP_Model_merge$B_34 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        if ($truthy(self['$mutable?']())) {
          } else {
          self.$fail("" + "instances of " + (self.$class().$name()) + " are not mutable")
        };
        self.hash = $send(self, 'merge_hash', Opal.to_a(args).concat($hash2(["spec"], {"spec": true})));
        return self;
      }, TMP_Model_merge$B_34.$$arity = -1);
      
      Opal.defn(self, '$merge', TMP_Model_merge_35 = function $$merge($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return self.$class().$new($send(self, 'merge_hash', Opal.to_a(args).concat($hash2(["spec"], {"spec": false}))))
      }, TMP_Model_merge_35.$$arity = -1);
      
      Opal.defn(self, '$attr?', TMP_Model_attr$q_36 = function(name) {
        var self = this;

        return self.$class()['$attr?'](name)
      }, TMP_Model_attr$q_36.$$arity = 1);
      
      Opal.defn(self, '$==', TMP_Model_$eq$eq_38 = function(other) {try {

        var TMP_37, self = this;

        
        if (self.$class()['$=='](other.$class())) {
          } else {
          return false
        };
        if (self.hash.$keys()['$=='](other.$to_h().$keys())) {
          } else {
          return false
        };
        $send(self.hash, 'each', [], (TMP_37 = function(attr, value){var self = TMP_37.$$s || this;
if (attr == null) attr = nil;if (value == null) value = nil;
        if (value['$=='](other['$[]'](attr))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_37.$$s = self, TMP_37.$$arity = 2, TMP_37));
        return true;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_Model_$eq$eq_38.$$arity = 1);
      
      Opal.defn(self, '$[]', TMP_Model_$$_39 = function(attr) {
        var self = this;

        return self.$send(attr)
      }, TMP_Model_$$_39.$$arity = 1);
      
      Opal.defn(self, '$[]=', TMP_Model_$$$eq_40 = function(attr, value) {
        var self = this;

        return self.$send("" + (attr) + "=", value)
      }, TMP_Model_$$$eq_40.$$arity = 2);
      
      Opal.defn(self, '$get', TMP_Model_get_41 = function $$get(attr) {
        var self = this;

        return self.hash['$[]'](attr.$to_sym())
      }, TMP_Model_get_41.$$arity = 1);
      
      Opal.defn(self, '$set', TMP_Model_set_42 = function $$set(attr, value) {
        var self = this, $writer = nil;

        
        self['$must_be_mutable!']();
        attr = attr.$to_sym();
        self['$must_be_attr!'](attr);
        
        $writer = [attr, self.$__attr_read_value(attr, value)];
        $send(self.hash, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_Model_set_42.$$arity = 2);
      
      Opal.defn(self, '$values', TMP_Model_values_44 = function $$values($a_rest) {
        var TMP_43, self = this, attr_names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        attr_names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          attr_names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(attr_names, 'map', [], (TMP_43 = function(n){var self = TMP_43.$$s || this;
if (n == null) n = nil;
        return self['$[]'](n)}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43))
      }, TMP_Model_values_44.$$arity = -1);
      
      Opal.defn(self, '$to_csv', TMP_Model_to_csv_47 = function $$to_csv() {
        var TMP_45, self = this;

        return $send([], 'tap', [], (TMP_45 = function(result){var self = TMP_45.$$s || this, TMP_46;
          if (self.hash == null) self.hash = nil;
if (result == null) result = nil;
        return $send(self.hash, 'each', [], (TMP_46 = function(attr, value){var self = TMP_46.$$s || this;
if (attr == null) attr = nil;if (value == null) value = nil;
          return result['$<<'](self.$write_value(attr, value))}, TMP_46.$$s = self, TMP_46.$$arity = 2, TMP_46))}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45)).$join(",")
      }, TMP_Model_to_csv_47.$$arity = 0);
      
      Opal.defn(self, '$clone', TMP_Model_clone_48 = function $$clone() {
        var self = this, $iter = TMP_Model_clone_48.$$p, $yield = $iter || nil, c = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Model_clone_48.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        c = $send(self, Opal.find_super_dispatcher(self, 'clone', TMP_Model_clone_48, false), $zuper, $iter);
        c.$instance_variable_set("@hash", self.hash.$dup());
        return c;
      }, TMP_Model_clone_48.$$arity = 0);
      
      Opal.defn(self, '$dup', TMP_Model_dup_49 = function $$dup() {
        var self = this, $iter = TMP_Model_dup_49.$$p, $yield = $iter || nil, d = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Model_dup_49.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        d = $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_Model_dup_49, false), $zuper, $iter);
        d.$instance_variable_set("@hash", self.hash.$dup());
        return d;
      }, TMP_Model_dup_49.$$arity = 0);
      
      Opal.defn(self, '$to_h', TMP_Model_to_h_50 = function $$to_h() {
        var self = this;

        return self.hash.$dup()
      }, TMP_Model_to_h_50.$$arity = 0);
      
      Opal.defn(self, '$merge_hash', TMP_Model_merge_hash_54 = function $$merge_hash($a_rest, $kwargs) {
        var TMP_51, TMP_53, self = this, $post_args, spec, args, result = nil;

        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        spec = $kwargs.$$smap["spec"];
        if (spec == null) {
          spec = true
        }
        if (0 < $post_args.length) {
          args = $post_args.splice(0, $post_args.length - 0);
        } else {
          args = [];
        }
        
        result = self.$to_h();
        $send(args, 'each', [], (TMP_51 = function(arg){var self = TMP_51.$$s || this, TMP_52;
if (arg == null) arg = nil;
        return $send(arg.$to_h(), 'each', [], (TMP_52 = function(attr, value){var self = TMP_52.$$s || this, $writer = nil;
if (attr == null) attr = nil;if (value == null) value = nil;
          
            $writer = [self.$key(), (function() {if ($truthy(spec)) {
              
              self['$must_be_attr!'](attr);
              return self.$__attr_read_value(attr, value);
              } else {
              return value
            }; return nil; })()];
            $send(result, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_52.$$s = self, TMP_52.$$arity = 2, TMP_52))}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51));
        return $send(args, 'reduce', [self.$to_h()], (TMP_53 = function(memo, arg){var self = TMP_53.$$s || this;
if (memo == null) memo = nil;if (arg == null) arg = nil;
        return memo.$merge(arg.$to_h())}, TMP_53.$$s = self, TMP_53.$$arity = 2, TMP_53));
      }, TMP_Model_merge_hash_54.$$arity = -1);
      self.$alias_method("to_hash", "to_h");
      
      Opal.defn(self, '$to_json', TMP_Model_to_json_55 = function $$to_json() {
        var self = this;

        return self.$to_h_without_circulars().$to_json()
      }, TMP_Model_to_json_55.$$arity = 0);
      
      Opal.defn(self, '$to_h_without_circulars', TMP_Model_to_h_without_circulars_56 = function $$to_h_without_circulars() {
        var self = this;

        return self.hash
      }, TMP_Model_to_h_without_circulars_56.$$arity = 0);
      
      Opal.defn(self, '$to_s', TMP_Model_to_s_57 = function $$to_s() {
        var self = this;

        return "" + (self.$class().$name()) + " : " + (self.hash)
      }, TMP_Model_to_s_57.$$arity = 0);
      
      Opal.defn(self, '$mutable?', TMP_Model_mutable$q_58 = function() {
        var self = this;

        return self.$class()['$mutable?']()
      }, TMP_Model_mutable$q_58.$$arity = 0);
      
      Opal.defn(self, '$attrs', TMP_Model_attrs_59 = function $$attrs() {
        var self = this;

        return self.$class().$attrs()
      }, TMP_Model_attrs_59.$$arity = 0);
      
      Opal.defn(self, '$csv_head', TMP_Model_csv_head_60 = function $$csv_head() {
        var self = this;

        return self.$class().$csv_head()
      }, TMP_Model_csv_head_60.$$arity = 0);
      
      Opal.defn(self, '$must_be_attrs!', TMP_Model_must_be_attrs$B_62 = function($a_rest) {
        var TMP_61, self = this, attrs;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        attrs = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          attrs[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(attrs, 'each', [], (TMP_61 = function(attr){var self = TMP_61.$$s || this;
if (attr == null) attr = nil;
        return self['$must_be_attr!'](attr)}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61))
      }, TMP_Model_must_be_attrs$B_62.$$arity = -1);
      
      Opal.defn(self, '$must_be_attr!', TMP_Model_must_be_attr$B_63 = function(attr) {
        var self = this;

        if ($truthy(self['$attr?'](attr))) {
          return nil
          } else {
          return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (attr) + " is not an attribute of " + (self.$class().$name()))
        }
      }, TMP_Model_must_be_attr$B_63.$$arity = 1);
      
      Opal.defn(self, '$must_be_mutable!', TMP_Model_must_be_mutable$B_64 = function() {
        var self = this;

        if ($truthy(self['$mutable?']())) {
          return nil
          } else {
          return self.$fail("" + "instances of " + (self.$class().$name()) + " are not mutable")
        }
      }, TMP_Model_must_be_mutable$B_64.$$arity = 0);
      
      Opal.defn(self, '$write_value', TMP_Model_write_value_65 = function $$write_value(attr, value) {
        var self = this, attr_spec = nil, coerce = nil;

        
        attr_spec = self.$class().$attr_spec(attr);
        if ($truthy((coerce = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_WRITE'))))) {
          return coerce.$call(value)
          } else {
          return value
        };
      }, TMP_Model_write_value_65.$$arity = 2);
      self.$protected();
      return (Opal.defn(self, '$__attr_read_value', TMP_Model___attr_read_value_66 = function $$__attr_read_value(attr, value) {
        var $a, self = this, attr_spec = nil, default$ = nil, coerce = nil, nil_spec = nil, type = nil, types = nil, length = nil, insist = nil, regexp = nil, enum$ = nil;

        
        attr_spec = self.$class().$attr_spec(attr);
        if ($truthy(attr_spec['$empty?']())) {
          return value};
        if ($truthy(($truthy($a = value['$nil?']()) ? (default$ = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_DEFAULT'))) : $a))) {
          value = default$};
        if ($truthy((coerce = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_READ'))))) {
          value = coerce.$call(value)};
        if ($truthy((nil_spec = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_NIL')))['$nil?']())) {
        } else if ($truthy((($a = nil_spec['$=='](false)) ? value['$nil?']() : nil_spec['$=='](false)))) {
          self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$class().$name()) + "#" + (attr) + "=(" + (value) + ") : value " + (value) + " must not be nil")};
        if ($truthy(value['$nil?']())) {
          } else {
          
          if ($truthy((type = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_SINGLE_TYPE'))))) {
            if ($truthy(value['$is_a?'](type))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$class().$name()) + "#" + (attr) + "=(" + (value) + ") : value " + (value) + " must be type " + (type) + " not " + (value.$class()))
            }
          } else if ($truthy((types = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_MULTI_TYPE'))))) {
            if ($truthy(types['$include?'](value.$class()))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$class().$name()) + "#" + (attr) + "=(" + (value) + ") : value " + (value) + " must be type " + (types.$join(" or ")) + " not " + (value.$class()))
            }};
          if ($truthy((length = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_FIX_LENGTH'))))) {
            if (value.$length()['$=='](length)) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$class().$name()) + "#" + (attr) + "=(" + (value) + ") : value " + (value) + " must be fixed length of " + (length) + " not " + (value.$length()))
            }
          } else if ($truthy((length = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_VAR_LENGTH'))))) {
            if ($truthy(length['$include?'](value.$length()))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$class().$name()) + "#" + (attr) + "=(" + (value) + ") : value " + (value) + " must be length in range " + (length) + " not " + (value.$length()))
            }};
          if ($truthy((insist = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_INSIST'))))) {
            if (true['$=='](insist.$call(value))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$class().$name()) + "#" + (attr) + "=(" + (value) + ") : value " + (value) + " insist failure : " + (self.$result()))
            }};
          if ($truthy((regexp = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_REGEXP'))))) {
            if ($truthy(value['$=~'](regexp))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$class().$name()) + "#" + (attr) + "=(" + (value) + ") : String value '" + (value) + "' does not match regexp " + (regexp))
            }};
          if ($truthy((enum$ = attr_spec['$[]'](Opal.const_get_relative($nesting, 'ATTR_SPEC_ENUM'))))) {
            if ($truthy(enum$['$include?'](value))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ModelError'), "" + (self.$class().$name()) + "#" + (attr) + "=(" + (value) + ") : value '" + (value) + "' not included in " + (enum$))
            }};
        };
        return value;
      }, TMP_Model___attr_read_value_66.$$arity = 2), nil) && '__attr_read_value';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Mutable(){};
      var self = $Mutable = $klass($base, $super, 'Mutable', $Mutable);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Model'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $Immutable(){};
      var self = $Immutable = $klass($base, $super, 'Immutable', $Immutable);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Immutable_mutable$q_67, TMP_Immutable_merge$B_68;

      
      Opal.defs(self, '$mutable?', TMP_Immutable_mutable$q_67 = function() {
        var self = this;

        return false
      }, TMP_Immutable_mutable$q_67.$$arity = 0);
      return (Opal.defn(self, '$merge!', TMP_Immutable_merge$B_68 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(self, 'merge', Opal.to_a(args))
      }, TMP_Immutable_merge$B_68.$$arity = -1), nil) && 'merge!';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Model'), $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/state/store"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$<', '$superclass', '$dup', '$reducers', '$[]=', '$-', '$define_method', '$dispatch', '$each', '$send', '$state', '$to_proc', '$reduce', '$!', '$[]', '$attr_reader', '$call', '$class', '$instance_exec', '$==', '$object_id', '$broadcast', '$raise', '$+', '$subscriptions', '$alias_method', '$protected', '$values']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Store(){};
        var self = $Store = $klass($base, $super, 'Store', $Store);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Store_initialize_14, TMP_Store_dispatch_15, TMP_Store_subscribe_16, TMP_Store_unsubscribe_17, TMP_Store_subscribed$q_18, TMP_Store_broadcast_20;

        def.state = def.subscription_id = nil;
        
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_reducers_1, TMP_reduce_2, TMP_read_state_6, TMP_reduce_dup_9, TMP_reduce_mutate_12, TMP_reducer$q_13;

          
          
          Opal.defn(self, '$reducers', TMP_reducers_1 = function $$reducers() {
            var $a, self = this;
            if (self.reducers == null) self.reducers = nil;

            return (self.reducers = ($truthy($a = self.reducers) ? $a : (function() {if ($truthy($rb_lt(self.$superclass(), Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Store')))) {
              return self.$superclass().$reducers().$dup()
              } else {
              return $hash2([], {})
            }; return nil; })()))
          }, TMP_reducers_1.$$arity = 0);
          
          Opal.defn(self, '$reduce', TMP_reduce_2 = function $$reduce(action) {
            var TMP_3, self = this, $iter = TMP_reduce_2.$$p, block = $iter || nil, $writer = nil;

            if ($iter) TMP_reduce_2.$$p = null;
            
            
            $writer = [action, block];
            $send(self.$reducers(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(self, 'define_method', [action], (TMP_3 = function($a_rest){var self = TMP_3.$$s || this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(self, 'dispatch', [action].concat(Opal.to_a(args)))}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3));
          }, TMP_reduce_2.$$arity = 1);
          
          Opal.defn(self, '$read_state', TMP_read_state_6 = function $$read_state($a_rest) {
            var TMP_4, self = this, methods;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            methods = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              methods[$arg_idx - 0] = arguments[$arg_idx];
            }
            return $send(methods, 'each', [], (TMP_4 = function(method){var self = TMP_4.$$s || this, TMP_5;
if (method == null) method = nil;
            return $send(self, 'define_method', [method], (TMP_5 = function($a_rest){var self = TMP_5.$$s || this, block, args;

                block = TMP_5.$$p || nil;
                if (block) TMP_5.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(self.$state(), 'send', [method].concat(Opal.to_a(args)), block.$to_proc())}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5))}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4))
          }, TMP_read_state_6.$$arity = -1);
          
          Opal.defn(self, '$reduce_dup', TMP_reduce_dup_9 = function $$reduce_dup($a_rest) {
            var TMP_7, self = this, methods;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            methods = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              methods[$arg_idx - 0] = arguments[$arg_idx];
            }
            return $send(methods, 'each', [], (TMP_7 = function(method){var self = TMP_7.$$s || this, TMP_8;
if (method == null) method = nil;
            return $send(self, 'reduce', [method], (TMP_8 = function($a_rest){var self = TMP_8.$$s || this, block, args, new_state = nil;

                block = TMP_8.$$p || nil;
                if (block) TMP_8.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              
                new_state = self.$state().$dup();
                $send(new_state, 'send', [method].concat(Opal.to_a(args)), block.$to_proc());
                return new_state;}, TMP_8.$$s = self, TMP_8.$$arity = -1, TMP_8))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
          }, TMP_reduce_dup_9.$$arity = -1);
          
          Opal.defn(self, '$reduce_mutate', TMP_reduce_mutate_12 = function $$reduce_mutate($a_rest) {
            var TMP_10, self = this, methods;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            methods = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              methods[$arg_idx - 0] = arguments[$arg_idx];
            }
            return $send(methods, 'each', [], (TMP_10 = function(method){var self = TMP_10.$$s || this, TMP_11;
if (method == null) method = nil;
            return $send(self, 'reduce', [method], (TMP_11 = function($a_rest){var self = TMP_11.$$s || this, block, args, new_state = nil;

                block = TMP_11.$$p || nil;
                if (block) TMP_11.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              
                new_state = $send(self.$state(), 'send', [method].concat(Opal.to_a(args)), block.$to_proc());
                return new_state;}, TMP_11.$$s = self, TMP_11.$$arity = -1, TMP_11))}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10))
          }, TMP_reduce_mutate_12.$$arity = -1);
          return (Opal.defn(self, '$reducer?', TMP_reducer$q_13 = function(action) {
            var self = this;

            return self.$reducers()['$[]'](action)['$!']()['$!']()
          }, TMP_reducer$q_13.$$arity = 1), nil) && 'reducer?';
        })(Opal.get_singleton_class(self), $nesting);
        self.$attr_reader("state", "subscriptions");
        
        Opal.defn(self, '$initialize', TMP_Store_initialize_14 = function $$initialize(initial_state) {
          var self = this, $iter = TMP_Store_initialize_14.$$p, block = $iter || nil;

          if (initial_state == null) {
            initial_state = nil;
          }
          if ($iter) TMP_Store_initialize_14.$$p = null;
          
          self.state = initial_state;
          self.subscription_id = 0;
          self.subscriptions = $hash2([], {});
          if ($truthy(block)) {
            return block.$call()
            } else {
            return nil
          };
        }, TMP_Store_initialize_14.$$arity = -1);
        
        Opal.defn(self, '$dispatch', TMP_Store_dispatch_15 = function $$dispatch(action, $a_rest) {
          var self = this, args, reducer = nil, prior_state = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          
          reducer = self.$class().$reducers()['$[]'](action);
          if ($truthy(reducer)) {
            
            prior_state = self.state;
            self.state = $send(self, 'instance_exec', Opal.to_a(args), reducer.$to_proc());
            if (prior_state.$object_id()['$=='](self.state.$object_id())) {
              } else {
              self.$broadcast(prior_state)
            };
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "no reducer provided for action " + (action) + " in " + (self.$class().$reducers()))
          };
          return self.state;
        }, TMP_Store_dispatch_15.$$arity = -2);
        
        Opal.defn(self, '$subscribe', TMP_Store_subscribe_16 = function $$subscribe($kwargs) {
          var self = this, who, $iter = TMP_Store_subscribe_16.$$p, block = $iter || nil, $writer = nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          who = $kwargs.$$smap["who"];
          if (who == null) {
            who = "unknown subscriber"
          }
          if ($iter) TMP_Store_subscribe_16.$$p = null;
          
          self.subscription_id = $rb_plus(self.subscription_id, 1);
          
          $writer = [self.subscription_id, $hash2(["who", "callback", "terminated"], {"who": who, "callback": block, "terminated": false})];
          $send(self.$subscriptions(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return self.subscription_id;
        }, TMP_Store_subscribe_16.$$arity = -1);
        
        Opal.defn(self, '$unsubscribe', TMP_Store_unsubscribe_17 = function $$unsubscribe(id) {
          var self = this, subscription = nil, $writer = nil;

          
          subscription = self.$subscriptions()['$[]'](id);
          if ($truthy(subscription)) {
            
            $writer = ["terminated", true];
            $send(subscription, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          };
        }, TMP_Store_unsubscribe_17.$$arity = 1);
        
        Opal.defn(self, '$subscribed?', TMP_Store_subscribed$q_18 = function(id) {
          var self = this;

          return self.$subscriptions()['$[]'](id)['$!']()['$!']()
        }, TMP_Store_subscribed$q_18.$$arity = 1);
        self.$alias_method("observe", "subscribe");
        self.$alias_method("observed?", "subscribe");
        self.$alias_method("unobserve", "unsubscribe");
        self.$protected();
        return (Opal.defn(self, '$broadcast', TMP_Store_broadcast_20 = function $$broadcast(prior_state) {
          var TMP_19, self = this;

          return $send(self.$subscriptions().$values().$dup(), 'each', [], (TMP_19 = function(subscription){var self = TMP_19.$$s || this;
if (subscription == null) subscription = nil;
          if ($truthy(subscription['$[]']("terminated"))) {
              return nil
              } else {
              return subscription['$[]']("callback").$call(prior_state, self)
            }}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
        }, TMP_Store_broadcast_20.$$arity = 1), nil) && 'broadcast';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/state/stores/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$read_state', '$map', '$to_proc', '$reduce_dup']);
  
  self.$require("robe/common/state/store");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $ArrayStore(){};
        var self = $ArrayStore = $klass($base, $super, 'ArrayStore', $ArrayStore);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ArrayStore_initialize_1;

        
        self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
        $send(self, 'read_state', Opal.to_a($send(["[]", "&", "|", "*", "+", "-", "<=>", "==", "any?", "assoc", "at", "bsearch", "bsearch_index", "collect", "compact", "count", "cycle", "detect", "dig", "each", "each_cons", "each_entry", "each_slice", "each_with_index", "each_with_object", "empty?", "eql?", "fetch", "find", "find_all", "find_index", "first", "flatten", "flat_map", "group_by", "hash", "include?", "index", "inject", "inspect", "join", "last", "lazy", "length", "map", "max", "max_by", "member?", "min", "min_by", "minmax", "minmax_by", "none?", "one?", "pack", "partition", "rassoc", "reduce", "reject", "reverse", "reverse_each", "r_index", "rotate", "sample", "select", "shuffle", "slice", "size", "sort", "sum", "take", "take_while", "transpose", "to_a", "to_ary", "to_h", "to_s", "uniq", "values_at", "zip"], 'map', [], "to_sym".$to_proc())));
        $send(self, 'reduce_dup', Opal.to_a($send(["<<", "[]=", "clear", "compact!", "concat", "collect!", "delete", "delete_at", "delete_if", "drop", "drop_while", "fill", "initialize_copy", "insert", "map!", "permutation", "pop", "prepend", "push", "reject!", "replace", "reverse!", "reverse_each", "rotate!", "sample", "select!", "shift", "shuffle!", "slice!", "sort!", "sort_by!", "sum", "take", "take_while", "uniq!", "unshift"], 'map', [], "to_sym".$to_proc())));
        return (Opal.defn(self, '$initialize', TMP_ArrayStore_initialize_1 = function $$initialize(initial_array) {
          var self = this, $iter = TMP_ArrayStore_initialize_1.$$p, block = $iter || nil;

          if (initial_array == null) {
            initial_array = [];
          }
          if ($iter) TMP_ArrayStore_initialize_1.$$p = null;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ArrayStore_initialize_1, false), [initial_array], block.$to_proc())
        }, TMP_ArrayStore_initialize_1.$$arity = -1), nil) && 'initialize';
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Store'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/state/stores/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$read_state', '$map', '$to_proc', '$reduce_dup']);
  
  self.$require("robe/common/state/store");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $HashStore(){};
        var self = $HashStore = $klass($base, $super, 'HashStore', $HashStore);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HashStore_initialize_1;

        
        self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
        $send(self, 'read_state', Opal.to_a($send(["[]", "<", "<=", ">", ">=", "any?", "assoc", "compare_by_identity", "compare_by_identity?", "dig", "each", "each_key", "each_pair", "each_value", "empty?", "eql?", "fetch", "fetch_values", "flatten", "has_key?", "has_value?", "hash", "include?", "inspect", "key", "key?", "keys", "length", "member?", "merge", "rassoc", "size", "value?", "values", "values_at", "to_a", "to_s", "to_h", "to_hash"], 'map', [], "to_sym".$to_proc())));
        $send(self, 'reduce_dup', Opal.to_a($send(["[]=", "clear", "compact", "delete", "delete_if", "invert", "keep_if", "merge!", "rehash", "reject", "replace", "select", "update"], 'map', [], "to_sym".$to_proc())));
        return (Opal.defn(self, '$initialize', TMP_HashStore_initialize_1 = function $$initialize(initial) {
          var self = this, $iter = TMP_HashStore_initialize_1.$$p, block = $iter || nil;

          if (initial == null) {
            initial = $hash2([], {});
          }
          if ($iter) TMP_HashStore_initialize_1.$$p = null;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_HashStore_initialize_1, false), [initial], block.$to_proc())
        }, TMP_HashStore_initialize_1.$$arity = -1), nil) && 'initialize';
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Store'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/state/stores/history"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr', '$new', '$>', '$size', '$past', '$future', '$!', '$present', '$alias_method', '$can_undo?', '$mutate!', '$-', '$version', '$version=', '$+', '$future=', '$last', '$present=', '$[]', '$past=', '$can_redo?', '$first', '$<', '$redo', '$undo', '$==', '$max_size', '$max_size=']);
  
  self.$require("robe/common/state/atom");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $History(){};
        var self = $History = $klass($base, $super, 'History', $History);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_History_initial_1, TMP_History_initialize_2, TMP_History_past$q_3, TMP_History_future$q_4, TMP_History_present$q_5, TMP_History_undo_7, TMP_History_redo_9, TMP_History_versions_10, TMP_History_go_to_version_11, TMP_History_clear_13, TMP_History_present$B_14;

        
        self.$attr("max_size", "version", "past", "present", "future");
        Opal.defs(self, '$initial', TMP_History_initial_1 = function $$initial($kwargs) {
          var self = this, present, max_size;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          present = $kwargs.$$smap["present"];
          if (present == null) {
            present = nil
          }
          max_size = $kwargs.$$smap["max_size"];
          if (max_size == null) {
            max_size = nil
          }
          return self.$new($hash2(["max_size", "version", "past", "present", "future"], {"max_size": max_size, "version": 0, "past": [], "present": present, "future": []}))
        }, TMP_History_initial_1.$$arity = -1);
        
        Opal.defn(self, '$initialize', TMP_History_initialize_2 = function $$initialize($kwargs) {
          var self = this, version, past, present, future, max_size, $iter = TMP_History_initialize_2.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          version = $kwargs.$$smap["version"];
          if (version == null) {
            version = 0
          }
          past = $kwargs.$$smap["past"];
          if (past == null) {
            past = []
          }
          present = $kwargs.$$smap["present"];
          if (present == null) {
            present = nil
          }
          future = $kwargs.$$smap["future"];
          if (future == null) {
            future = []
          }
          max_size = $kwargs.$$smap["max_size"];
          if (max_size == null) {
            max_size = nil
          }
          if ($iter) TMP_History_initialize_2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_History_initialize_2, false), $zuper, $iter)
        }, TMP_History_initialize_2.$$arity = -1);
        
        Opal.defn(self, '$past?', TMP_History_past$q_3 = function() {
          var self = this;

          return $rb_gt(self.$past().$size(), 0)
        }, TMP_History_past$q_3.$$arity = 0);
        
        Opal.defn(self, '$future?', TMP_History_future$q_4 = function() {
          var self = this;

          return $rb_gt(self.$future().$size(), 0)
        }, TMP_History_future$q_4.$$arity = 0);
        
        Opal.defn(self, '$present?', TMP_History_present$q_5 = function() {
          var self = this;

          return self.$present()['$!']()['$!']()
        }, TMP_History_present$q_5.$$arity = 0);
        self.$alias_method("can_undo?", "past?");
        self.$alias_method("can_redo?", "future?");
        
        Opal.defn(self, '$undo', TMP_History_undo_7 = function $$undo() {
          var TMP_6, self = this;

          if ($truthy(self['$can_undo?']())) {
            return $send(self, 'mutate!', [], (TMP_6 = function(){var self = TMP_6.$$s || this, $writer = nil;

            
              
              $writer = [$rb_minus(self.$version(), 1)];
              $send(self, 'version=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_plus([self.$present()], self.$future())];
              $send(self, 'future=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [self.$past().$last()];
              $send(self, 'present=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [self.$past()['$[]']($range(0, -2, false))];
              $send(self, 'past=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
            } else {
            return nil
          }
        }, TMP_History_undo_7.$$arity = 0);
        self.$alias_method("back", "undo");
        
        Opal.defn(self, '$redo', TMP_History_redo_9 = function $$redo() {
          var TMP_8, self = this;

          if ($truthy(self['$can_redo?']())) {
            return $send(self, 'mutate!', [], (TMP_8 = function(){var self = TMP_8.$$s || this, $writer = nil;

            
              
              $writer = [$rb_plus(self.$version(), 1)];
              $send(self, 'version=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_plus(self.$past(), [self.$present()])];
              $send(self, 'past=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [self.$future().$first()];
              $send(self, 'present=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [self.$future()['$[]']($range(1, -1, false))];
              $send(self, 'future=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))
            } else {
            return nil
          }
        }, TMP_History_redo_9.$$arity = 0);
        self.$alias_method("forward", "redo");
        
        Opal.defn(self, '$versions', TMP_History_versions_10 = function $$versions() {
          var self = this;

          return $rb_plus(self.$past().$size(), self.$future().$size())
        }, TMP_History_versions_10.$$arity = 0);
        
        Opal.defn(self, '$go_to_version', TMP_History_go_to_version_11 = function $$go_to_version(v) {
          var $a, $b, self = this;

          
          while ($truthy(($truthy($b = self['$can_redo?']()) ? $rb_lt(self.$version(), v) : $b))) {
            self.$redo()
          };
          while ($truthy(($truthy($b = self['$can_undo?']()) ? $rb_gt(self.$version(), v) : $b))) {
            self.$undo()
          };
        }, TMP_History_go_to_version_11.$$arity = 1);
        
        Opal.defn(self, '$clear', TMP_History_clear_13 = function $$clear() {
          var TMP_12, self = this;

          return $send(self, 'mutate!', [], (TMP_12 = function(){var self = TMP_12.$$s || this, $writer = nil;

          
            
            $writer = [0];
            $send(self, 'version=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [nil];
            $send(self, 'present=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [[]];
            $send(self, 'past=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [[]];
            $send(self, 'future=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12))
        }, TMP_History_clear_13.$$arity = 0);
        
        Opal.defn(self, '$present!', TMP_History_present$B_14 = function(state) {
          var self = this, past = nil, $writer = nil;

          
          past = self.$past();
          if (past.$size()['$=='](self.$max_size())) {
            past = past['$[]']($range(1, -1, false))};
          
          $writer = [$rb_plus(self.$version(), 1)];
          $send(self, 'version=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$max_size()];
          $send(self, 'max_size=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [$rb_plus(past, [self.$present()])];
          $send(self, 'past=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [state];
          $send(self, 'present=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [[]];
          $send(self, 'future=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, TMP_History_present$B_14.$$arity = 1);
        self.$alias_method("now", "present");
        self.$alias_method("now!", "present!");
        return self.$alias_method("now?", "present?");
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Atom'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/state/stores/model"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$read_state', '$+', '$read_attrs', '$read_state_methods', '$reduce_dup', '$write_attrs', '$reduce_dup_methods', '$reduce_mutate', '$reduce_mutate_methods', '$is_a?', '$model_class', '$class', '$raise', '$to_proc', '$new']);
  
  self.$require("robe/common/model");
  self.$require("robe/common/state/store");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $ModelStore(){};
        var self = $ModelStore = $klass($base, $super, 'ModelStore', $ModelStore);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ModelStore_model_1, TMP_ModelStore_model_class_2, TMP_ModelStore_initialize_3;

        
        self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
        Opal.defs(self, '$model', TMP_ModelStore_model_1 = function $$model(model_class) {
          var self = this;

          
          self.model_class = model_class;
          $send(self, 'read_state', Opal.to_a($rb_plus(model_class.$read_attrs(), model_class.$read_state_methods())));
          $send(self, 'reduce_dup', Opal.to_a($rb_plus(model_class.$write_attrs(), model_class.$reduce_dup_methods())));
          return $send(self, 'reduce_mutate', Opal.to_a(model_class.$reduce_mutate_methods()));
        }, TMP_ModelStore_model_1.$$arity = 1);
        Opal.defs(self, '$model_class', TMP_ModelStore_model_class_2 = function $$model_class() {
          var self = this;
          if (self.model_class == null) self.model_class = nil;

          return self.model_class
        }, TMP_ModelStore_model_class_2.$$arity = 0);
        return (Opal.defn(self, '$initialize', TMP_ModelStore_initialize_3 = function $$initialize(initial) {
          var self = this, $iter = TMP_ModelStore_initialize_3.$$p, block = $iter || nil;

          if (initial == null) {
            initial = self.$class().$model_class().$new();
          }
          if ($iter) TMP_ModelStore_initialize_3.$$p = null;
          
          if ($truthy(initial['$is_a?'](self.$class().$model_class()))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "model must be a " + (self.$class().$model_class()) + ", not a " + (initial.$class()))
          };
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ModelStore_initialize_3, false), [initial], block.$to_proc());
        }, TMP_ModelStore_initialize_3.$$arity = -1), nil) && 'initialize';
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Store'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/state"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("robe/common/model");
  self.$require("robe/common/state/store");
  self.$require("robe/common/state/binding");
  self.$require("robe/common/state/stores/array");
  self.$require("robe/common/state/stores/hash");
  self.$require("robe/common/state/stores/history");
  return self.$require("robe/common/state/stores/model");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/css/colors/util"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$-', '$>', '$<', '$gsub', '$map', '$scan', '$hex', '$min', '$round', '$*', '$to_i', '$[]', '$[]=', '$%', '$alias_method', '$+', '$max']);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_rgb_darker_2, TMP_String_rgb_lighter_4, TMP_String_rgb_inverse_6;

    
    
    Opal.defn(self, '$rgb_darker', TMP_String_rgb_darker_2 = function $$rgb_darker(amount) {
      var TMP_1, self = this, hex_color = nil, rgb = nil, $writer = nil;

      if (amount == null) {
        amount = 0.5;
      }
      
      amount = $rb_minus(1.0, amount);
      if ($truthy($rb_gt(amount, 1.0))) {
        amount = 1.0};
      if ($truthy($rb_lt(amount, 0.0))) {
        amount = 0.0};
      hex_color = self.$gsub("#", "");
      rgb = $send(hex_color.$scan(/../), 'map', [], (TMP_1 = function(color){var self = TMP_1.$$s || this;
if (color == null) color = nil;
      return color.$hex()}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
      
      $writer = [0, [$rb_times(rgb['$[]'](0).$to_i(), amount).$round(), 255].$min()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [1, [$rb_times(rgb['$[]'](1).$to_i(), amount).$round(), 255].$min()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [2, [$rb_times(rgb['$[]'](2).$to_i(), amount).$round(), 255].$min()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return "#%02x%02x%02x"['$%'](rgb);
    }, TMP_String_rgb_darker_2.$$arity = -1);
    self.$alias_method("rgb_darken", "rgb_darker");
    
    Opal.defn(self, '$rgb_lighter', TMP_String_rgb_lighter_4 = function $$rgb_lighter(amount) {
      var TMP_3, self = this, hex_color = nil, rgb = nil, $writer = nil;

      if (amount == null) {
        amount = 0.6;
      }
      
      if ($truthy($rb_gt(amount, 1.0))) {
        amount = 1.0};
      if ($truthy($rb_lt(amount, 0.0))) {
        amount = 0.0};
      hex_color = self.$gsub("#", "");
      rgb = $send(hex_color.$scan(/../), 'map', [], (TMP_3 = function(color){var self = TMP_3.$$s || this;
if (color == null) color = nil;
      return color.$hex()}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
      
      $writer = [0, [$rb_plus(rgb['$[]'](0).$to_i(), $rb_times(255, amount)).$round(), 255].$min()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [1, [$rb_plus(rgb['$[]'](1).$to_i(), $rb_times(255, amount)).$round(), 255].$min()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [2, [$rb_plus(rgb['$[]'](2).$to_i(), $rb_times(255, amount)).$round(), 255].$min()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return "#%02x%02x%02x"['$%'](rgb);
    }, TMP_String_rgb_lighter_4.$$arity = -1);
    self.$alias_method("rgb_lighten", "rgb_lighter");
    return (Opal.defn(self, '$rgb_inverse', TMP_String_rgb_inverse_6 = function $$rgb_inverse() {
      var TMP_5, self = this, hex_color = nil, rgb = nil, $writer = nil;

      
      hex_color = self.$gsub("#", "");
      rgb = $send(hex_color.$scan(/../), 'map', [], (TMP_5 = function(color){var self = TMP_5.$$s || this;
if (color == null) color = nil;
      return color.$hex()}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
      
      $writer = [0, [$rb_minus(255, rgb['$[]'](0).$to_i()), 0].$max()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [1, [$rb_minus(255, rgb['$[]'](1).$to_i()), 0].$max()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [2, [$rb_minus(255, rgb['$[]'](2).$to_i()), 0].$max()];
      $send(rgb, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return "#%02x%02x%02x"['$%'](rgb);
    }, TMP_String_rgb_inverse_6.$$arity = 0), nil) && 'rgb_inverse';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/css/bootstrap3/colors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  
  self.$require("robe/client/css/colors/util");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Bootstrap3, self = $Bootstrap3 = $module($base, 'Bootstrap3');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $Colors, self = $Colors = $module($base, 'Colors');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          
          Opal.const_set($nesting[0], 'GRAY_BASE', "#000");
          Opal.const_set($nesting[0], 'GRAY_DARKER', "#222");
          Opal.const_set($nesting[0], 'GRAY_DARK', "#333");
          Opal.const_set($nesting[0], 'GRAY', "#555");
          Opal.const_set($nesting[0], 'GRAY_LIGHT', "#777");
          Opal.const_set($nesting[0], 'GRAY_LIGHTER', "#eee");
          Opal.const_set($nesting[0], 'COLOR_BRAND_PRIMARY', "#337ab7");
          Opal.const_set($nesting[0], 'COLOR_BRAND_SUCCESS', "#cb85c");
          Opal.const_set($nesting[0], 'COLOR_BRAND_INFO', "#bc0de");
          Opal.const_set($nesting[0], 'COLOR_BRAND_WARNING', "#f0ad4e");
          Opal.const_set($nesting[0], 'COLOR_BRAND_DANGER', "#d9534f");
          Opal.const_set($nesting[0], 'COLOR_BUTTON_PRIMARY', "#337ab7");
          Opal.const_set($nesting[0], 'COLOR_BUTTON_SUCCESS', "#449d44");
          Opal.const_set($nesting[0], 'COLOR_BUTTON_INFO', "#31b0d5");
          Opal.const_set($nesting[0], 'COLOR_BUTTON_WARNING', "#ec971f");
          Opal.const_set($nesting[0], 'COLOR_BUTTON_DANGER', "#c9302c");
          Opal.const_set($nesting[0], 'COLOR_STATE_SUCCESS', "#3c763d");
          Opal.const_set($nesting[0], 'COLOR_STATE_SUCCESS_BG', "#dff0d8");
          Opal.const_set($nesting[0], 'COLOR_STATE_INFO', "#31708f");
          Opal.const_set($nesting[0], 'COLOR_STATE_INFO_BG', "#d9edf7");
          Opal.const_set($nesting[0], 'COLOR_STATE_WARNING', "#8a6d3b");
          Opal.const_set($nesting[0], 'COLOR_STATE_WARNING_BG', "#fcf8e3");
          Opal.const_set($nesting[0], 'COLOR_STATE_DANGER', "#a94442");
          Opal.const_set($nesting[0], 'COLOR_STATE_DANGER_BG', "#f2dede");
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/component"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$app', '$router', '$route', '$params', '$clear', '$render', '$is_a?', '$tag', '$sanitize_content', '$[]', '$div']);
  
  (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  self.$require("robe/common/trace");
  self.$require("robe/client/browser");
  self.$require("robe/client/dom");
  self.$require("robe/common/state");
  self.$require("robe/client/css/bootstrap3/colors");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Component_initialize_1, TMP_Component_app_2, TMP_Component_router_3, TMP_Component_route_4, TMP_Component_params_5, TMP_Component_clear_6, TMP_Component_root_7, TMP_Component_render_8;

        def.root = nil;
        
        self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Browser'));
        self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'DOM'));
        self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'CSS'), 'Bootstrap3'), 'Colors'));
        self.$attr_reader("root");
        
        Opal.defn(self, '$initialize', TMP_Component_initialize_1 = function $$initialize() {
          var self = this;

          return nil
        }, TMP_Component_initialize_1.$$arity = 0);
        
        Opal.defn(self, '$app', TMP_Component_app_2 = function $$app() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Robe').$app()
        }, TMP_Component_app_2.$$arity = 0);
        
        Opal.defn(self, '$router', TMP_Component_router_3 = function $$router() {
          var self = this;

          return self.$app().$router()
        }, TMP_Component_router_3.$$arity = 0);
        
        Opal.defn(self, '$route', TMP_Component_route_4 = function $$route() {
          var self = this;

          return self.$router().$route()
        }, TMP_Component_route_4.$$arity = 0);
        
        Opal.defn(self, '$params', TMP_Component_params_5 = function $$params() {
          var self = this;

          return self.$route().$params()
        }, TMP_Component_params_5.$$arity = 0);
        
        Opal.defn(self, '$clear', TMP_Component_clear_6 = function $$clear() {
          var self = this;

          return (self.root = Opal.const_get_relative($nesting, 'DOM').$clear(self.root))
        }, TMP_Component_clear_6.$$arity = 0);
        
        Opal.defn(self, '$root', TMP_Component_root_7 = function $$root() {
          var $a, self = this;

          
          if ($truthy(self.root)) {
            } else {
            
            self.root = self.$render();
            if ($truthy(($truthy($a = self.root['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Binding'))) ? $a : self.root['$is_a?'](Opal.const_get_relative($nesting, 'Enumerable'))))) {
              self.root = self.$tag("div", self.root)};
            self.root = self.$sanitize_content(self.root);
          };
          return self.root;
        }, TMP_Component_root_7.$$arity = 0);
        return (Opal.defn(self, '$render', TMP_Component_render_8 = function $$render() {
          var self = this;

          return self.$div()['$[]']()
        }, TMP_Component_render_8.$$arity = 0), nil) && 'render';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$is_a?', '$resolve', '$new', '$reject', '$attr_reader', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$fail', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$reject!', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$lambda', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$each', '$wait', '$to_promise_then', '$to_proc', '$map', '$reduce', '$then', '$always', '$try', '$tap', '$all?', '$find', '$alias_method', '$client?', '$to_promise', '$to_promise_error', '$when', '$to_a', '$to_promise_when']);
  
  self.$require("robe/common/errors");
  (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Promise(){};
      var self = $Promise = $klass($base, $super, 'Promise', $Promise);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Promise_value_1, TMP_Promise_error_2, TMP_Promise_when_3, TMP_Promise_initialize_4, TMP_Promise_value_5, TMP_Promise_act$q_6, TMP_Promise_action_7, TMP_Promise_exception$q_8, TMP_Promise_realized$q_9, TMP_Promise_resolved$q_10, TMP_Promise_rejected$q_11, TMP_Promise_$_12, TMP_Promise_$lt$lt_13, TMP_Promise_$gt$gt_14, TMP_Promise_resolve_15, TMP_Promise_resolve$B_16, TMP_Promise_reject_17, TMP_Promise_reject$B_18, TMP_Promise_exception$B_19, TMP_Promise_then_20, TMP_Promise_fail_21, TMP_Promise_always_22, TMP_Promise_trace_23, TMP_Promise_inspect_24;

      def.value = def.action = def.exception = def.realized = def.delayed = def.error = def.prev = def.next = nil;
      
      Opal.defs(self, '$value', TMP_Promise_value_1 = function $$value(value) {
        var self = this;

        
        value['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise'));
        return self.$new().$resolve(value);
      }, TMP_Promise_value_1.$$arity = 1);
      Opal.defs(self, '$error', TMP_Promise_error_2 = function $$error(value) {
        var self = this;

        return self.$new().$reject(value)
      }, TMP_Promise_error_2.$$arity = 1);
      Opal.defs(self, '$when', TMP_Promise_when_3 = function $$when($a_rest) {
        var self = this, promises;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        promises = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          promises[$arg_idx - 0] = arguments[$arg_idx];
        }
        return Opal.const_get_relative($nesting, 'When').$new(promises)
      }, TMP_Promise_when_3.$$arity = -1);
      self.$attr_reader("error", "prev", "next");
      
      Opal.defn(self, '$initialize', TMP_Promise_initialize_4 = function $$initialize(action) {
        var self = this;

        if (action == null) {
          action = $hash2([], {});
        }
        
        self.action = action;
        self.realized = false;
        self.exception = false;
        self.value = nil;
        self.error = nil;
        self.delayed = false;
        self.prev = nil;
        return (self.next = nil);
      }, TMP_Promise_initialize_4.$$arity = -1);
      
      Opal.defn(self, '$value', TMP_Promise_value_5 = function $$value() {
        var self = this;

        if ($truthy(self.value['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise')))) {
          return self.value.$value()
          } else {
          return self.value
        }
      }, TMP_Promise_value_5.$$arity = 0);
      
      Opal.defn(self, '$act?', TMP_Promise_act$q_6 = function() {
        var $a, self = this;

        return ($truthy($a = self.action['$has_key?']("success")) ? $a : self.action['$has_key?']("always"))
      }, TMP_Promise_act$q_6.$$arity = 0);
      
      Opal.defn(self, '$action', TMP_Promise_action_7 = function $$action() {
        var self = this;

        return self.action.$keys()
      }, TMP_Promise_action_7.$$arity = 0);
      
      Opal.defn(self, '$exception?', TMP_Promise_exception$q_8 = function() {
        var self = this;

        return self.exception
      }, TMP_Promise_exception$q_8.$$arity = 0);
      
      Opal.defn(self, '$realized?', TMP_Promise_realized$q_9 = function() {
        var self = this;

        return self.realized['$!']()['$!']()
      }, TMP_Promise_realized$q_9.$$arity = 0);
      
      Opal.defn(self, '$resolved?', TMP_Promise_resolved$q_10 = function() {
        var self = this;

        return self.realized['$==']("resolve")
      }, TMP_Promise_resolved$q_10.$$arity = 0);
      
      Opal.defn(self, '$rejected?', TMP_Promise_rejected$q_11 = function() {
        var self = this;

        return self.realized['$==']("reject")
      }, TMP_Promise_rejected$q_11.$$arity = 0);
      
      Opal.defn(self, '$^', TMP_Promise_$_12 = function(promise) {
        var self = this;

        
        promise['$<<'](self);
        self['$>>'](promise);
        return promise;
      }, TMP_Promise_$_12.$$arity = 1);
      
      Opal.defn(self, '$<<', TMP_Promise_$lt$lt_13 = function(promise) {
        var self = this;

        
        self.prev = promise;
        return self;
      }, TMP_Promise_$lt$lt_13.$$arity = 1);
      
      Opal.defn(self, '$>>', TMP_Promise_$gt$gt_14 = function(promise) {
        var $a, self = this;

        
        if ($truthy(promise['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise')))) {
          } else {
          self.$fail()
        };
        self.next = promise;
        if ($truthy(self['$exception?']())) {
          promise.$reject(self.delayed['$[]'](0))
        } else if ($truthy(self['$resolved?']())) {
          promise.$resolve((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
            } else {
            return self.$value()
          }; return nil; })())
        } else if ($truthy(self['$rejected?']())) {
          if ($truthy(($truthy($a = self.action['$has_key?']("failure")['$!']()) ? $a : (function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
            } else {
            return self.error
          }; return nil; })()['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise'))))) {
            promise.$reject((function() {if ($truthy(self.delayed)) {
              return self.delayed['$[]'](0)
              } else {
              return self.$error()
            }; return nil; })())
          } else if ($truthy(promise.$action()['$include?']("always"))) {
            promise.$reject((function() {if ($truthy(self.delayed)) {
              return self.delayed['$[]'](0)
              } else {
              return self.$error()
            }; return nil; })())}};
        return self;
      }, TMP_Promise_$gt$gt_14.$$arity = 1);
      
      Opal.defn(self, '$resolve', TMP_Promise_resolve_15 = function $$resolve(value) {
        var $a, self = this, block = nil;

        if (value == null) {
          value = nil;
        }
        
        if ($truthy(self['$realized?']())) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the promise has already been realized")};
        if ($truthy(value['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise')))) {
          return value['$<<'](self.prev)['$^'](self)};
        if ($truthy((block = ($truthy($a = self.action['$[]']("success")) ? $a : self.action['$[]']("always"))))) {
          value = block.$call(value)};
        self['$resolve!'](value);
        return self;
      }, TMP_Promise_resolve_15.$$arity = -1);
      
      Opal.defn(self, '$resolve!', TMP_Promise_resolve$B_16 = function(value) {
        var self = this;

        
        self.realized = "resolve";
        self.value = value;
        if ($truthy(self.next)) {
          
          if ($truthy(self.next['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise')))) {
            } else {
            self.$fail()
          };
          return self.next.$resolve(value);
          } else {
          return (self.delayed = [value])
        };
      }, TMP_Promise_resolve$B_16.$$arity = 1);
      
      Opal.defn(self, '$reject', TMP_Promise_reject_17 = function $$reject(value) {
        var $a, self = this, block = nil;

        if (value == null) {
          value = nil;
        }
        
        if ($truthy(self['$realized?']())) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the promise has already been realized")};
        if ($truthy(value['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise')))) {
          return value['$<<'](self.prev)['$^'](self)};
        if ($truthy((block = ($truthy($a = self.action['$[]']("failure")) ? $a : self.action['$[]']("always"))))) {
          value = block.$call(value)};
        if ($truthy(self.action['$has_key?']("always"))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
        return self;
      }, TMP_Promise_reject_17.$$arity = -1);
      
      Opal.defn(self, '$reject!', TMP_Promise_reject$B_18 = function(value) {
        var self = this;

        
        self.realized = "reject";
        self.error = value;
        if ($truthy(self.next)) {
          
          if ($truthy(self.next['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise')))) {
            } else {
            self.$fail()
          };
          return self.next.$reject(value);
          } else {
          return (self.delayed = [value])
        };
      }, TMP_Promise_reject$B_18.$$arity = 1);
      
      Opal.defn(self, '$exception!', TMP_Promise_exception$B_19 = function(error) {
        var self = this;

        
        self.exception = true;
        return self['$reject!'](error);
      }, TMP_Promise_exception$B_19.$$arity = 1);
      
      Opal.defn(self, '$then', TMP_Promise_then_20 = function $$then() {
        var self = this, $iter = TMP_Promise_then_20.$$p, block = $iter || nil;

        if ($iter) TMP_Promise_then_20.$$p = null;
        
        if ($truthy(self.next)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "a promise has already been chained")};
        return self['$^'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$new($hash2(["success"], {"success": block})));
      }, TMP_Promise_then_20.$$arity = 0);
      Opal.alias(self, "to_promise_then", "then");
      
      Opal.defn(self, '$fail', TMP_Promise_fail_21 = function $$fail() {
        var self = this, $iter = TMP_Promise_fail_21.$$p, block = $iter || nil;

        if ($iter) TMP_Promise_fail_21.$$p = null;
        
        if ($truthy(self.next)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "a promise has already been chained")};
        return self['$^'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$new($hash2(["failure"], {"failure": block})));
      }, TMP_Promise_fail_21.$$arity = 0);
      Opal.alias(self, "to_promise_fail", "fail");
      
      Opal.defn(self, '$always', TMP_Promise_always_22 = function $$always() {
        var self = this, $iter = TMP_Promise_always_22.$$p, block = $iter || nil;

        if ($iter) TMP_Promise_always_22.$$p = null;
        
        if ($truthy(self.next)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "a promise has already been chained")};
        return self['$^'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$new($hash2(["always"], {"always": block})));
      }, TMP_Promise_always_22.$$arity = 0);
      Opal.alias(self, "ensure", "always");
      Opal.alias(self, "to_promise_always", "always");
      Opal.alias(self, "to_promise_ensure", "ensure");
      
      Opal.defn(self, '$trace', TMP_Promise_trace_23 = function $$trace(depth) {
        var self = this, $iter = TMP_Promise_trace_23.$$p, block = $iter || nil;

        if (depth == null) {
          depth = nil;
        }
        if ($iter) TMP_Promise_trace_23.$$p = null;
        
        if ($truthy(self.next)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "a promise has already been chained")};
        return self['$^'](Opal.const_get_relative($nesting, 'Trace').$new(depth, block));
      }, TMP_Promise_trace_23.$$arity = -1);
      
      Opal.defn(self, '$inspect', TMP_Promise_inspect_24 = function $$inspect() {
        var $a, self = this, result = nil;

        
        result = "" + "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
        if ($truthy(self.next)) {
          result = $rb_plus(result, "" + " >> " + (self.next.$inspect()))};
        if ($truthy(self['$realized?']())) {
          result = $rb_plus(result, "" + ": " + (($truthy($a = self.value) ? $a : self.error).$inspect()) + ">")
          } else {
          result = $rb_plus(result, ">")
        };
        return result;
      }, TMP_Promise_inspect_24.$$arity = 0);
      (function($base, $super, $parent_nesting) {
        function $Trace(){};
        var self = $Trace = $klass($base, $super, 'Trace', $Trace);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Trace_it_25, TMP_Trace_initialize_26;

        
        Opal.defs(self, '$it', TMP_Trace_it_25 = function $$it(promise) {
          var $a, self = this, current = nil, prev = nil;

          
          current = [];
          if ($truthy(($truthy($a = promise['$act?']()) ? $a : promise.$prev()['$nil?']()))) {
            current.$push(promise.$value())};
          if ($truthy((prev = promise.$prev()))) {
            return current.$concat(self.$it(prev))
            } else {
            return current
          };
        }, TMP_Trace_it_25.$$arity = 1);
        return (Opal.defn(self, '$initialize', TMP_Trace_initialize_26 = function $$initialize(depth, block) {
          var TMP_27, self = this, $iter = TMP_Trace_initialize_26.$$p, $yield = $iter || nil;

          if ($iter) TMP_Trace_initialize_26.$$p = null;
          
          self.depth = depth;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Trace_initialize_26, false), [$hash2(["success"], {"success": $send(self, 'lambda', [], (TMP_27 = function(){var self = TMP_27.$$s || this, $a, trace = nil;

          
            trace = Opal.const_get_relative($nesting, 'Trace').$it(self).$reverse();
            trace.$pop();
            if ($truthy(($truthy($a = depth) ? $rb_le(depth, trace.$length()) : $a))) {
              trace.$shift($rb_minus(trace.$length(), depth))};
            return $send(block, 'call', Opal.to_a(trace));}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27))})], null);
        }, TMP_Trace_initialize_26.$$arity = 2), nil) && 'initialize';
      })($nesting[0], self, $nesting);
      return (function($base, $super, $parent_nesting) {
        function $When(){};
        var self = $When = $klass($base, $super, 'When', $When);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_When_initialize_28, TMP_When_each_30, TMP_When_collect_32, TMP_When_inject_34, TMP_When_wait_37, TMP_When_$gt$gt_38, TMP_When_try_40;

        def.wait = nil;
        
        
        Opal.defn(self, '$initialize', TMP_When_initialize_28 = function $$initialize(promises) {
          var TMP_29, self = this, $iter = TMP_When_initialize_28.$$p, $yield = $iter || nil;

          if (promises == null) {
            promises = [];
          }
          if ($iter) TMP_When_initialize_28.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_When_initialize_28, false), [], null);
          self.wait = [];
          return $send(promises, 'each', [], (TMP_29 = function(promise){var self = TMP_29.$$s || this;
if (promise == null) promise = nil;
          return self.$wait(promise)}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
        }, TMP_When_initialize_28.$$arity = -1);
        
        Opal.defn(self, '$each', TMP_When_each_30 = function $$each() {
          var TMP_31, self = this, $iter = TMP_When_each_30.$$p, block = $iter || nil;

          if ($iter) TMP_When_each_30.$$p = null;
          
          if ($truthy(block)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
          };
          return $send(self, 'to_promise_then', [], (TMP_31 = function(values){var self = TMP_31.$$s || this;
if (values == null) values = nil;
          return $send(values, 'each', [], block.$to_proc())}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
        }, TMP_When_each_30.$$arity = 0);
        
        Opal.defn(self, '$collect', TMP_When_collect_32 = function $$collect() {
          var TMP_33, self = this, $iter = TMP_When_collect_32.$$p, block = $iter || nil;

          if ($iter) TMP_When_collect_32.$$p = null;
          
          if ($truthy(block)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
          };
          return $send(self, 'to_promise_then', [], (TMP_33 = function(values){var self = TMP_33.$$s || this;
if (values == null) values = nil;
          return Opal.const_get_relative($nesting, 'When').$new($send(values, 'map', [], block.$to_proc()))}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33));
        }, TMP_When_collect_32.$$arity = 0);
        
        Opal.defn(self, '$inject', TMP_When_inject_34 = function $$inject($a_rest) {
          var TMP_35, self = this, args, $iter = TMP_When_inject_34.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_When_inject_34.$$p = null;
          return $send(self, 'to_promise_then', [], (TMP_35 = function(values){var self = TMP_35.$$s || this;
if (values == null) values = nil;
          return $send(values, 'reduce', Opal.to_a(args), block.$to_proc())}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35))
        }, TMP_When_inject_34.$$arity = -1);
        Opal.alias(self, "map", "collect");
        Opal.alias(self, "reduce", "inject");
        
        Opal.defn(self, '$wait', TMP_When_wait_37 = function $$wait(promise) {
          var TMP_36, self = this;

          
          if ($truthy(promise['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise')))) {
            } else {
            promise = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$value(promise)
          };
          if ($truthy(promise['$act?']())) {
            promise = promise.$then()};
          self.wait['$<<'](promise);
          $send(promise, 'always', [], (TMP_36 = function(){var self = TMP_36.$$s || this;
            if (self.next == null) self.next = nil;

          if ($truthy(self.next)) {
              return self.$try()
              } else {
              return nil
            }}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36));
          return self;
        }, TMP_When_wait_37.$$arity = 1);
        
        Opal.defn(self, '$>>', TMP_When_$gt$gt_38 = function($a_rest) {
          var TMP_39, self = this, $iter = TMP_When_$gt$gt_38.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_When_$gt$gt_38.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return $send($send(self, Opal.find_super_dispatcher(self, '>>', TMP_When_$gt$gt_38, false), $zuper, $iter), 'tap', [], (TMP_39 = function(){var self = TMP_39.$$s || this;

          return self.$try()}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39))
        }, TMP_When_$gt$gt_38.$$arity = -1);
        return (Opal.defn(self, '$try', TMP_When_try_40 = function() {
          var self = this, promise = nil;

          if ($truthy($send(self.wait, 'all?', [], "realized?".$to_proc()))) {
            if ($truthy((promise = $send(self.wait, 'find', [], "rejected?".$to_proc())))) {
              return self.$reject(promise.$error())
              } else {
              return self.$resolve($send(self.wait, 'map', [], "value".$to_proc()))
            }
            } else {
            return nil
          }
        }, TMP_When_try_40.$$arity = 0), nil) && 'try';
      })($nesting[0], self, $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_is_promise$q_41, TMP_Object_to_promise_then_42, TMP_Object_to_promise_fail_43, TMP_Object_to_promise_always_44, TMP_Object_to_promise_45, TMP_Object_to_promise_on_client_46, TMP_Object_to_promise_error_47, TMP_Object_to_promise_error_on_client_48;

    
    
    Opal.defn(self, '$is_promise?', TMP_Object_is_promise$q_41 = function() {
      var self = this;

      return self['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise'))
    }, TMP_Object_is_promise$q_41.$$arity = 0);
    
    Opal.defn(self, '$to_promise_then', TMP_Object_to_promise_then_42 = function $$to_promise_then() {
      var self = this, $iter = TMP_Object_to_promise_then_42.$$p, block = $iter || nil;

      if ($iter) TMP_Object_to_promise_then_42.$$p = null;
      return block.$call(self)
    }, TMP_Object_to_promise_then_42.$$arity = 0);
    
    Opal.defn(self, '$to_promise_fail', TMP_Object_to_promise_fail_43 = function $$to_promise_fail() {
      var self = this, $iter = TMP_Object_to_promise_fail_43.$$p, block = $iter || nil;

      if ($iter) TMP_Object_to_promise_fail_43.$$p = null;
      return block.$call(self)
    }, TMP_Object_to_promise_fail_43.$$arity = 0);
    
    Opal.defn(self, '$to_promise_always', TMP_Object_to_promise_always_44 = function $$to_promise_always() {
      var self = this, $iter = TMP_Object_to_promise_always_44.$$p, block = $iter || nil;

      if ($iter) TMP_Object_to_promise_always_44.$$p = null;
      return block.$call(self)
    }, TMP_Object_to_promise_always_44.$$arity = 0);
    self.$alias_method("to_promise_ensure", "to_promise_always");
    
    Opal.defn(self, '$to_promise', TMP_Object_to_promise_45 = function $$to_promise() {
      var self = this;

      if ($truthy(self['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise')))) {
        return self
        } else {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$value(self)
      }
    }, TMP_Object_to_promise_45.$$arity = 0);
    
    Opal.defn(self, '$to_promise_on_client', TMP_Object_to_promise_on_client_46 = function $$to_promise_on_client() {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Robe')['$client?']())) {
        return self.$to_promise()
        } else {
        return self
      }
    }, TMP_Object_to_promise_on_client_46.$$arity = 0);
    
    Opal.defn(self, '$to_promise_error', TMP_Object_to_promise_error_47 = function $$to_promise_error() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$error(self)
    }, TMP_Object_to_promise_error_47.$$arity = 0);
    return (Opal.defn(self, '$to_promise_error_on_client', TMP_Object_to_promise_error_on_client_48 = function $$to_promise_error_on_client() {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Robe')['$client?']())) {
        return self.$to_promise_error()
        } else {
        return self
      }
    }, TMP_Object_to_promise_error_on_client_48.$$arity = 0), nil) && 'to_promise_error_on_client';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_promise_when_49, TMP_Array_to_promise_when_on_client_50;

    
    
    Opal.defn(self, '$to_promise_when', TMP_Array_to_promise_when_49 = function $$to_promise_when() {
      var self = this;

      return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise'), 'when', Opal.to_a(self.$to_a()))
    }, TMP_Array_to_promise_when_49.$$arity = 0);
    return (Opal.defn(self, '$to_promise_when_on_client', TMP_Array_to_promise_when_on_client_50 = function $$to_promise_when_on_client() {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Robe')['$client?']())) {
        return self.$to_promise_when()
        } else {
        return self
      }
    }, TMP_Array_to_promise_when_on_client_50.$$arity = 0), nil) && 'to_promise_when_on_client';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/sockets/channel"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$<<', '$[]', '$to_sym', '$[]=', '$-', '$each', '$call', '$close_channel', '$socket', '$name', '$channel?', '$!', '$open?', '$trace', '$send_message']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Sockets(){};
        var self = $Sockets = $klass($base, $super, 'Sockets', $Sockets);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Channel(){};
          var self = $Channel = $klass($base, $super, 'Channel', $Channel);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Channel_initialize_1, TMP_Channel_on_2, TMP_Channel_receive_message_4, TMP_Channel_close_5, TMP_Channel_open$q_6, TMP_Channel_closed$q_7, TMP_Channel_send_message_8;

          def.handlers = nil;
          
          self.$attr_reader("name", "socket");
          
          Opal.defn(self, '$initialize', TMP_Channel_initialize_1 = function $$initialize(name, socket) {
            var self = this;

            
            self.name = name;
            self.socket = socket;
            return (self.handlers = $hash2([], {}));
          }, TMP_Channel_initialize_1.$$arity = 2);
          
          Opal.defn(self, '$on', TMP_Channel_on_2 = function $$on(event) {
            var $a, self = this, $iter = TMP_Channel_on_2.$$p, block = $iter || nil, $writer = nil;

            if ($iter) TMP_Channel_on_2.$$p = null;
            return ($truthy($a = self.handlers['$[]'](event.$to_sym())) ? $a : (($writer = [event.$to_sym(), []]), $send(self.handlers, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](block)
          }, TMP_Channel_on_2.$$arity = 1);
          
          Opal.defn(self, '$receive_message', TMP_Channel_receive_message_4 = function $$receive_message($kwargs) {
            var TMP_3, self = this, event, content, handlers = nil;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'event')) {
              throw Opal.ArgumentError.$new('missing keyword: event');
            }
            event = $kwargs.$$smap["event"];
            content = $kwargs.$$smap["content"];
            if (content == null) {
              content = nil
            }
            if ($truthy((handlers = self.handlers['$[]'](event.$to_sym())))) {
              return $send(handlers, 'each', [], (TMP_3 = function(handler){var self = TMP_3.$$s || this;
if (handler == null) handler = nil;
              return handler.$call(content)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
              } else {
              return nil
            }
          }, TMP_Channel_receive_message_4.$$arity = 1);
          
          Opal.defn(self, '$close', TMP_Channel_close_5 = function $$close() {
            var self = this;

            return self.$socket().$close_channel(self.$name())
          }, TMP_Channel_close_5.$$arity = 0);
          
          Opal.defn(self, '$open?', TMP_Channel_open$q_6 = function() {
            var self = this;

            return self.$socket()['$channel?'](self.$name())
          }, TMP_Channel_open$q_6.$$arity = 0);
          
          Opal.defn(self, '$closed?', TMP_Channel_closed$q_7 = function() {
            var self = this;

            return self['$open?']()['$!']()
          }, TMP_Channel_closed$q_7.$$arity = 0);
          return (Opal.defn(self, '$send_message', TMP_Channel_send_message_8 = function $$send_message($kwargs) {
            var self = this, event, content;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'event')) {
              throw Opal.ArgumentError.$new('missing keyword: event');
            }
            event = $kwargs.$$smap["event"];
            content = $kwargs.$$smap["content"];
            if (content == null) {
              content = nil
            }
            
            self.$trace("robe/client/sockets/channel", 42, self, "send_message", "" + " : event=" + (event) + " content=" + (content));
            return self.$socket().$send_message($hash2(["channel", "event", "content"], {"channel": self.$name(), "event": event, "content": content}));
          }, TMP_Channel_send_message_8.$$arity = 1), nil) && 'send_message';
        })($nesting[0], null, $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/sockets/incoming_message"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$channel', '$event', '$content']);
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Sockets(){};
        var self = $Sockets = $klass($base, $super, 'Sockets', $Sockets);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $IncomingMessage(){};
          var self = $IncomingMessage = $klass($base, $super, 'IncomingMessage', $IncomingMessage);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IncomingMessage_initialize_1, TMP_IncomingMessage_to_h_2;

          
          self.$attr_reader("channel", "event", "content");
          
          Opal.defn(self, '$initialize', TMP_IncomingMessage_initialize_1 = function $$initialize($kwargs) {
            var $a, self = this, channel, event, content;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'channel')) {
              throw Opal.ArgumentError.$new('missing keyword: channel');
            }
            channel = $kwargs.$$smap["channel"];
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'event')) {
              throw Opal.ArgumentError.$new('missing keyword: event');
            }
            event = $kwargs.$$smap["event"];
            content = $kwargs.$$smap["content"];
            if (content == null) {
              content = nil
            }
            return $a = [channel, event, content], (self.channel = $a[0]), (self.event = $a[1]), (self.content = $a[2]), $a
          }, TMP_IncomingMessage_initialize_1.$$arity = 1);
          return (Opal.defn(self, '$to_h', TMP_IncomingMessage_to_h_2 = function $$to_h() {
            var self = this;

            return $hash2(["channel", "event", "content"], {"channel": self.$channel(), "event": self.$event(), "content": self.$content()})
          }, TMP_IncomingMessage_to_h_2.$$arity = 0), nil) && 'to_h';
        })($nesting[0], null, $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/sockets"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$new', '$init_socket', '$!~', '$==', '$trace', '$keys', '$values', '$[]', '$to_sym', '$!', '$raise', '$[]=', '$-', '$send_message', '$delete', '$connected?', '$on', '$to_proc', '$alias_method', '$compact', '$delay', '$*', '$+', '$private', '$url', '$instance', '$on_open', '$on_close', '$on_error', '$on_message', '$receive_message', '$parse', '$channel', '$event', '$content', '$module_function']);
  
  self.$require("robe/common/trace");
  self.$require("robe/common/sockets");
  self.$require("robe/common/promise");
  self.$require("robe/client/browser");
  self.$require("robe/client/browser/websocket");
  self.$require("robe/client/sockets/channel");
  self.$require("robe/client/sockets/incoming_message");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Robe_sockets_23;

    
    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Sockets(){};
        var self = $Sockets = $klass($base, $super, 'Sockets', $Sockets);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Sockets_instance_1, TMP_Sockets_initialize_2, TMP_Sockets_url_3, TMP_Sockets_open_channel_names_4, TMP_Sockets_open_channels_5, TMP_Sockets_$$_6, TMP_Sockets_channel$q_7, TMP_Sockets_open_channel_8, TMP_Sockets_close_channel_9, TMP_Sockets_connected$q_10, TMP_Sockets_on_open_11, TMP_Sockets_on_close_12, TMP_Sockets_on_error_13, TMP_Sockets_on_message_14, TMP_Sockets_send_message_16, TMP_Sockets_init_socket_21, TMP_Sockets_receive_message_22;

        def.url = def.channels = def.websocket = nil;
        
        self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Sockets'));
        Opal.defs(self, '$instance', TMP_Sockets_instance_1 = function $$instance() {
          var $a, self = this;
          if (self.instance == null) self.instance = nil;

          return (self.instance = ($truthy($a = self.instance) ? $a : self.$new()))
        }, TMP_Sockets_instance_1.$$arity = 0);
        
        Opal.defn(self, '$initialize', TMP_Sockets_initialize_2 = function $$initialize() {
          var self = this;

          
          self.channels = $hash2([], {});
          return self.$init_socket();
        }, TMP_Sockets_initialize_2.$$arity = 0);
        
        Opal.defn(self, '$url', TMP_Sockets_url_3 = function $$url() {
          var self = this, url = nil, ws_proto = nil;

          
          if ($truthy(self.url)) {
            } else {
            
            url = "" + (document.location.host) + "/socket";
            if ($truthy(url['$!~'](/^wss?[:]\/\//))) {
              
              if ($truthy(url['$!~'](/^[:]\/\//))) {
                url = "" + "://" + (url)};
              ws_proto = (function() {if ($truthy((document.location.protocol)['$==']("https:"))) {
                return "wss"
                } else {
                return "ws"
              }; return nil; })();
              url = "" + (ws_proto) + (url);};
            self.$trace("robe/client/sockets", 39, self, "url", "" + " sockets url = " + (url));
            self.url = url;
          };
          return self.url;
        }, TMP_Sockets_url_3.$$arity = 0);
        
        Opal.defn(self, '$open_channel_names', TMP_Sockets_open_channel_names_4 = function $$open_channel_names() {
          var self = this;

          return self.channels.$keys()
        }, TMP_Sockets_open_channel_names_4.$$arity = 0);
        
        Opal.defn(self, '$open_channels', TMP_Sockets_open_channels_5 = function $$open_channels() {
          var self = this;

          return self.channels.$values()
        }, TMP_Sockets_open_channels_5.$$arity = 0);
        
        Opal.defn(self, '$[]', TMP_Sockets_$$_6 = function(channel_name) {
          var self = this;

          return self.channels['$[]'](channel_name.$to_sym())
        }, TMP_Sockets_$$_6.$$arity = 1);
        
        Opal.defn(self, '$channel?', TMP_Sockets_channel$q_7 = function(name) {
          var self = this;

          return self.channels['$[]'](name.$to_sym())['$!']()['$!']()
        }, TMP_Sockets_channel$q_7.$$arity = 1);
        
        Opal.defn(self, '$open_channel', TMP_Sockets_open_channel_8 = function $$open_channel(name) {
          var self = this, channel = nil, $writer = nil;

          
          name = name.$to_sym();
          channel = self.channels['$[]'](name);
          if ($truthy(channel)) {
            self.$raise(Opal.const_get_relative($nesting, 'RuntimeError'), "" + "channel " + (channel) + " already open")};
          channel = Opal.const_get_relative($nesting, 'Channel').$new(name, self);
          
          $writer = [name, channel];
          $send(self.channels, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          channel.$send_message($hash2(["event"], {"event": "subscribe"}));
          return channel;
        }, TMP_Sockets_open_channel_8.$$arity = 1);
        
        Opal.defn(self, '$close_channel', TMP_Sockets_close_channel_9 = function $$close_channel(name) {
          var self = this, channel = nil;

          
          name = name.$to_sym();
          channel = self.channels['$[]'](name);
          if ($truthy(channel)) {
            
            channel.$send_message($hash2(["event"], {"event": "unsubscribe"}));
            return self.channels.$delete(channel);
            } else {
            return nil
          };
        }, TMP_Sockets_close_channel_9.$$arity = 1);
        
        Opal.defn(self, '$connected?', TMP_Sockets_connected$q_10 = function() {
          var self = this;

          return self.websocket['$connected?']()
        }, TMP_Sockets_connected$q_10.$$arity = 0);
        
        Opal.defn(self, '$on_open', TMP_Sockets_on_open_11 = function $$on_open() {
          var self = this, $iter = TMP_Sockets_on_open_11.$$p, block = $iter || nil;

          if ($iter) TMP_Sockets_on_open_11.$$p = null;
          return $send(self.websocket, 'on', ["open"], block.$to_proc())
        }, TMP_Sockets_on_open_11.$$arity = 0);
        
        Opal.defn(self, '$on_close', TMP_Sockets_on_close_12 = function $$on_close() {
          var self = this, $iter = TMP_Sockets_on_close_12.$$p, block = $iter || nil;

          if ($iter) TMP_Sockets_on_close_12.$$p = null;
          return $send(self.websocket, 'on', ["close"], block.$to_proc())
        }, TMP_Sockets_on_close_12.$$arity = 0);
        self.$alias_method("on_connect", "on_open");
        self.$alias_method("on_disconnect", "on_close");
        
        Opal.defn(self, '$on_error', TMP_Sockets_on_error_13 = function $$on_error() {
          var self = this, $iter = TMP_Sockets_on_error_13.$$p, block = $iter || nil;

          if ($iter) TMP_Sockets_on_error_13.$$p = null;
          return $send(self.websocket, 'on', ["error"], block.$to_proc())
        }, TMP_Sockets_on_error_13.$$arity = 0);
        
        Opal.defn(self, '$on_message', TMP_Sockets_on_message_14 = function $$on_message() {
          var self = this, $iter = TMP_Sockets_on_message_14.$$p, block = $iter || nil;

          if ($iter) TMP_Sockets_on_message_14.$$p = null;
          return $send(self.websocket, 'on', ["message"], block.$to_proc())
        }, TMP_Sockets_on_message_14.$$arity = 0);
        
        Opal.defn(self, '$send_message', TMP_Sockets_send_message_16 = function $$send_message($kwargs) {
          var TMP_15, self = this, channel, event, content, attempt, message = nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'channel')) {
            throw Opal.ArgumentError.$new('missing keyword: channel');
          }
          channel = $kwargs.$$smap["channel"];
          if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'event')) {
            throw Opal.ArgumentError.$new('missing keyword: event');
          }
          event = $kwargs.$$smap["event"];
          content = $kwargs.$$smap["content"];
          if (content == null) {
            content = nil
          }
          attempt = $kwargs.$$smap["attempt"];
          if (attempt == null) {
            attempt = 0
          }
          
          message = $hash2(["channel", "event", "content"], {"channel": channel, "event": event, "content": content}).$compact();
          self.$trace("robe/client/sockets", 110, self, "send_message", "" + " message = " + (message));
          if ($truthy(self['$connected?']())) {
            
            self.$trace("robe/client/sockets", 112, self, "send_message", "" + " : @websocket.send_message(" + (message) + ")");
            return self.websocket.$send_message(message);
            } else {
            
            if (attempt['$=='](20)) {
              
              self.$trace("robe/client/sockets", 116, self, "send_message", " : unable to connect to websocket");
              self.$raise(Opal.const_get_relative($nesting, 'RuntimeError'), "" + ("robe/client/sockets") + "[" + (117) + "] : unable to connect to websocket");};
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Browser'), 'delay', [$rb_times(attempt, 100)], (TMP_15 = function(){var self = TMP_15.$$s || this, $writer = nil;

            
              self.$trace("robe/client/sockets", 120, self, nil, "" + " : not connected : message=" + (message) + " attempt=" + (attempt));
              
              $writer = ["attempt", $rb_plus(attempt, 1)];
              $send(message, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return self.$send_message(Opal.to_hash(message));}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
          };
        }, TMP_Sockets_send_message_16.$$arity = 1);
        self.$private();
        
        Opal.defn(self, '$init_socket', TMP_Sockets_init_socket_21 = function $$init_socket() {
          var TMP_17, TMP_18, TMP_19, TMP_20, self = this;

          
          self.$trace("robe/client/sockets", 130, self, "init_socket", "" + " url='" + (self.$url()) + "'");
          self.websocket = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Browser'), 'WebSocket').$instance(self.$url(), $hash2(["auto_reconnect"], {"auto_reconnect": true}));
          $send(self, 'on_open', [], (TMP_17 = function(event){var self = TMP_17.$$s || this;
if (event == null) event = nil;
          return nil}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
          $send(self, 'on_close', [], (TMP_18 = function(event){var self = TMP_18.$$s || this;
if (event == null) event = nil;
          return nil}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18));
          $send(self, 'on_error', [], (TMP_19 = function(event){var self = TMP_19.$$s || this;
if (event == null) event = nil;
          return nil}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
          return $send(self, 'on_message', [], (TMP_20 = function(message){var self = TMP_20.$$s || this;
if (message == null) message = nil;
          return self.$receive_message(message)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20));
        }, TMP_Sockets_init_socket_21.$$arity = 0);
        return (Opal.defn(self, '$receive_message', TMP_Sockets_receive_message_22 = function $$receive_message(message) {
          var self = this, channel = nil;

          
          message = Opal.const_get_relative($nesting, 'IncomingMessage').$new(Opal.to_hash(message.$parse()));
          channel = self['$[]'](message.$channel());
          if ($truthy(channel)) {
            return channel.$receive_message($hash2(["event", "content"], {"event": message.$event().$to_sym(), "content": message.$content()}))
            } else {
            return nil
          };
        }, TMP_Sockets_receive_message_22.$$arity = 1), nil) && 'receive_message';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting);
    self.$module_function();
    
    Opal.defn(self, '$sockets', TMP_Robe_sockets_23 = function $$sockets() {
      var $a, self = this;
      if (self.sockets == null) self.sockets = nil;

      return (self.sockets = ($truthy($a = self.sockets) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Sockets').$instance()))
    }, TMP_Robe_sockets_23.$$arity = 0);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/tasks"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$module_function', '$trace', '$user?', '$app', '$user', '$tap', '$each', '$respond_to?', '$send', '$[]=', '$-', '$send_request', '$new', '$+', '$send_message', '$channel', '$task_channel', '$sockets', '$open_channel', '$channel_name', '$on', '$process_response', '$symbolize_keys', '$[]', '$delete', '$error', '$logger', '$reject', '$class', '$resolve', '$name']);
  
  self.$require("robe/client/sockets");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Robe_tasks_9;

    
    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Tasks, self = $Tasks = $module($base, 'Tasks');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Tasks_perform_3, TMP_Tasks_send_request_4, TMP_Tasks_channel_name_5, TMP_Tasks_channel_7, TMP_Tasks_process_response_8;

        
        self.$module_function();
        
        Opal.defn(self, '$perform', TMP_Tasks_perform_3 = function $$perform(task_name, $kwargs) {
          var TMP_1, self = this, kwargs, meta_data = nil, user = nil, $writer = nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          kwargs = Opal.kwrestargs($kwargs, {});
          
          self.$trace("robe/client/tasks", 12, self, "perform", "" + "(" + (task_name) + ", {kwargs})");
          meta_data = $hash2([], {});
          self.$trace("robe/client/tasks", 17, self, "perform");
          if ($truthy(Opal.const_get_relative($nesting, 'Robe').$app()['$user?']())) {
            
            user = Opal.const_get_relative($nesting, 'Robe').$app().$user();
            
            $writer = ["user", $send($hash2([], {}), 'tap', [], (TMP_1 = function(hash){var self = TMP_1.$$s || this, TMP_2;
if (hash == null) hash = nil;
            return $send(["id", "signature"], 'each', [], (TMP_2 = function(attr){var self = TMP_2.$$s || this;
if (attr == null) attr = nil;
              if ($truthy(user['$respond_to?'](attr))) {
                  
                  $writer = [attr, user.$send(attr)];
                  $send(hash, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                  } else {
                  return nil
                }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1))];
            $send(meta_data, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          self.$trace("robe/client/tasks", 26, self, "perform", "" + " meta_data=" + (meta_data));
          return self.$send_request(task_name, meta_data, Opal.to_hash(kwargs));
        }, TMP_Tasks_perform_3.$$arity = -2);
        Opal.defs(self, '$send_request', TMP_Tasks_send_request_4 = function $$send_request(task_name, meta_data, $kwargs) {
          var $a, self = this, kwargs, promise = nil, promise_id = nil, $writer = nil;
          if (self.promises == null) self.promises = nil;
          if (self.promise_id == null) self.promise_id = nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          kwargs = Opal.kwrestargs($kwargs, {});
          
          self.$trace("robe/client/tasks", 35, self, "send_request", "" + "(" + (task_name) + ", " + (meta_data) + ", " + (kwargs) + ")");
          self.promises = ($truthy($a = self.promises) ? $a : $hash2([], {}));
          self.promise_id = ($truthy($a = self.promise_id) ? $a : 0);
          promise = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$new();
          promise_id = (self.promise_id = $rb_plus(self.promise_id, 1));
          
          $writer = [promise_id, promise];
          $send(self.promises, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.$trace("robe/client/tasks", 42, self, "send_request");
          self.$channel().$send_message($hash2(["event", "content"], {"event": "request", "content": $hash2(["task", "promise_id", "kwargs", "meta_data"], {"task": task_name, "promise_id": promise_id, "kwargs": kwargs, "meta_data": meta_data})}));
          return promise;
        }, TMP_Tasks_send_request_4.$$arity = -3);
        Opal.defs(self, '$channel_name', TMP_Tasks_channel_name_5 = function $$channel_name() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Robe').$sockets().$task_channel()
        }, TMP_Tasks_channel_name_5.$$arity = 0);
        Opal.defs(self, '$channel', TMP_Tasks_channel_7 = function $$channel() {
          var TMP_6, self = this;
          if (self.channel == null) self.channel = nil;

          
          if ($truthy(self.channel)) {
            } else {
            
            self.channel = Opal.const_get_relative($nesting, 'Robe').$sockets().$open_channel(self.$channel_name());
            $send(self.channel, 'on', ["response"], (TMP_6 = function(response){var self = TMP_6.$$s || this;
if (response == null) response = nil;
            return self.$process_response(response)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
          };
          return self.channel;
        }, TMP_Tasks_channel_7.$$arity = 0);
        Opal.defs(self, '$process_response', TMP_Tasks_process_response_8 = function $$process_response(response) {
          var self = this, promise_id = nil, result = nil, error = nil, promise = nil;
          if (self.promises == null) self.promises = nil;

          
          response = response.$symbolize_keys();
          promise_id = response['$[]']("promise_id");
          result = response['$[]']("result");
          error = response['$[]']("error");
          promise = self.promises.$delete(promise_id);
          if ($truthy(promise)) {
            if ($truthy(error)) {
              
              Opal.const_get_relative($nesting, 'Robe').$logger().$error("" + "Task error: " + (error));
              return promise.$reject(error);
              } else {
              
              self.$trace("robe/client/tasks", 85, self, "process_response", "" + " response.class=" + (response.$class()) + " result.class=" + (result.$class()));
              return promise.$resolve(result);
            }
            } else {
            return Opal.const_get_relative($nesting, 'Robe').$logger().$error("" + ("robe/client/tasks") + "[" + (89) + "] " + (self.$name()) + "#" + ("process_response") + " : no promise with id " + (promise_id) + " ")
          };
        }, TMP_Tasks_process_response_8.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
    self.$module_function();
    
    Opal.defn(self, '$tasks', TMP_Robe_tasks_9 = function $$tasks() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Tasks')
    }, TMP_Robe_tasks_9.$$arity = 0);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/server"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash = Opal.hash, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$module_function', '$trace', '$perform', '$tasks']);
  
  self.$require("robe/client/tasks");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Robe_server_2;

    
    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Server, self = $Server = $module($base, 'Server');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Server_perform_task_1;

        
        self.$module_function();
        
        Opal.defn(self, '$perform_task', TMP_Server_perform_task_1 = function $$perform_task(name, $kwargs) {
          var self = this, kwargs;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          kwargs = Opal.kwrestargs($kwargs, {});
          
          self.$trace("robe/client/server", 12, self, "perform_task", "" + "(" + (name) + ", " + (kwargs) + ")");
          return Opal.const_get_relative($nesting, 'Robe').$tasks().$perform(name, Opal.to_hash(kwargs));
        }, TMP_Server_perform_task_1.$$arity = -2);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
    self.$module_function();
    
    Opal.defn(self, '$server', TMP_Robe_server_2 = function $$server() {
      var $a, self = this;
      if (self.server == null) self.server = nil;

      return (self.server = ($truthy($a = self.server) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Server')))
    }, TMP_Robe_server_2.$$arity = 0);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/common/db/ops"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$op', '$stringify_keys', '$to_promise_then', '$is_a?', '$first', '$alias_method', '$to_h', '$[]', '$uuid', '$[]=', '$-', '$raise', '$name', '$update_one', '$map', '$to_proc', '$to_s', '$each', '$==', '$error', '$compact', '$<<', '$id', '$bulk_write', '$delete_one', '$delete_many', '$extend']);
  
  self.$require("robe/common/util");
  self.$require("robe/common/promise");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Shared, self = $Shared = $module($base, 'Shared');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $DB(){};
        var self = $DB = $klass($base, $super, 'DB', $DB);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var $Ops, self = $Ops = $module($base, 'Ops');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Ops_included_23;

          
          Opal.const_set($nesting[0], 'ID', "_id");
          (function($base, $parent_nesting) {
            var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_stats_1, TMP_ClassMethods_collection_names_2, TMP_ClassMethods_create_3, TMP_ClassMethods_drop_4, TMP_ClassMethods_find_5, TMP_ClassMethods_find_one_7, TMP_ClassMethods_insert_8, TMP_ClassMethods_insert_many_9, TMP_ClassMethods_update_one_10, TMP_ClassMethods_update_many_11, TMP_ClassMethods_update_document_by_id_12, TMP_ClassMethods_upsert_associates_16, TMP_ClassMethods_delete_with_id_17, TMP_ClassMethods_delete_with_ids_18, TMP_ClassMethods_delete_one_19, TMP_ClassMethods_delete_many_20, TMP_ClassMethods_bulk_write_21, TMP_ClassMethods_drop_collection_22;

            
            
            Opal.defn(self, '$stats', TMP_ClassMethods_stats_1 = function $$stats() {
              var self = this;

              return self.$op("database", "stats")
            }, TMP_ClassMethods_stats_1.$$arity = 0);
            
            Opal.defn(self, '$collection_names', TMP_ClassMethods_collection_names_2 = function $$collection_names() {
              var self = this;

              return self.$op("database", "collection_names")
            }, TMP_ClassMethods_collection_names_2.$$arity = 0);
            
            Opal.defn(self, '$create', TMP_ClassMethods_create_3 = function $$create(collection) {
              var self = this;

              return self.$op(collection, "create")
            }, TMP_ClassMethods_create_3.$$arity = 1);
            
            Opal.defn(self, '$drop', TMP_ClassMethods_drop_4 = function $$drop(collection) {
              var self = this;

              return self.$op(collection, "drop")
            }, TMP_ClassMethods_drop_4.$$arity = 1);
            
            Opal.defn(self, '$find', TMP_ClassMethods_find_5 = function $$find(collection, filter, options) {
              var $a, self = this;

              if (filter == null) {
                filter = nil;
              }
              if (options == null) {
                options = nil;
              }
              
              filter = ($truthy($a = filter) ? $a : $hash2([], {}));
              filter = filter.$stringify_keys();
              options = ($truthy($a = options) ? $a : $hash2([], {}));
              options = options.$stringify_keys();
              return self.$op(collection, "find", filter, options);
            }, TMP_ClassMethods_find_5.$$arity = -2);
            
            Opal.defn(self, '$find_one', TMP_ClassMethods_find_one_7 = function $$find_one(collection, filter, options) {
              var $a, TMP_6, self = this;

              if (options == null) {
                options = nil;
              }
              
              filter = ($truthy($a = filter) ? $a : $hash2([], {})).$stringify_keys();
              options = ($truthy($a = options) ? $a : $hash2([], {})).$stringify_keys();
              return $send(self.$op(collection, "find", filter, options), 'to_promise_then', [], (TMP_6 = function(many){var self = TMP_6.$$s || this;
if (many == null) many = nil;
              if ($truthy(many['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
                  return many.$first()
                  } else {
                  return nil
                }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
            }, TMP_ClassMethods_find_one_7.$$arity = -3);
            
            Opal.defn(self, '$insert', TMP_ClassMethods_insert_8 = function $$insert(collection, document) {
              var self = this;

              return self.$op(collection, "insert_one", document)
            }, TMP_ClassMethods_insert_8.$$arity = 2);
            self.$alias_method("insert_one", "insert");
            
            Opal.defn(self, '$insert_many', TMP_ClassMethods_insert_many_9 = function $$insert_many(collection, documents) {
              var self = this;

              return self.$op(collection, "insert_many", documents)
            }, TMP_ClassMethods_insert_many_9.$$arity = 2);
            
            Opal.defn(self, '$update_one', TMP_ClassMethods_update_one_10 = function $$update_one(collection, filter, update, options) {
              var self = this;

              if (options == null) {
                options = nil;
              }
              return self.$op(collection, "update_one", filter.$stringify_keys(), update.$stringify_keys(), (function() {if ($truthy(options)) {
                return options.$stringify_keys()
                } else {
                return $hash2([], {})
              }; return nil; })())
            }, TMP_ClassMethods_update_one_10.$$arity = -4);
            
            Opal.defn(self, '$update_many', TMP_ClassMethods_update_many_11 = function $$update_many(collection, filter, update, options) {
              var self = this;

              if (options == null) {
                options = nil;
              }
              return self.$op(collection, "update_many", (function() {if ($truthy(filter)) {
                return filter.$stringify_keys()
                } else {
                return nil
              }; return nil; })(), update.$stringify_keys(), (function() {if ($truthy(options)) {
                return options.$stringify_keys()
                } else {
                return nil
              }; return nil; })())
            }, TMP_ClassMethods_update_many_11.$$arity = -4);
            
            Opal.defn(self, '$update_document_by_id', TMP_ClassMethods_update_document_by_id_12 = function $$update_document_by_id(collection, document, $kwargs) {
              var self = this, upsert, id = nil, $writer = nil;

              if ($kwargs == null || !$kwargs.$$is_hash) {
                if ($kwargs == null) {
                  $kwargs = $hash2([], {});
                } else {
                  throw Opal.ArgumentError.$new('expected kwargs');
                }
              }
              upsert = $kwargs.$$smap["upsert"];
              if (upsert == null) {
                upsert = false
              }
              
              document = document.$to_h().$stringify_keys();
              id = document['$[]'](Opal.const_get_relative($nesting, 'ID'));
              if ($truthy(id)) {
              } else if ($truthy(upsert)) {
                
                $writer = [Opal.const_get_relative($nesting, 'ID'), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Util').$uuid()];
                $send(document, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                } else {
                self.$raise(Opal.const_get_relative($nesting, 'DBError'), "" + (self.$name()) + "##" + ("update_document_by_id") + " : no id set in document to update")
              };
              return self.$update_one(collection, $hash(Opal.const_get_relative($nesting, 'ID'), id), $hash2(["$set"], {"$set": document}), $hash2(["upsert"], {"upsert": upsert}));
            }, TMP_ClassMethods_update_document_by_id_12.$$arity = -3);
            
            Opal.defn(self, '$upsert_associates', TMP_ClassMethods_upsert_associates_16 = function $$upsert_associates(collection, local_key_field, owner_key_value, associates) {try {

              var TMP_13, TMP_14, TMP_15, self = this, update_ids = nil, delete_filter = nil, ops = nil;

              
              associates = $send(associates, 'map', [], "stringify_keys".$to_proc());
              local_key_field = local_key_field.$to_s();
              $send(associates, 'each', [], (TMP_13 = function(associate){var self = TMP_13.$$s || this;
if (associate == null) associate = nil;
              if (associate['$[]'](local_key_field)['$=='](owner_key_value)) {
                  return nil
                  } else {
                  Opal.ret(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$error("" + (nil) + "(" + (collection) + ", " + (local_key_field) + ", " + (owner_key_value) + ", ...) : associates must have local_key to to owner_key"))
                }}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13));
              update_ids = $send(associates, 'map', [], (TMP_14 = function(e){var self = TMP_14.$$s || this;
if (e == null) e = nil;
              return e['$[]'](Opal.const_get_relative($nesting, 'ID'))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14)).$compact();
              delete_filter = $hash2(["$and"], {"$and": [$hash(local_key_field, owner_key_value), $hash(Opal.const_get_relative($nesting, 'ID'), $hash2(["$nin"], {"$nin": update_ids}))]});
              ops = [];
              ops['$<<']($hash2(["deleteMany"], {"deleteMany": $hash2(["filter"], {"filter": delete_filter})}));
              $send(associates, 'each', [], (TMP_15 = function(associate){var self = TMP_15.$$s || this;
if (associate == null) associate = nil;
              return ops['$<<']($hash2(["updateOne"], {"updateOne": $hash2(["filter", "update", "upsert"], {"filter": $hash(Opal.const_get_relative($nesting, 'ID'), associate.$id()), "update": associate, "upsert": true})}))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15));
              return self.$bulk_write(collection, ops);
              } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
            }, TMP_ClassMethods_upsert_associates_16.$$arity = 4);
            
            Opal.defn(self, '$delete_with_id', TMP_ClassMethods_delete_with_id_17 = function $$delete_with_id(collection, id) {
              var self = this;

              return self.$delete_one(collection, $hash(Opal.const_get_relative($nesting, 'ID'), id))
            }, TMP_ClassMethods_delete_with_id_17.$$arity = 2);
            
            Opal.defn(self, '$delete_with_ids', TMP_ClassMethods_delete_with_ids_18 = function $$delete_with_ids(collection, ids) {
              var self = this;

              return self.$delete_many(collection, $hash(Opal.const_get_relative($nesting, 'ID'), $hash2(["$in"], {"$in": ids})))
            }, TMP_ClassMethods_delete_with_ids_18.$$arity = 2);
            
            Opal.defn(self, '$delete_one', TMP_ClassMethods_delete_one_19 = function $$delete_one(collection, filter) {
              var self = this;

              return self.$op(collection, "delete_one", filter.$stringify_keys())
            }, TMP_ClassMethods_delete_one_19.$$arity = 2);
            
            Opal.defn(self, '$delete_many', TMP_ClassMethods_delete_many_20 = function $$delete_many(collection, filter) {
              var self = this;

              if (filter == null) {
                filter = nil;
              }
              return self.$op(collection, "delete_many", (function() {if ($truthy(filter)) {
                return filter.$stringify_keys()
                } else {
                return nil
              }; return nil; })())
            }, TMP_ClassMethods_delete_many_20.$$arity = -2);
            
            Opal.defn(self, '$bulk_write', TMP_ClassMethods_bulk_write_21 = function $$bulk_write(collection, ops) {
              var self = this;

              return self.$op(collection, "bulk_write", ops)
            }, TMP_ClassMethods_bulk_write_21.$$arity = 2);
            
            Opal.defn(self, '$drop_collection', TMP_ClassMethods_drop_collection_22 = function $$drop_collection(name) {
              var self = this;

              return self.$op()
            }, TMP_ClassMethods_drop_collection_22.$$arity = 1);
          })($nesting[0], $nesting);
          Opal.defs(self, '$included', TMP_Ops_included_23 = function $$included(base) {
            var self = this;

            return base.$extend(Opal.const_get_relative($nesting, 'ClassMethods'))
          }, TMP_Ops_included_23.$$arity = 1);
        })($nesting[0], $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/db"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$server', '$perform_task', '$fail', '$then', '$trace', '$[]', '$class', '$symbolize_keys', '$value', '$error', '$module_function']);
  
  self.$require("json");
  self.$require("robe/client/server");
  self.$require("robe/common/db/ops");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Robe_db_5;

    
    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $DB(){};
        var self = $DB = $klass($base, $super, 'DB', $DB);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DB_server_1, TMP_DB_op_4;

        
        self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Shared'), 'DB'), 'Ops'));
        Opal.defs(self, '$server', TMP_DB_server_1 = function $$server() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Robe').$server()
        }, TMP_DB_server_1.$$arity = 0);
        return Opal.defs(self, '$op', TMP_DB_op_4 = function $$op(target, method, $a_rest) {
          var TMP_2, TMP_3, self = this, args, promise = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 2;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 2] = arguments[$arg_idx];
          }
          
          promise = self.$server().$perform_task("dbop", $hash2(["target", "method", "args"], {"target": target, "method": method, "args": args}));
          return $send($send(promise, 'then', [], (TMP_2 = function(response){var self = TMP_2.$$s || this;
if (response == null) response = nil;
          
            self.$trace("robe/client/db", 22, self, nil, "" + " : target=" + (target) + " method=" + (method) + " args==" + (args) + " : response[:success]=" + (response['$[]']("success")) + " response[:error]=" + (response['$[]']("error")) + " response[:data]=" + (response['$[]']("data").$class()));
            response = response.$symbolize_keys();
            if ($truthy(response['$[]']("success"))) {
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$value(response['$[]']("data"))
              } else {
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$error(response['$[]']("error"))
            };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2)), 'fail', [], (TMP_3 = function(error){var self = TMP_3.$$s || this;
if (error == null) error = nil;
          
            self.$trace("robe/client/db", 30, self, nil, "" + " : target=" + (target) + " method=" + (method) + " args==" + (args) + " : error : " + (error));
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Promise').$error(error);}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        }, TMP_DB_op_4.$$arity = -3);
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting);
    self.$module_function();
    
    Opal.defn(self, '$db', TMP_Robe_db_5 = function $$db() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'DB')
    }, TMP_Robe_db_5.$$arity = 0);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["browser/cookies"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$+', '$now', '$*', '$include', '$attr_reader', '$dup', '$scan', '$escape', '$encode_uri_component', '$empty?', '$map', '$flatten', '$parse', '$decode_uri_component', '$==', '$length', '$first', '$is_a?', '$dump', '$encode', '$merge', '$Array', '$split', '$keys', '$[]', '$enum_for', '$each', '$delete', '$protected', '$new', '$<<', '$utc', '$string']);
  
  self.$require("stringio");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Cookies(){};
      var self = $Cookies = $klass($base, $super, 'Cookies', $Cookies);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Cookies_initialize_1, TMP_Cookies_$$_3, TMP_Cookies_$$$eq_4, TMP_Cookies_delete_5, TMP_Cookies_keys_7, TMP_Cookies_values_9, TMP_Cookies_each_10, TMP_Cookies_clear_13, TMP_Cookies_encode_14;

      def.document = def.options = nil;
      
      Opal.const_set($nesting[0], 'DEFAULT', $hash2(["expires", "secure"], {"expires": $rb_plus(Opal.const_get_relative($nesting, 'Time').$now(), $rb_times($rb_times(60, 60), 24)), "secure": false}));
      self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
      self.$attr_reader("options");
      
      Opal.defn(self, '$initialize', TMP_Cookies_initialize_1 = function $$initialize(document) {
        var self = this;

        
        self.document = document;
        return (self.options = Opal.const_get_relative($nesting, 'DEFAULT').$dup());
      }, TMP_Cookies_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$[]', TMP_Cookies_$$_3 = function(name) {
        var TMP_2, self = this, matches = nil, result = nil;

        
        matches = (self.document.cookie).$scan(new RegExp("" + (Opal.const_get_relative($nesting, 'Regexp').$escape(name.$encode_uri_component())) + "=([^;]*)"));
        if ($truthy(matches['$empty?']())) {
          return nil};
        result = $send(matches.$flatten(), 'map', [], (TMP_2 = function(value){var self = TMP_2.$$s || this;
if (value == null) value = nil;
        return Opal.const_get_relative($nesting, 'JSON').$parse(value.$decode_uri_component())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        if (result.$length()['$=='](1)) {
          return result.$first()
          } else {
          return result
        };
      }, TMP_Cookies_$$_3.$$arity = 1);
      
      Opal.defn(self, '$[]=', TMP_Cookies_$$$eq_4 = function(name, value, options) {
        var self = this, string = nil, encoded_value = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        string = (function() {if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
          return value
          } else {
          return Opal.const_get_relative($nesting, 'JSON').$dump(value)
        }; return nil; })();
        encoded_value = self.$encode(name, string, self.options.$merge(options));
        return self.document.cookie = encoded_value;
      }, TMP_Cookies_$$$eq_4.$$arity = -3);
      
      Opal.defn(self, '$delete', TMP_Cookies_delete_5 = function(name) {
        var self = this;

        return self.document.cookie = self.$encode(name, "", $hash2(["expires"], {"expires": Opal.const_get_relative($nesting, 'Time').$now()}))
      }, TMP_Cookies_delete_5.$$arity = 1);
      
      Opal.defn(self, '$keys', TMP_Cookies_keys_7 = function $$keys() {
        var TMP_6, self = this;

        return $send(self.$Array(self.document.cookie.split(/; /)), 'map', [], (TMP_6 = function(cookie){var self = TMP_6.$$s || this;
if (cookie == null) cookie = nil;
        return cookie.$split(/\s*=\s*/).$first()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
      }, TMP_Cookies_keys_7.$$arity = 0);
      
      Opal.defn(self, '$values', TMP_Cookies_values_9 = function $$values() {
        var TMP_8, self = this;

        return $send(self.$keys(), 'map', [], (TMP_8 = function(key){var self = TMP_8.$$s || this;
if (key == null) key = nil;
        return self['$[]'](key)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
      }, TMP_Cookies_values_9.$$arity = 0);
      
      Opal.defn(self, '$each', TMP_Cookies_each_10 = function $$each() {
        var TMP_11, self = this, $iter = TMP_Cookies_each_10.$$p, block = $iter || nil;

        if ($iter) TMP_Cookies_each_10.$$p = null;
        
        if ($truthy(block)) {
          } else {
          return self.$enum_for("each")
        };
        $send(self.$keys(), 'each', [], (TMP_11 = function(key){var self = TMP_11.$$s || this;
if (key == null) key = nil;
        return Opal.yieldX(block, [key, self['$[]'](key)]);}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
        return self;
      }, TMP_Cookies_each_10.$$arity = 0);
      
      Opal.defn(self, '$clear', TMP_Cookies_clear_13 = function $$clear() {
        var TMP_12, self = this;

        
        $send(self.$keys(), 'each', [], (TMP_12 = function(key){var self = TMP_12.$$s || this;
if (key == null) key = nil;
        return self.$delete(key)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
        return self;
      }, TMP_Cookies_clear_13.$$arity = 0);
      self.$protected();
      return (Opal.defn(self, '$encode', TMP_Cookies_encode_14 = function $$encode(key, value, options) {
        var self = this, io = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        io = Opal.const_get_relative($nesting, 'StringIO').$new();
        io['$<<'](key.$encode_uri_component())['$<<']("=")['$<<'](value.$encode_uri_component())['$<<']("; ");
        if ($truthy(options['$[]']("max_age"))) {
          io['$<<']("max-age=")['$<<'](options['$[]']("max_age"))['$<<']("; ")};
        if ($truthy(options['$[]']("expires"))) {
          io['$<<']("expires=")['$<<'](options['$[]']("expires").$utc())['$<<']("; ")};
        if ($truthy(options['$[]']("path"))) {
          io['$<<']("path=")['$<<'](options['$[]']("path"))['$<<']("; ")};
        if ($truthy(options['$[]']("domain"))) {
          io['$<<']("domain=")['$<<'](options['$[]']("domain"))['$<<']("; ")};
        if ($truthy(options['$[]']("secure"))) {
          io['$<<']("secure")};
        return io.$string();
      }, TMP_Cookies_encode_14.$$arity = -3), nil) && 'encode';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Document(){};
      var self = $Document = $klass($base, $super, 'Document', $Document);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Document_cookies_15;

      def["native"] = nil;
      return (Opal.defn(self, '$cookies', TMP_Document_cookies_15 = function $$cookies() {
        var self = this;

        if ($truthy((typeof(self["native"].cookie) !== "undefined"))) {
          return Opal.const_get_relative($nesting, 'Cookies').$new(self["native"])
          } else {
          return nil
        }
      }, TMP_Document_cookies_15.$$arity = 0), nil) && 'cookies'
    })(Opal.const_get_relative($nesting, 'DOM'), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'DOM'), 'Element'), $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/browser_ext/cookies"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$fail', '$name', '$class', '$lambda', '$call', '$to_sym', '$cause', '$removed', '$cookie', '$value', '$domain', '$hostOnly', '$path', '$httpOnly', '$session', '$expirationDate', '$storeId']);
  
  self.$require("browser/cookies");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Cookies(){};
      var self = $Cookies = $klass($base, $super, 'Cookies', $Cookies);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Cookies_on_change_1;

      return (Opal.defn(self, '$on_change', TMP_Cookies_on_change_1 = function $$on_change() {
        var TMP_2, self = this, $iter = TMP_Cookies_on_change_1.$$p, callback = $iter || nil, handler = nil;

        if ($iter) TMP_Cookies_on_change_1.$$p = null;
        
        self.$fail("" + (self.$class().$name()) + "#" + ("on_change") + " not implemented yet - not sure how to...");
        handler = $send(self, 'lambda', [], (TMP_2 = function(event){var self = TMP_2.$$s || this;
if (event == null) event = nil;
        return callback.$call($hash2(["cause", "removed", "cookie"], {"cause": event.$cause().$to_sym(), "removed": event.$removed(), "cookie": $hash2(["name", "value", "domain", "host_only", "path", "http_only", "session", "expiration_date", "store_id"], {"name": event.$cookie().$name(), "value": event.$cookie().$value(), "domain": event.$cookie().$domain(), "host_only": event.$cookie().$hostOnly(), "path": event.$cookie().$path(), "http_only": event.$cookie().$httpOnly(), "session": event.$cookie().$session(), "expiration_date": event.$cookie().$expirationDate(), "store_id": event.$cookie().$storeId()})}))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        return window.cookies.onChanged.addListener(handler);
      }, TMP_Cookies_on_change_1.$$arity = 0), nil) && 'on_change'
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/browser/data/cookies"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$attr', '$new', '$each', '$define_method', '$send', '$cookies', '$to_proc', '$document', '$mutate!']);
  
  self.$require("robe/client/browser/browser_ext/cookies");
  self.$require("robe/common/state/atom");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Browser, self = $Browser = $module($base, 'Browser');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Cookies(){};
        var self = $Cookies = $klass($base, $super, 'Cookies', $Cookies);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Cookies_initialize_1, TMP_Cookies_2, TMP_Cookies_4;

        
        self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
        self.$attr("document", "change", "cookies");
        
        Opal.defn(self, '$initialize', TMP_Cookies_initialize_1 = function $$initialize(document) {
          var self = this, $iter = TMP_Cookies_initialize_1.$$p, $yield = $iter || nil;

          if ($iter) TMP_Cookies_initialize_1.$$p = null;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Cookies_initialize_1, false), [$hash2(["document", "cookies", "change"], {"document": document, "cookies": Opal.const_get_qualified(Opal.const_get_qualified('::', 'Browser'), 'Cookies').$new(document), "change": nil})], null)
        }, TMP_Cookies_initialize_1.$$arity = 1);
        $send(["[]", "keys", "values", "each", "options"], 'each', [], (TMP_Cookies_2 = function(method){var self = TMP_Cookies_2.$$s || this, TMP_3;
if (method == null) method = nil;
        return $send(self, 'define_method', [method], (TMP_3 = function($a_rest){var self = TMP_3.$$s || this, block, args;

            block = TMP_3.$$p || nil;
            if (block) TMP_3.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(self.$cookies(), 'send', [method].concat(Opal.to_a(args)), block.$to_proc())}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3))}, TMP_Cookies_2.$$s = self, TMP_Cookies_2.$$arity = 1, TMP_Cookies_2));
        return $send(["[]=", "delete", "clear"], 'each', [], (TMP_Cookies_4 = function(method){var self = TMP_Cookies_4.$$s || this, TMP_5;
if (method == null) method = nil;
        return $send(self, 'define_method', [method], (TMP_5 = function($a_rest){var self = TMP_5.$$s || this, block, args, cookies = nil;

            block = TMP_5.$$p || nil;
            if (block) TMP_5.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            cookies = Opal.const_get_qualified(Opal.const_get_qualified('::', 'Browser'), 'Cookies').$new(self.$document());
            $send(cookies, 'send', [method].concat(Opal.to_a(args)), block.$to_proc());
            return self['$mutate!']($hash2(["cookies"], {"cookies": cookies}));}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5))}, TMP_Cookies_4.$$s = self, TMP_Cookies_4.$$arity = 1, TMP_Cookies_4));
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Atom'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/app/user"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$attr', '$[]', '$+', '$now', '$*', '$[]=', '$-', '$perform_task', '$app', '$signature', '$mutate!', '$state', '$trace', '$user?', '$raise', '$fail', '$then', '$symbolize_keys', '$===', '$new', '$to_h', '$set_user', '$id', '$expiry', '$cookies', '$to_promise', '$<<', '$server_errors', '$to_promise_error', '$delete']);
  
  self.$require("robe/common/model");
  self.$require("robe/common/promise");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $App(){};
        var self = $App = $klass($base, $super, 'App', $App);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $User(){};
          var self = $User = $klass($base, $super, 'User', $User);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_User_initialize_1, TMP_User_sign_out_2, TMP_User_sign_in_7;

          
          self.$attr("id", "signature", "data", "expiry");
          
          Opal.defn(self, '$initialize', TMP_User_initialize_1 = function $$initialize($kwargs) {
            var $a, self = this, args, $iter = TMP_User_initialize_1.$$p, $yield = $iter || nil, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            args = Opal.kwrestargs($kwargs, {});
            if ($iter) TMP_User_initialize_1.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            ($truthy($a = args['$[]']("expiry")) ? $a : (($writer = ["expiry", $rb_plus(Opal.const_get_relative($nesting, 'Time').$now(), $rb_times($rb_times(60, 60), 24))]), $send(args, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_User_initialize_1, false), $zuper, $iter);
          }, TMP_User_initialize_1.$$arity = -1);
          
          Opal.defn(self, '$sign_out', TMP_User_sign_out_2 = function $$sign_out() {
            var self = this;

            
            Opal.const_get_relative($nesting, 'Robe').$app().$perform_task("sign_out", $hash2(["user"], {"user": self.$signature()}));
            return Opal.const_get_relative($nesting, 'Robe').$app().$state()['$mutate!']($hash2(["user"], {"user": nil}));
          }, TMP_User_sign_out_2.$$arity = 0);
          return Opal.defs(self, '$sign_in', TMP_User_sign_in_7 = function $$sign_in(id, password) {
            var TMP_3, TMP_5, self = this;

            
            self.$trace("robe/client/app/user", 24, self, "sign_in", "" + "(" + (id) + ", " + (password) + ")");
            if ($truthy(Opal.const_get_relative($nesting, 'Robe').$app()['$user?']())) {
              self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'UserError'), "previous user must be signed out before sign in of new user")};
            self.$trace("robe/client/app/user", 28, self, "sign_in", "" + "(" + (id) + ", " + (password) + ")");
            return $send($send(Opal.const_get_relative($nesting, 'Robe').$app().$perform_task("sign_in", $hash2(["id", "password"], {"id": id, "password": password})), 'then', [], (TMP_3 = function(result){var self = TMP_3.$$s || this, TMP_4, $case = nil, user = nil, $writer = nil;
if (result == null) result = nil;
            
              self.$trace("robe/client/app/user", 30, self, nil, "" + " result=" + (result));
              result = result.$symbolize_keys();
              return (function() {$case = result['$[]']("status");
              if ("success"['$===']($case)) {
              user = self.$new(Opal.to_hash(result['$[]']("user")));
              self.$trace("robe/client/app/user", 37, self, nil, "" + " user=" + (user.$to_h()));
              Opal.const_get_relative($nesting, 'Robe').$app().$state().$set_user(user);
              self.$trace("robe/client/app/user", 39, self, nil);
              
              $writer = ["user_id", [user.$id(), $hash2(["expires", "secure"], {"expires": user.$expiry(), "secure": true})]];
              $send(Opal.const_get_relative($nesting, 'Robe').$app().$cookies(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.$trace("robe/client/app/user", 44, self, nil);
              return user.$to_promise();}
              else if ("server_error"['$===']($case)) {
              $send(Opal.const_get_relative($nesting, 'Robe').$app().$state(), 'mutate!', [$hash2(["user"], {"user": nil})], (TMP_4 = function(){var self = TMP_4.$$s || this;

              return Opal.const_get_relative($nesting, 'Robe').$app().$state().$server_errors()['$<<'](result['$[]']("error"))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
              return result['$[]']("error").$to_promise_error();}
              else if ("invalid user"['$===']($case)) {
              Opal.const_get_relative($nesting, 'Robe').$app().$state()['$mutate!']($hash2(["user", "sign_in_invalid_user"], {"user": nil, "sign_in_invalid_user": true}));
              return "invalid user".$to_promise_error();}
              else if ("invalid password"['$===']($case)) {
              Opal.const_get_relative($nesting, 'Robe').$app().$state()['$mutate!']($hash2(["user", "sign_in_invalid_password"], {"user": nil, "sign_in_invalid_password": true}));
              return "invalid password".$to_promise_error();}
              else { return nil }})();}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3)), 'fail', [], (TMP_5 = function(error){var self = TMP_5.$$s || this, TMP_6;
if (error == null) error = nil;
            
              self.$trace("robe/client/app/user", 59, self, nil, "" + " error=" + (error));
              $send(Opal.const_get_relative($nesting, 'Robe').$app().$state(), 'mutate!', [$hash2(["user"], {"user": nil})], (TMP_6 = function(){var self = TMP_6.$$s || this;

              return Opal.const_get_relative($nesting, 'Robe').$app().$state().$server_errors()['$<<'](error)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
              Opal.const_get_relative($nesting, 'Robe').$app().$cookies().$delete("user_id");
              return error.$to_promise_error();}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
          }, TMP_User_sign_in_7.$$arity = 2);
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Model'), $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/app/state"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$attr', '$!', '$user', '$user?', '$signed_in?', '$[]', '$>', '$size', '$server_errors', '$error_message', '$mutate!', '$merge', '$add_server_error', '$include?', '$keys', '$sign_in_invalid_user', '$sign_in_invalid_password', '$clear_sign_in_errors', '$sign_in_invalid_user=', '$-', '$sign_in_invalid_password=']);
  
  self.$require("robe/common/state/atom");
  self.$require("robe/client/app/user");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $App(){};
        var self = $App = $klass($base, $super, 'App', $App);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $State(){};
          var self = $State = $klass($base, $super, 'State', $State);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_State_initialize_1, TMP_State_user$q_2, TMP_State_signed_in$q_3, TMP_State_signed_out$q_4, TMP_State_error_message_5, TMP_State_server_errors$q_6, TMP_State_add_server_error_7, TMP_State_notify_web_socket_error_8, TMP_State_websocket_closed$q_9, TMP_State_clear_server_errors_10, TMP_State_sign_in_invalid_user$q_11, TMP_State_sign_in_invalid_password$q_12, TMP_State_set_user_14, TMP_State_clear_sign_in_errors_16;

          
          Opal.const_set($nesting[0], 'WEBSOCKET_CLOSED', 1001);
          Opal.const_set($nesting[0], 'ERRORS', $hash(Opal.const_get_relative($nesting, 'WEBSOCKET_CLOSED'), "Web socket closed by server."));
          self.$attr("user");
          self.$attr("server_errors");
          self.$attr("sign_in_invalid_user");
          self.$attr("sign_in_invalid_password");
          
          Opal.defn(self, '$initialize', TMP_State_initialize_1 = function $$initialize() {
            var self = this, $iter = TMP_State_initialize_1.$$p, $yield = $iter || nil;

            if ($iter) TMP_State_initialize_1.$$p = null;
            return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_State_initialize_1, false), [$hash2(["server_errors"], {"server_errors": $hash2([], {})})], null)
          }, TMP_State_initialize_1.$$arity = 0);
          
          Opal.defn(self, '$user?', TMP_State_user$q_2 = function() {
            var self = this;

            return self.$user()['$!']()['$!']()
          }, TMP_State_user$q_2.$$arity = 0);
          
          Opal.defn(self, '$signed_in?', TMP_State_signed_in$q_3 = function() {
            var self = this;

            return self['$user?']()
          }, TMP_State_signed_in$q_3.$$arity = 0);
          
          Opal.defn(self, '$signed_out?', TMP_State_signed_out$q_4 = function() {
            var self = this;

            return self['$signed_in?']()['$!']()
          }, TMP_State_signed_out$q_4.$$arity = 0);
          
          Opal.defn(self, '$error_message', TMP_State_error_message_5 = function $$error_message(error_code) {
            var self = this;

            return Opal.const_get_relative($nesting, 'ERRORS')['$[]'](error_code)
          }, TMP_State_error_message_5.$$arity = 1);
          
          Opal.defn(self, '$server_errors?', TMP_State_server_errors$q_6 = function() {
            var self = this;

            return $rb_gt(self.$server_errors().$size(), 0)
          }, TMP_State_server_errors$q_6.$$arity = 0);
          
          Opal.defn(self, '$add_server_error', TMP_State_add_server_error_7 = function $$add_server_error(error_code, message) {
            var $a, self = this;

            if (message == null) {
              message = nil;
            }
            
            message = ($truthy($a = message) ? $a : self.$error_message(error_code));
            return self['$mutate!']($hash2(["server_errors"], {"server_errors": self.$server_errors().$merge($hash(error_code, message))}));
          }, TMP_State_add_server_error_7.$$arity = -2);
          
          Opal.defn(self, '$notify_web_socket_error', TMP_State_notify_web_socket_error_8 = function $$notify_web_socket_error() {
            var self = this;

            return self.$add_server_error(Opal.const_get_relative($nesting, 'WEBSOCKET_CLOSED'))
          }, TMP_State_notify_web_socket_error_8.$$arity = 0);
          
          Opal.defn(self, '$websocket_closed?', TMP_State_websocket_closed$q_9 = function() {
            var self = this;

            return self.$server_errors().$keys()['$include?'](Opal.const_get_relative($nesting, 'WEBSOCKET_CLOSED'))
          }, TMP_State_websocket_closed$q_9.$$arity = 0);
          
          Opal.defn(self, '$clear_server_errors', TMP_State_clear_server_errors_10 = function $$clear_server_errors() {
            var self = this;

            return self['$mutate!']($hash2(["server_errors"], {"server_errors": $hash2([], {})}))
          }, TMP_State_clear_server_errors_10.$$arity = 0);
          
          Opal.defn(self, '$sign_in_invalid_user?', TMP_State_sign_in_invalid_user$q_11 = function() {
            var self = this;

            return self.$sign_in_invalid_user()['$!']()['$!']()
          }, TMP_State_sign_in_invalid_user$q_11.$$arity = 0);
          
          Opal.defn(self, '$sign_in_invalid_password?', TMP_State_sign_in_invalid_password$q_12 = function() {
            var self = this;

            return self.$sign_in_invalid_password()['$!']()['$!']()
          }, TMP_State_sign_in_invalid_password$q_12.$$arity = 0);
          
          Opal.defn(self, '$set_user', TMP_State_set_user_14 = function $$set_user(user) {
            var TMP_13, self = this;

            return $send(self, 'mutate!', [$hash2(["user"], {"user": user})], (TMP_13 = function(){var self = TMP_13.$$s || this;

            return self.$clear_sign_in_errors()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))
          }, TMP_State_set_user_14.$$arity = 1);
          return (Opal.defn(self, '$clear_sign_in_errors', TMP_State_clear_sign_in_errors_16 = function $$clear_sign_in_errors() {
            var TMP_15, self = this;

            return $send(self, 'mutate!', [], (TMP_15 = function(){var self = TMP_15.$$s || this, $writer = nil;

            
              
              $writer = [nil];
              $send(self, 'sign_in_invalid_user=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [nil];
              $send(self, 'sign_in_invalid_password=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15))
          }, TMP_State_clear_sign_in_errors_16.$$arity = 0), nil) && 'clear_sign_in_errors';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Atom'), $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["robe/client/app"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$module_function', '$include', '$attr_reader', '$mount', '$instance', '$instance=', '$class', '$-', '$new', '$URL', '$document', '$on', '$render', '$each', '$define_method', '$send', '$state', '$user?', '$id', '$user', '$trace', '$sign_in', '$raise', '$sign_out', '$server', '$perform_task', '$db', '$to_proc', '$watch_url', '$on_mount', '$alias_method', '$window', '$update', '$router', '$on_hash_change', '$<<', '$on_render', '$name', '$hidden?', '$animation_frame', '$perform_render', '$[]', '$body', '$root', '$nil?', '$clear', '$component', '$run_callbacks', '$child', '$app_class']);
  
  self.$require("opal");
  self.$require("robe/common/trace");
  self.$require("robe/client/router");
  self.$require("robe/client/component");
  self.$require("robe/client/sockets");
  self.$require("robe/client/server");
  self.$require("robe/client/db");
  self.$require("robe/client/browser/data/cookies");
  self.$require("robe/client/app/state");
  return (function($base, $parent_nesting) {
    var $Robe, self = $Robe = $module($base, 'Robe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Robe_client$q_1, TMP_Robe_server$q_2, TMP_Robe_app_class_32, TMP_Robe_app_33;

    
    self.$module_function();
    
    Opal.defn(self, '$client?', TMP_Robe_client$q_1 = function() {
      var self = this;

      return true
    }, TMP_Robe_client$q_1.$$arity = 0);
    
    Opal.defn(self, '$server?', TMP_Robe_server$q_2 = function() {
      var self = this;

      return false
    }, TMP_Robe_server$q_2.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Client, self = $Client = $module($base, 'Client');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $App(){};
        var self = $App = $klass($base, $super, 'App', $App);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_App_instance_3, TMP_App_instance$eq_4, TMP_App_mount_5, TMP_App_initialize_7, TMP_App_8, TMP_App_user_id_11, TMP_App_12, TMP_App_sign_in_14, TMP_App_sign_out_15, TMP_App_server_16, TMP_App_perform_task_17, TMP_App_db_18, TMP_App_mount_19, TMP_App_on_mount_20, TMP_App_watch_url_23, TMP_App_render_24, TMP_App_$$_26, TMP_App_root_27, TMP_App_cookies_28, TMP_App_perform_render_29, TMP_App_root_element_30, TMP_App_run_callbacks_31;

        def.server = def.db = def.watching_url = def.will_render = def.root = def.cookies = nil;
        
        self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Browser'));
        self.$attr_reader("state", "router", "component", "root", "on_render", "cookies");
        Opal.defs(self, '$instance', TMP_App_instance_3 = function $$instance() {
          var $a, self = this;

          return (($a = $App.$$cvars['@@instance']) == null ? nil : $a)
        }, TMP_App_instance_3.$$arity = 0);
        Opal.defs(self, '$instance=', TMP_App_instance$eq_4 = function(instance) {
          var self = this;

          return (Opal.class_variable_set($App, '@@instance', instance))
        }, TMP_App_instance$eq_4.$$arity = 1);
        Opal.defs(self, '$mount', TMP_App_mount_5 = function $$mount() {
          var self = this;

          return self.$instance().$mount()
        }, TMP_App_mount_5.$$arity = 0);
        
        Opal.defn(self, '$initialize', TMP_App_initialize_7 = function $$initialize(component) {
          var TMP_6, self = this, $writer = nil;

          if (component == null) {
            component = nil;
          }
          
          
          $writer = [self];
          $send(self.$class(), 'instance=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.state = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App'), 'State').$new();
          self.component = component;
          self.router = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Router').$new(self.$document().$URL());
          self.on_render = [];
          self.watching_url = false;
          return $send(self.$document(), 'on', ["visibilitychange"], (TMP_6 = function(){var self = TMP_6.$$s || this;
            if (self.render_on_visibility_change == null) self.render_on_visibility_change = nil;

          if ($truthy(self.render_on_visibility_change)) {
              
              self.render_on_visibility_change = false;
              return self.$render();
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
        }, TMP_App_initialize_7.$$arity = -1);
        $send(["user", "server_errors", "sign_in_invalid_user", "sign_in_invalid_password"], 'each', [], (TMP_App_8 = function(method){var self = TMP_App_8.$$s || this, TMP_9, TMP_10;
if (method == null) method = nil;
        
          $send(self, 'define_method', [method], (TMP_9 = function(){var self = TMP_9.$$s || this;

          return self.$state().$send(method)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
          return $send(self, 'define_method', ["" + (method) + "?"], (TMP_10 = function(){var self = TMP_10.$$s || this;

          return self.$state().$send("" + (method) + "?")}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10));}, TMP_App_8.$$s = self, TMP_App_8.$$arity = 1, TMP_App_8));
        
        Opal.defn(self, '$user_id', TMP_App_user_id_11 = function $$user_id() {
          var self = this;

          if ($truthy(self['$user?']())) {
            return self.$user().$id()
            } else {
            return nil
          }
        }, TMP_App_user_id_11.$$arity = 0);
        $send(["signed_in?", "signed_out?"], 'each', [], (TMP_App_12 = function(method){var self = TMP_App_12.$$s || this, TMP_13;
if (method == null) method = nil;
        return $send(self, 'define_method', [method], (TMP_13 = function(){var self = TMP_13.$$s || this;

          return self.$state().$send(method)}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))}, TMP_App_12.$$s = self, TMP_App_12.$$arity = 1, TMP_App_12));
        
        Opal.defn(self, '$sign_in', TMP_App_sign_in_14 = function $$sign_in(id, password) {
          var self = this;

          
          self.$trace("robe/client/app", 77, self, "sign_in", "" + "(" + (id) + ", " + (password) + ")");
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App'), 'User').$sign_in(id, password);
        }, TMP_App_sign_in_14.$$arity = 2);
        
        Opal.defn(self, '$sign_out', TMP_App_sign_out_15 = function $$sign_out() {
          var self = this;

          
          if ($truthy(self['$user?']())) {
            } else {
            self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'UserError'), "there is no current user to sign out")
          };
          return self.$user().$sign_out();
        }, TMP_App_sign_out_15.$$arity = 0);
        
        Opal.defn(self, '$server', TMP_App_server_16 = function $$server() {
          var $a, self = this;

          return (self.server = ($truthy($a = self.server) ? $a : Opal.const_get_relative($nesting, 'Robe').$server()))
        }, TMP_App_server_16.$$arity = 0);
        
        Opal.defn(self, '$perform_task', TMP_App_perform_task_17 = function $$perform_task(name, $kwargs) {
          var self = this, kwargs;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          kwargs = Opal.kwrestargs($kwargs, {});
          
          self.$trace("robe/client/app", 97, self, "perform_task", "" + "(" + (name) + ", " + (kwargs) + ")");
          return self.$server().$perform_task(name, Opal.to_hash(kwargs));
        }, TMP_App_perform_task_17.$$arity = -2);
        
        Opal.defn(self, '$db', TMP_App_db_18 = function $$db() {
          var $a, self = this;

          return (self.db = ($truthy($a = self.db) ? $a : Opal.const_get_relative($nesting, 'Robe').$db()))
        }, TMP_App_db_18.$$arity = 0);
        
        Opal.defn(self, '$mount', TMP_App_mount_19 = function $$mount() {
          var self = this, $iter = TMP_App_mount_19.$$p, block = $iter || nil, $writer = nil;

          if ($iter) TMP_App_mount_19.$$p = null;
          
          self.$trace("robe/client/app", 106, self, "mount");
          
          $writer = [self];
          $send(self.$class(), 'instance=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          $send(self, 'render', [], block.$to_proc());
          self.$watch_url();
          return self.$on_mount();
        }, TMP_App_mount_19.$$arity = 0);
        self.$alias_method("call", "mount");
        
        Opal.defn(self, '$on_mount', TMP_App_on_mount_20 = function $$on_mount() {
          var self = this;

          return nil
        }, TMP_App_on_mount_20.$$arity = 0);
        
        Opal.defn(self, '$watch_url', TMP_App_watch_url_23 = function $$watch_url() {
          var TMP_21, TMP_22, self = this;

          if ($truthy(self.watching_url)) {
            return nil
            } else {
            
            $send(self.$window(), 'on', ["popstate"], (TMP_21 = function(){var self = TMP_21.$$s || this;

            
              self.$trace("robe/client/app", 121, self, nil, " : calling router.update");
              return self.$router().$update();}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21));
            $send(self.$window(), 'on_hash_change', [], (TMP_22 = function(new_hash){var self = TMP_22.$$s || this;
if (new_hash == null) new_hash = nil;
            return self.$trace("robe/client/app", 125, self, nil, "" + " : " + (new_hash))}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22));
            return (self.watching_url = true);
          }
        }, TMP_App_watch_url_23.$$arity = 0);
        
        Opal.defn(self, '$render', TMP_App_render_24 = function $$render() {
          var TMP_25, self = this, $iter = TMP_App_render_24.$$p, block = $iter || nil;

          if ($iter) TMP_App_render_24.$$p = null;
          
          if ($truthy(block)) {
            self.$on_render()['$<<'](block)};
          if ($truthy(self.will_render)) {
            return nil};
          self.will_render = true;
          self.$trace("robe/client/app", 137, self, "render", "" + " : document=" + (self.$document().$class().$name()));
          if ($truthy(self.$document()['$hidden?']())) {
            
            self.render_on_visibility_change = true;
            return nil;};
          $send(self.$window(), 'animation_frame', [], (TMP_25 = function(){var self = TMP_25.$$s || this;

          return self.$perform_render()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25));
          return nil;
        }, TMP_App_render_24.$$arity = 0);
        
        Opal.defn(self, '$[]', TMP_App_$$_26 = function(what) {
          var self = this;

          return self.$document()['$[]'](what)
        }, TMP_App_$$_26.$$arity = 1);
        self.$alias_method("element", "[]");
        
        Opal.defn(self, '$root', TMP_App_root_27 = function $$root() {
          var $a, self = this;

          return (self.root = ($truthy($a = self.root) ? $a : (function() {if ($truthy(self.$document().$body())) {
            return self.$document().$body()
            } else {
            return nil
          }; return nil; })()))
        }, TMP_App_root_27.$$arity = 0);
        
        Opal.defn(self, '$cookies', TMP_App_cookies_28 = function $$cookies() {
          var $a, self = this;

          return (self.cookies = ($truthy($a = self.cookies) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Browser'), 'Cookies').$new(self.$document())))
        }, TMP_App_cookies_28.$$arity = 0);
        
        Opal.defn(self, '$perform_render', TMP_App_perform_render_29 = function $$perform_render() {
          var self = this;

          
          self.$trace("robe/client/app", 170, self, "perform_render", "" + " root=" + (self.$root()));
          if ($truthy(self.$root()['$nil?']())) {
            self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "Cannot render to a non-existent root element. Make sure the document ready event has been triggered before invoking the application.")};
          self.$component().$clear();
          self.$root()['$<<'](self.$component().$root());
          self.will_render = false;
          self.$run_callbacks();
          return nil;
        }, TMP_App_perform_render_29.$$arity = 0);
        
        Opal.defn(self, '$root_element', TMP_App_root_element_30 = function $$root_element() {
          var self = this;

          return self.$root().$child()
        }, TMP_App_root_element_30.$$arity = 0);
        return (Opal.defn(self, '$run_callbacks', TMP_App_run_callbacks_31 = function $$run_callbacks() {
          var self = this;

          
          self.$trace("robe/client/app", 186, self, "run_callbacks", " : on_render=\#{on_render}");
          $send(self.$on_render(), 'each', [], "render".$to_proc());
          return self.$on_render().$clear();
        }, TMP_App_run_callbacks_31.$$arity = 0), nil) && 'run_callbacks';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting);
    self.$module_function();
    
    Opal.defn(self, '$app_class', TMP_Robe_app_class_32 = function $$app_class() {
      var $a, self = this;
      if (self.app_class == null) self.app_class = nil;

      return (self.app_class = ($truthy($a = self.app_class) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App')))
    }, TMP_Robe_app_class_32.$$arity = 0);
    
    Opal.defn(self, '$app', TMP_Robe_app_33 = function $$app() {
      var self = this;

      return self.$app_class().$instance()
    }, TMP_Robe_app_33.$$arity = 0);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["todo-example/common/todo"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$attr', '$new', '$[]', '$counts', '$mutate!', '$<<', '$todos', '$update_counts', '$observe', '$last', '$+', '$size', '$delete', '$reject', '$done', '$select', '$private', '$all', '$[]=', '$-', '$active']);
  
  self.$require("robe/common/state/atom");
  (function($base, $super, $parent_nesting) {
    function $Todo(){};
    var self = $Todo = $klass($base, $super, 'Todo', $Todo);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return self.$attr("id", "text", "done")
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Atom'), $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Todos(){};
    var self = $Todos = $klass($base, $super, 'Todos', $Todos);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Todos_initialize_1, TMP_Todos_count_2, TMP_Todos_add_5, TMP_Todos_delete_7, TMP_Todos_all_8, TMP_Todos_active_10, TMP_Todos_done_12, TMP_Todos_update_counts_14;

    
    self.$attr("todos", "counts");
    
    Opal.defn(self, '$initialize', TMP_Todos_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_Todos_initialize_1.$$p, $yield = $iter || nil;

      if ($iter) TMP_Todos_initialize_1.$$p = null;
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Todos_initialize_1, false), [$hash2(["todos", "counts"], {"todos": Opal.const_get_relative($nesting, 'Array').$new(), "counts": $hash2(["all", "active", "done"], {"all": 0, "active": 0, "done": 0})})], null)
    }, TMP_Todos_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$count', TMP_Todos_count_2 = function $$count(which) {
      var $a, self = this;

      if (which == null) {
        which = "all";
      }
      return ($truthy($a = self.$counts()['$[]'](which)) ? $a : "?")
    }, TMP_Todos_count_2.$$arity = -1);
    
    Opal.defn(self, '$add', TMP_Todos_add_5 = function $$add($kwargs) {
      var TMP_3, self = this, id, text, done;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      id = $kwargs.$$smap["id"];
      if (id == null) {
        id = $rb_plus(self.$todos().$size(), 1)
      }
      text = $kwargs.$$smap["text"];
      if (text == null) {
        text = "" + "Todo #" + (self.$todos().$size())
      }
      done = $kwargs.$$smap["done"];
      if (done == null) {
        done = false
      }
      return $send(self, 'mutate!', [], (TMP_3 = function(){var self = TMP_3.$$s || this, TMP_4;

      
        self.$todos()['$<<'](Opal.const_get_relative($nesting, 'Todo').$new($hash2(["id", "text", "done"], {"id": id, "text": text, "done": done})));
        self.$update_counts();
        return $send(self.$todos().$last(), 'observe', [], (TMP_4 = function(){var self = TMP_4.$$s || this;

        return self.$update_counts()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
    }, TMP_Todos_add_5.$$arity = -1);
    
    Opal.defn(self, '$delete', TMP_Todos_delete_7 = function(todo) {
      var TMP_6, self = this;

      return $send(self, 'mutate!', [], (TMP_6 = function(){var self = TMP_6.$$s || this;

      
        self.$todos().$delete(todo);
        return self.$update_counts();}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
    }, TMP_Todos_delete_7.$$arity = 1);
    
    Opal.defn(self, '$all', TMP_Todos_all_8 = function $$all() {
      var self = this;

      return self.$todos()
    }, TMP_Todos_all_8.$$arity = 0);
    
    Opal.defn(self, '$active', TMP_Todos_active_10 = function $$active() {
      var TMP_9, self = this;

      return $send(self.$todos(), 'reject', [], (TMP_9 = function(e){var self = TMP_9.$$s || this;
if (e == null) e = nil;
      return e.$done()}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))
    }, TMP_Todos_active_10.$$arity = 0);
    
    Opal.defn(self, '$done', TMP_Todos_done_12 = function $$done() {
      var TMP_11, self = this;

      return $send(self.$todos(), 'select', [], (TMP_11 = function(e){var self = TMP_11.$$s || this;
if (e == null) e = nil;
      return e.$done()}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))
    }, TMP_Todos_done_12.$$arity = 0);
    self.$private();
    return (Opal.defn(self, '$update_counts', TMP_Todos_update_counts_14 = function $$update_counts() {
      var TMP_13, self = this;

      return $send(self, 'mutate!', [], (TMP_13 = function(){var self = TMP_13.$$s || this, $writer = nil;

      
        
        $writer = ["all", self.$all().$size()];
        $send(self.$counts(), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["active", self.$active().$size()];
        $send(self.$counts(), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["done", self.$done().$size()];
        $send(self.$counts(), '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))
    }, TMP_Todos_update_counts_14.$$arity = 0), nil) && 'update_counts';
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'State'), 'Atom'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["todo-example/client/components/header"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$style', '$h1', '$em']);
  return (function($base, $super, $parent_nesting) {
    function $TodoApp(){};
    var self = $TodoApp = $klass($base, $super, 'TodoApp', $TodoApp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Header(){};
      var self = $Header = $klass($base, $super, 'Header', $Header);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Header_render_1;

      return (Opal.defn(self, '$render', TMP_Header_render_1 = function $$render() {
        var self = this;

        return self.$h1().$style($hash2(["margin_bottom"], {"margin_bottom": (1).$em()}))['$[]']("RoBE Todos")
      }, TMP_Header_render_1.$$arity = 0), nil) && 'render'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Component'), $nesting)
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App'), $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["todo-example/client/components/add_button"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$on', '$css', '$[]', '$button', '$lambda', '$add']);
  return (function($base, $super, $parent_nesting) {
    function $TodoApp(){};
    var self = $TodoApp = $klass($base, $super, 'TodoApp', $TodoApp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $AddButton(){};
      var self = $AddButton = $klass($base, $super, 'AddButton', $AddButton);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AddButton_render_2;

      return (Opal.defn(self, '$render', TMP_AddButton_render_2 = function $$render() {
        var TMP_1, self = this;

        return self.$button()['$[]']("Add todo...").$css("button").$on($hash2(["click"], {"click": $send(self, 'lambda', [], (TMP_1 = function(){var self = TMP_1.$$s || this;

        return Opal.const_get_relative($nesting, 'TODOS').$add()}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1))}))
      }, TMP_AddButton_render_2.$$arity = 0), nil) && 'render'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Component'), $nesting)
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App'), $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["todo-example/client/components/index"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]', '$style', '$div', '$em', '$bind', '$router', '$map', '$all', '$include?', '$done_states', '$app', '$done', '$todo_item', '$todo_text', '$todo_done', '$todo_delete', '$on', '$value', '$input', '$text', '$lambda', '$mutate!', '$target', '$checked', '$type', '$!', '$button', '$delete']);
  return (function($base, $super, $parent_nesting) {
    function $TodoApp(){};
    var self = $TodoApp = $klass($base, $super, 'TodoApp', $TodoApp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Index(){};
      var self = $Index = $klass($base, $super, 'Index', $Index);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Index_render_5, TMP_Index_todo_item_6, TMP_Index_todo_text_8, TMP_Index_todo_done_10, TMP_Index_todo_delete_12;

      
      
      Opal.defn(self, '$render', TMP_Index_render_5 = function $$render() {
        var TMP_1, self = this;

        return self.$div().$style($hash2(["margin_top"], {"margin_top": (1).$em()}))['$[]']($send(self, 'bind', [self.$router()], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2;

        return self.$div()['$[]']($send(self, 'bind', [Opal.const_get_relative($nesting, 'TODOS')], (TMP_2 = function(){var self = TMP_2.$$s || this, TMP_3;

          return $send(Opal.const_get_relative($nesting, 'TODOS').$all(), 'map', [], (TMP_3 = function(todo){var self = TMP_3.$$s || this, TMP_4;
if (todo == null) todo = nil;
            return $send(self, 'bind', [todo, "done"], (TMP_4 = function(){var self = TMP_4.$$s || this;

              if ($truthy(self.$app().$done_states()['$include?'](todo.$done()))) {
                  return self.$todo_item(todo)
                  } else {
                  return nil
                }}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2)))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1)))
      }, TMP_Index_render_5.$$arity = 0);
      
      Opal.defn(self, '$todo_item', TMP_Index_todo_item_6 = function $$todo_item(todo) {
        var self = this;

        return self.$div().$style($hash2(["margin_bottom"], {"margin_bottom": (1).$em()}))['$[]'](self.$todo_text(todo), self.$todo_done(todo), self.$todo_delete(todo))
      }, TMP_Index_todo_item_6.$$arity = 1);
      
      Opal.defn(self, '$todo_text', TMP_Index_todo_text_8 = function $$todo_text(todo) {
        var TMP_7, self = this;

        return self.$input().$value(todo.$text()).$style($hash2(["width"], {"width": (30).$em()})).$on($hash2(["input"], {"input": $send(self, 'lambda', [], (TMP_7 = function(event){var self = TMP_7.$$s || this;
if (event == null) event = nil;
        return todo['$mutate!']($hash2(["text"], {"text": event.$target().$value()}))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))}))
      }, TMP_Index_todo_text_8.$$arity = 1);
      
      Opal.defn(self, '$todo_done', TMP_Index_todo_done_10 = function $$todo_done(todo) {
        var TMP_9, self = this;

        return self.$input().$type("checkbox").$checked(todo.$done()).$style($hash2(["margin_left"], {"margin_left": (2).$em()})).$on($hash2(["click"], {"click": $send(self, 'lambda', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

        return todo['$mutate!']($hash2(["done"], {"done": todo.$done()['$!']()}))}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))}))
      }, TMP_Index_todo_done_10.$$arity = 1);
      return (Opal.defn(self, '$todo_delete', TMP_Index_todo_delete_12 = function $$todo_delete(todo) {
        var TMP_11, self = this;

        return self.$button()['$[]']("X").$style($hash2(["color", "font_size", "margin_left"], {"color": "red", "font_size": "smaller", "margin_left": (2).$em()})).$on($hash2(["click"], {"click": $send(self, 'lambda', [], (TMP_11 = function(){var self = TMP_11.$$s || this;

        return Opal.const_get_relative($nesting, 'TODOS').$delete(todo)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11))}))
      }, TMP_Index_todo_delete_12.$$arity = 1), nil) && 'todo_delete';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Component'), $nesting)
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App'), $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["todo-example/client/components/footer"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$bind', '$router', '$[]', '$div', '$>', '$count', '$button_link', '$href', '$link', '$style', '$disabled', '$css', '$button', '$==', '$done_scope', '$app', '$em', '$capitalize', '$to_s']);
  return (function($base, $super, $parent_nesting) {
    function $TodoApp(){};
    var self = $TodoApp = $klass($base, $super, 'TodoApp', $TodoApp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Footer(){};
      var self = $Footer = $klass($base, $super, 'Footer', $Footer);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Footer_render_3, TMP_Footer_button_link_4;

      
      
      Opal.defn(self, '$render', TMP_Footer_render_3 = function $$render() {
        var TMP_1, self = this;

        return $send(self, 'bind', [self.$router()], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2;

        return self.$div()['$[]']($send(self, 'bind', [Opal.const_get_relative($nesting, 'TODOS')], (TMP_2 = function(){var self = TMP_2.$$s || this;

          if ($truthy($rb_gt(Opal.const_get_relative($nesting, 'TODOS').$count(), 1))) {
              return self.$div()['$[]'](self.$button_link("all"), self.$button_link("active"), self.$button_link("done"))
              } else {
              return nil
            }}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2)))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1))
      }, TMP_Footer_render_3.$$arity = 0);
      return (Opal.defn(self, '$button_link', TMP_Footer_button_link_4 = function $$button_link(which) {
        var self = this;

        return self.$link().$href("" + "/page/" + (which))['$[]'](self.$button().$css("button").$disabled(self.$app().$done_scope()['$=='](which)).$style($hash2(["margin_right", "width"], {"margin_right": (1).$em(), "width": (6).$em()}))['$[]']("" + (which.$to_s().$capitalize()) + " (" + (Opal.const_get_relative($nesting, 'TODOS').$count(which)) + ")"))
      }, TMP_Footer_button_link_4.$$arity = 1), nil) && 'button_link';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Component'), $nesting)
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App'), $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["todo-example/client/components/page"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$[]', '$style', '$div', '$em', '$new']);
  
  self.$require("todo-example/common/todo");
  self.$require("todo-example/client/components/header");
  self.$require("todo-example/client/components/add_button");
  self.$require("todo-example/client/components/index");
  self.$require("todo-example/client/components/footer");
  return (function($base, $super, $parent_nesting) {
    function $TodoApp(){};
    var self = $TodoApp = $klass($base, $super, 'TodoApp', $TodoApp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Page(){};
      var self = $Page = $klass($base, $super, 'Page', $Page);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Page_render_1;

      return (Opal.defn(self, '$render', TMP_Page_render_1 = function $$render() {
        var self = this;

        return self.$div().$style($hash2(["margin_left"], {"margin_left": (2).$em()}))['$[]'](Opal.const_get_relative($nesting, 'Header').$new(), Opal.const_get_relative($nesting, 'AddButton').$new(), Opal.const_get_relative($nesting, 'Index').$new(), Opal.const_get_relative($nesting, 'Footer').$new())
      }, TMP_Page_render_1.$$arity = 0), nil) && 'render'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'Component'), $nesting)
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new', '$last', '$split', '$path', '$router', '$nil?', '$empty?', '$done_scope', '$===', '$fail', '$mount']);
  
  self.$require("robe/client/app");
  self.$require("robe/client/router");
  self.$require("robe/common/state/stores/array");
  self.$require("todo-example/client/components/page");
  Opal.const_set($nesting[0], 'TODOS', Opal.const_get_relative($nesting, 'Todos').$new());
  (function($base, $super, $parent_nesting) {
    function $TodoApp(){};
    var self = $TodoApp = $klass($base, $super, 'TodoApp', $TodoApp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TodoApp_initialize_1, TMP_TodoApp_done_scope_2, TMP_TodoApp_done_states_3;

    
    
    Opal.defn(self, '$initialize', TMP_TodoApp_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_TodoApp_initialize_1.$$p, $yield = $iter || nil;

      if ($iter) TMP_TodoApp_initialize_1.$$p = null;
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_TodoApp_initialize_1, false), [Opal.const_get_relative($nesting, 'Page').$new()], null)
    }, TMP_TodoApp_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$done_scope', TMP_TodoApp_done_scope_2 = function $$done_scope() {
      var $a, self = this, scope = nil;

      
      scope = self.$router().$path().$split("/").$last();
      if ($truthy(($truthy($a = scope['$nil?']()) ? $a : scope['$empty?']()))) {
        return "all"
        } else {
        return scope
      };
    }, TMP_TodoApp_done_scope_2.$$arity = 0);
    return (Opal.defn(self, '$done_states', TMP_TodoApp_done_states_3 = function $$done_states() {
      var self = this, $case = nil;

      return (function() {$case = self.$done_scope();
      if ("all"['$===']($case)) {return [true, false]}
      else if ("active"['$===']($case)) {return [false]}
      else if ("done"['$===']($case)) {return [true]}
      else {return self.$fail()}})()
    }, TMP_TodoApp_done_states_3.$$arity = 0), nil) && 'done_states';
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Robe'), 'Client'), 'App'), $nesting);
  console.log("************ calling TodoApp.new.mount ***********");
  return Opal.const_get_relative($nesting, 'TodoApp').$new().$mount();
})(Opal);
